<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nettiers.AdventureWorks.Services</name>
    </assembly>
    <members>
        <member name="T:Nettiers.AdventureWorks.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsService">
            <summary>
             An component type implementation of the 'vSalesPersonSalesByFiscalYears' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase">
            <summary>
             An object representation of the 'vSalesPersonSalesByFiscalYears' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VSalesPersonSalesByFiscalYears.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPersonSalesByFiscalYears"/> class.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:Nettiers.AdventureWorks.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:Nettiers.AdventureWorks.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.OnProcessStarting(Nettiers.AdventureWorks.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.OnProcessEnded(Nettiers.AdventureWorks.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:Nettiers.AdventureWorks.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPersonSalesByFiscalYears"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.CreateVSalesPersonSalesByFiscalYears(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPersonSalesByFiscalYears"/> instance.
            </summary>
            <param name="_salesPersonId"></param>
            <param name="_fullName"></param>
            <param name="_title"></param>
            <param name="_salesTerritory"></param>
            <param name="_safeName2002"></param>
            <param name="_safeName2003"></param>
            <param name="_safeName2004"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VSalesPersonSalesByFiscalYears} of <c>VSalesPersonSalesByFiscalYears</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPersonSalesByFiscalYears"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPersonSalesByFiscalYears"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VSalesPersonSalesByFiscalYears</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VSalesPersonSalesByFiscalYears</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VSalesPersonSalesByFiscalYears</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VSalesPersonSalesByFiscalYears</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VSalesPersonSalesByFiscalYears</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VSalesPersonSalesByFiscalYears</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonSalesByFiscalYearsService.#ctor">
            <summary>
            Initializes a new instance of the VSalesPersonSalesByFiscalYearsService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VendorContactService">
            <summary>
            An component type implementation of the 'VendorContact' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VendorContactServiceBase">
            <summary>
             An object representation of the 'VendorContact' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VendorContact.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> class.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.OnProcessStarting(Nettiers.AdventureWorks.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.OnProcessEnded(Nettiers.AdventureWorks.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.BulkInsert(Nettiers.AdventureWorks.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[],Nettiers.AdventureWorks.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.DeepLoad(Nettiers.AdventureWorks.Entities.TList{`0},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.DeepSave(`0,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.DeepSave(`0,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.DeepSave(Nettiers.AdventureWorks.Entities.TList{`0},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:Nettiers.AdventureWorks.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.CreateVendorContact(System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> instance.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="_contactTypeId">Contact type such as sales manager, or sales agent.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByVendorId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_VendorContact_Vendor_VendorID key.
            	FK_VendorContact_Vendor_VendorID Description: Foreign key constraint referencing Vendor.VendorID.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <returns>Returns a generic collection of VendorContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByVendorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_VendorContact_Vendor_VendorID key.
            	FK_VendorContact_Vendor_VendorID Description: Foreign key constraint referencing Vendor.VendorID.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Get(Nettiers.AdventureWorks.Entities.VendorContactKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByContactId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_VendorContact_ContactID index.
            </summary>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByContactId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_VendorContact_ContactID index.
            </summary>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByContactTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_VendorContact_ContactTypeID index.
            </summary>
            <param name="_contactTypeId">Contact type such as sales manager, or sales agent.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByContactTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_VendorContact_ContactTypeID index.
            </summary>
            <param name="_contactTypeId">Contact type such as sales manager, or sales agent.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByVendorIdContactId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_VendorContact_VendorID_ContactID index.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetByVendorIdContactId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_VendorContact_VendorID_ContactID index.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VendorContact} of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VendorContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Insert(Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            public virtual method that Inserts a VendorContact object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorContact object to Insert.</param>
            <remarks>After Inserting into the datasource, the VendorContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            VendorContact entity = new VendorContact();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	VendorContactService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>VendorContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of VendorContact.
             <code><![CDATA[
             TList<VendorContact> list = new TList<VendorContact>();
             VendorContact entity = new VendorContact();
             entity.StringProperty = "foo";
             VendorContact entity2 = new VendorContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorContactService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Update(Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            public virtual method that Updates a VendorContact object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorContact object to Update.</param>
            <remarks>After Updateing into the datasource, the VendorContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            VendorContact entity = VendorContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	VendorContactService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>VendorContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of VendorContact.
             <code><![CDATA[
             TList<VendorContact> list = new TList<VendorContact>();
             VendorContact entity = new VendorContact();
             entity.StringProperty = "foo";
             VendorContact entity2 = new VendorContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorContactService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Save(Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            public virtual method that Saves a VendorContact object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorContact object to Save.</param>
            <remarks>After Saveing into the datasource, the VendorContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            VendorContact entity = VendorContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	VendorContactService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>VendorContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of VendorContact.
             <code><![CDATA[
             TList<VendorContact> list = new TList<VendorContact>();
             VendorContact entity = new VendorContact();
             entity.StringProperty = "foo";
             VendorContact entity2 = new VendorContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorContactService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            public virtual method that Deletes a VendorContact object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorContact object to Delete.</param>
            <remarks>After Deleteing into the datasource, the VendorContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            VendorContact entity = VendorContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	VendorContactService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>VendorContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of VendorContact.
             <code><![CDATA[
             TList<VendorContact> list = new TList<VendorContact>();
             VendorContact entity = new VendorContact();
             entity.StringProperty = "foo";
             VendorContact entity2 = new VendorContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorContactService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.VendorContactKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _vendorId, System.Int32 _contactId
            </summary>
            <param name="_vendorId">VendorContact pk id.</param>
            <param name="_contactId">VendorContact pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoadByContactId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">VendorContact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoadByContactTypeId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_contactTypeId">Contact type such as sales manager, or sales agent.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">VendorContact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoadByVendorIdContactId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">VendorContact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">VendorContact Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorContact,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">VendorContact Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorContact,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">VendorContact Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.VendorContact)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.VendorContact"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">VendorContact Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.VendorContact,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the VendorContact object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">VendorContact Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>VendorContact</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{VendorContact} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorContact},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">VendorContact Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.VendorContactServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorContactService.#ctor">
            <summary>
            Initializes a new instance of the VendorContactService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductVendorServiceBase">
            <summary>
             An object representation of the 'ProductVendor' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductVendor.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.CreateProductVendor(System.Int32,System.Int32,System.Int32,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> instance.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="_averageLeadTime">The average span of time (in days) between placing an order with the vendor and receiving the purchased product.</param>
            <param name="_standardPrice">The vendor's usual selling price.</param>
            <param name="_lastReceiptCost">The selling price when last purchased.</param>
            <param name="_lastReceiptDate">Date the product was last received by the vendor.</param>
            <param name="_minOrderQty">The maximum quantity that should be ordered.</param>
            <param name="_maxOrderQty">The minimum quantity that should be ordered.</param>
            <param name="_onOrderQty">The quantity currently on order.</param>
            <param name="_unitMeasureCode">The product's unit of measure.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductVendor_Product_ProductID key.
            	FK_ProductVendor_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of ProductVendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductVendor_Product_ProductID key.
            	FK_ProductVendor_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductVendorKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByUnitMeasureCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ProductVendor_UnitMeasureCode index.
            </summary>
            <param name="_unitMeasureCode">The product's unit of measure.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByUnitMeasureCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ProductVendor_UnitMeasureCode index.
            </summary>
            <param name="_unitMeasureCode">The product's unit of measure.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByVendorId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ProductVendor_VendorID index.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByVendorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ProductVendor_VendorID index.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByProductIdVendorId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductVendor_ProductID_VendorID index.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetByProductIdVendorId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductVendor_ProductID_VendorID index.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductVendor} of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            public virtual method that Inserts a ProductVendor object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductVendor object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductVendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductVendor entity = new ProductVendor();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductVendorService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductVendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductVendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductVendor.
             <code><![CDATA[
             TList<ProductVendor> list = new TList<ProductVendor>();
             ProductVendor entity = new ProductVendor();
             entity.StringProperty = "foo";
             ProductVendor entity2 = new ProductVendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductVendorService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            public virtual method that Updates a ProductVendor object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductVendor object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductVendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductVendor entity = ProductVendorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductVendorService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductVendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductVendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductVendor.
             <code><![CDATA[
             TList<ProductVendor> list = new TList<ProductVendor>();
             ProductVendor entity = new ProductVendor();
             entity.StringProperty = "foo";
             ProductVendor entity2 = new ProductVendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductVendorService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            public virtual method that Saves a ProductVendor object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductVendor object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductVendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductVendor entity = ProductVendorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductVendorService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductVendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductVendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductVendor.
             <code><![CDATA[
             TList<ProductVendor> list = new TList<ProductVendor>();
             ProductVendor entity = new ProductVendor();
             entity.StringProperty = "foo";
             ProductVendor entity2 = new ProductVendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductVendorService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            public virtual method that Deletes a ProductVendor object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductVendor object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductVendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductVendor entity = ProductVendorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductVendorService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductVendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductVendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductVendor.
             <code><![CDATA[
             TList<ProductVendor> list = new TList<ProductVendor>();
             ProductVendor entity = new ProductVendor();
             entity.StringProperty = "foo";
             ProductVendor entity2 = new ProductVendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductVendorService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductVendorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productId, System.Int32 _vendorId
            </summary>
            <param name="_productId">ProductVendor pk id.</param>
            <param name="_vendorId">ProductVendor pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoadByUnitMeasureCode(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_unitMeasureCode">The product's unit of measure.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductVendor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoadByVendorId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductVendor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoadByProductIdVendorId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductVendor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductVendor Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductVendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductVendor,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductVendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductVendor Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductVendor,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductVendor Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductVendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductVendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductVendor)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductVendor"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductVendor Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductVendor,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductVendor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductVendor Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductVendor</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductVendor} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductVendor},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductVendor Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductVendorServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase">
            <summary>
             An object representation of the 'ProductModelProductDescriptionCulture' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductModelProductDescriptionCulture.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.CreateProductModelProductDescriptionCulture(System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> instance.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByCultureId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelProductDescriptionCulture_Culture_CultureID key.
            	FK_ProductModelProductDescriptionCulture_Culture_CultureID Description: Foreign key constraint referencing Culture.CultureID.
            </summary>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <returns>Returns a generic collection of ProductModelProductDescriptionCulture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByCultureId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelProductDescriptionCulture_Culture_CultureID key.
            	FK_ProductModelProductDescriptionCulture_Culture_CultureID Description: Foreign key constraint referencing Culture.CultureID.
            </summary>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByProductDescriptionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID key.
            	FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID Description: Foreign key constraint referencing ProductDescription.ProductDescriptionID.
            </summary>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <returns>Returns a generic collection of ProductModelProductDescriptionCulture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByProductDescriptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID key.
            	FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID Description: Foreign key constraint referencing ProductDescription.ProductDescriptionID.
            </summary>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByProductModelId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID key.
            	FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <returns>Returns a generic collection of ProductModelProductDescriptionCulture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByProductModelId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID key.
            	FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCultureKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByProductModelIdProductDescriptionIdCultureId(System.Int32,System.Int32,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID index.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetByProductModelIdProductDescriptionIdCultureId(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID index.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductModelProductDescriptionCulture} of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductModelProductDescriptionCulture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            public virtual method that Inserts a ProductModelProductDescriptionCulture object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelProductDescriptionCulture object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductModelProductDescriptionCulture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductModelProductDescriptionCulture entity = new ProductModelProductDescriptionCulture();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductModelProductDescriptionCultureService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelProductDescriptionCulture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductModelProductDescriptionCulture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductModelProductDescriptionCulture.
             <code><![CDATA[
             TList<ProductModelProductDescriptionCulture> list = new TList<ProductModelProductDescriptionCulture>();
             ProductModelProductDescriptionCulture entity = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "foo";
             ProductModelProductDescriptionCulture entity2 = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelProductDescriptionCultureService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            public virtual method that Updates a ProductModelProductDescriptionCulture object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelProductDescriptionCulture object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductModelProductDescriptionCulture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductModelProductDescriptionCulture entity = ProductModelProductDescriptionCultureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductModelProductDescriptionCultureService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelProductDescriptionCulture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductModelProductDescriptionCulture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductModelProductDescriptionCulture.
             <code><![CDATA[
             TList<ProductModelProductDescriptionCulture> list = new TList<ProductModelProductDescriptionCulture>();
             ProductModelProductDescriptionCulture entity = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "foo";
             ProductModelProductDescriptionCulture entity2 = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelProductDescriptionCultureService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            public virtual method that Saves a ProductModelProductDescriptionCulture object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelProductDescriptionCulture object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductModelProductDescriptionCulture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductModelProductDescriptionCulture entity = ProductModelProductDescriptionCultureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductModelProductDescriptionCultureService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelProductDescriptionCulture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductModelProductDescriptionCulture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductModelProductDescriptionCulture.
             <code><![CDATA[
             TList<ProductModelProductDescriptionCulture> list = new TList<ProductModelProductDescriptionCulture>();
             ProductModelProductDescriptionCulture entity = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "foo";
             ProductModelProductDescriptionCulture entity2 = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelProductDescriptionCultureService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            public virtual method that Deletes a ProductModelProductDescriptionCulture object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelProductDescriptionCulture object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductModelProductDescriptionCulture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductModelProductDescriptionCulture entity = ProductModelProductDescriptionCultureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductModelProductDescriptionCultureService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelProductDescriptionCulture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductModelProductDescriptionCulture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductModelProductDescriptionCulture.
             <code><![CDATA[
             TList<ProductModelProductDescriptionCulture> list = new TList<ProductModelProductDescriptionCulture>();
             ProductModelProductDescriptionCulture entity = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "foo";
             ProductModelProductDescriptionCulture entity2 = new ProductModelProductDescriptionCulture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelProductDescriptionCultureService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCultureKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.Delete(System.Int32,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productModelId, System.Int32 _productDescriptionId, System.String _cultureId
            </summary>
            <param name="_productModelId">ProductModelProductDescriptionCulture pk id.</param>
            <param name="_productDescriptionId">ProductModelProductDescriptionCulture pk id.</param>
            <param name="_cultureId">ProductModelProductDescriptionCulture pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoadByProductModelIdProductDescriptionIdCultureId(System.Int32,System.Int32,System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModelProductDescriptionCulture Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductModelProductDescriptionCulture Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductModelProductDescriptionCulture Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModelProductDescriptionCulture Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductModelProductDescriptionCulture Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductModelProductDescriptionCulture object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductModelProductDescriptionCulture Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductModelProductDescriptionCulture</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductModelProductDescriptionCulture} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductModelProductDescriptionCulture Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureService">
            <summary>
            An component type implementation of the 'ProductModelProductDescriptionCulture' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelProductDescriptionCultureService.#ctor">
            <summary>
            Initializes a new instance of the ProductModelProductDescriptionCultureService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase">
            <summary>
             An object representation of the 'ProductModelIllustration' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductModelIllustration.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.CreateProductModelIllustration(System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> instance.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetByIllustrationId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelIllustration_Illustration_IllustrationID key.
            	FK_ProductModelIllustration_Illustration_IllustrationID Description: Foreign key constraint referencing Illustration.IllustrationID.
            </summary>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <returns>Returns a generic collection of ProductModelIllustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetByIllustrationId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelIllustration_Illustration_IllustrationID key.
            	FK_ProductModelIllustration_Illustration_IllustrationID Description: Foreign key constraint referencing Illustration.IllustrationID.
            </summary>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetByProductModelId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelIllustration_ProductModel_ProductModelID key.
            	FK_ProductModelIllustration_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <returns>Returns a generic collection of ProductModelIllustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetByProductModelId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductModelIllustration_ProductModel_ProductModelID key.
            	FK_ProductModelIllustration_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductModelIllustrationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetByProductModelIdIllustrationId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductModelIllustration_ProductModelID_IllustrationID index.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetByProductModelIdIllustrationId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductModelIllustration_ProductModelID_IllustrationID index.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductModelIllustration} of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductModelIllustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            public virtual method that Inserts a ProductModelIllustration object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelIllustration object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductModelIllustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductModelIllustration entity = new ProductModelIllustration();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductModelIllustrationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelIllustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductModelIllustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductModelIllustration.
             <code><![CDATA[
             TList<ProductModelIllustration> list = new TList<ProductModelIllustration>();
             ProductModelIllustration entity = new ProductModelIllustration();
             entity.StringProperty = "foo";
             ProductModelIllustration entity2 = new ProductModelIllustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelIllustrationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            public virtual method that Updates a ProductModelIllustration object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelIllustration object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductModelIllustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductModelIllustration entity = ProductModelIllustrationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductModelIllustrationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelIllustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductModelIllustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductModelIllustration.
             <code><![CDATA[
             TList<ProductModelIllustration> list = new TList<ProductModelIllustration>();
             ProductModelIllustration entity = new ProductModelIllustration();
             entity.StringProperty = "foo";
             ProductModelIllustration entity2 = new ProductModelIllustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelIllustrationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            public virtual method that Saves a ProductModelIllustration object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelIllustration object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductModelIllustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductModelIllustration entity = ProductModelIllustrationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductModelIllustrationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelIllustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductModelIllustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductModelIllustration.
             <code><![CDATA[
             TList<ProductModelIllustration> list = new TList<ProductModelIllustration>();
             ProductModelIllustration entity = new ProductModelIllustration();
             entity.StringProperty = "foo";
             ProductModelIllustration entity2 = new ProductModelIllustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelIllustrationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            public virtual method that Deletes a ProductModelIllustration object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModelIllustration object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductModelIllustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductModelIllustration entity = ProductModelIllustrationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductModelIllustrationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModelIllustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductModelIllustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductModelIllustration.
             <code><![CDATA[
             TList<ProductModelIllustration> list = new TList<ProductModelIllustration>();
             ProductModelIllustration entity = new ProductModelIllustration();
             entity.StringProperty = "foo";
             ProductModelIllustration entity2 = new ProductModelIllustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelIllustrationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductModelIllustrationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productModelId, System.Int32 _illustrationId
            </summary>
            <param name="_productModelId">ProductModelIllustration pk id.</param>
            <param name="_illustrationId">ProductModelIllustration pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoadByProductModelIdIllustrationId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModelIllustration Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductModelIllustration Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelIllustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelIllustration,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelIllustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductModelIllustration Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelIllustration,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModelIllustration Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelIllustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModelIllustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductModelIllustration)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModelIllustration"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductModelIllustration Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductModelIllustration,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductModelIllustration object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductModelIllustration Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductModelIllustration</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductModelIllustration} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModelIllustration},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductModelIllustration Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductModelIllustrationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase">
            <summary>
             An object representation of the 'ProductInventory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductInventory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.CreateProductInventory(System.Int32,System.Int16,System.String,System.Byte,System.Int16,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="_shelf">Storage compartment within an inventory location.</param>
            <param name="_bin">Storage container on a shelf in an inventory location.</param>
            <param name="_quantity">Quantity of products in the inventory location.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetByLocationId(System.Int16)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductInventory_Location_LocationID key.
            	FK_ProductInventory_Location_LocationID Description: Foreign key constraint referencing Location.LocationID.
            </summary>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <returns>Returns a generic collection of ProductInventory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetByLocationId(System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductInventory_Location_LocationID key.
            	FK_ProductInventory_Location_LocationID Description: Foreign key constraint referencing Location.LocationID.
            </summary>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductInventory_Product_ProductID key.
            	FK_ProductInventory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of ProductInventory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductInventory_Product_ProductID key.
            	FK_ProductInventory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductInventoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetByProductIdLocationId(System.Int32,System.Int16)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductInventory_ProductID_LocationID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetByProductIdLocationId(System.Int32,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductInventory_ProductID_LocationID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductInventory} of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductInventory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            public virtual method that Inserts a ProductInventory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductInventory object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductInventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductInventory entity = new ProductInventory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductInventoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductInventory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductInventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductInventory.
             <code><![CDATA[
             TList<ProductInventory> list = new TList<ProductInventory>();
             ProductInventory entity = new ProductInventory();
             entity.StringProperty = "foo";
             ProductInventory entity2 = new ProductInventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductInventoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            public virtual method that Updates a ProductInventory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductInventory object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductInventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductInventory entity = ProductInventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductInventoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductInventory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductInventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductInventory.
             <code><![CDATA[
             TList<ProductInventory> list = new TList<ProductInventory>();
             ProductInventory entity = new ProductInventory();
             entity.StringProperty = "foo";
             ProductInventory entity2 = new ProductInventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductInventoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            public virtual method that Saves a ProductInventory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductInventory object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductInventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductInventory entity = ProductInventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductInventoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductInventory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductInventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductInventory.
             <code><![CDATA[
             TList<ProductInventory> list = new TList<ProductInventory>();
             ProductInventory entity = new ProductInventory();
             entity.StringProperty = "foo";
             ProductInventory entity2 = new ProductInventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductInventoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            public virtual method that Deletes a ProductInventory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductInventory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductInventory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductInventory entity = ProductInventoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductInventoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductInventory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductInventory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductInventory.
             <code><![CDATA[
             TList<ProductInventory> list = new TList<ProductInventory>();
             ProductInventory entity = new ProductInventory();
             entity.StringProperty = "foo";
             ProductInventory entity2 = new ProductInventory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductInventoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductInventoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.Delete(System.Int32,System.Int16)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productId, System.Int16 _locationId
            </summary>
            <param name="_productId">ProductInventory pk id.</param>
            <param name="_locationId">ProductInventory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoadByProductIdLocationId(System.Int32,System.Int16,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductInventory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductInventory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductInventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductInventory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductInventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductInventory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductInventory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductInventory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductInventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductInventory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductInventory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductInventory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductInventory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductInventory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductInventory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductInventory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductInventory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductInventory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductInventory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductInventory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductInventoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductCostHistoryService">
            <summary>
            An component type implementation of the 'ProductCostHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase">
            <summary>
             An object representation of the 'ProductCostHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductCostHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.CreateProductCostHistory(System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">Product cost start date.</param>
            <param name="_endDate">Product cost end date.</param>
            <param name="_standardCost">Standard cost of the product.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductCostHistory_Product_ProductID key.
            	FK_ProductCostHistory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <returns>Returns a generic collection of ProductCostHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductCostHistory_Product_ProductID key.
            	FK_ProductCostHistory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductCostHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetByProductIdStartDate(System.Int32,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductCostHistory_ProductID_StartDate index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">Product cost start date.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetByProductIdStartDate(System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductCostHistory_ProductID_StartDate index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">Product cost start date.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductCostHistory} of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductCostHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            public virtual method that Inserts a ProductCostHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCostHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductCostHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductCostHistory entity = new ProductCostHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductCostHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCostHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductCostHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductCostHistory.
             <code><![CDATA[
             TList<ProductCostHistory> list = new TList<ProductCostHistory>();
             ProductCostHistory entity = new ProductCostHistory();
             entity.StringProperty = "foo";
             ProductCostHistory entity2 = new ProductCostHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCostHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            public virtual method that Updates a ProductCostHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCostHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductCostHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductCostHistory entity = ProductCostHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductCostHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCostHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductCostHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductCostHistory.
             <code><![CDATA[
             TList<ProductCostHistory> list = new TList<ProductCostHistory>();
             ProductCostHistory entity = new ProductCostHistory();
             entity.StringProperty = "foo";
             ProductCostHistory entity2 = new ProductCostHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCostHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            public virtual method that Saves a ProductCostHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCostHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductCostHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductCostHistory entity = ProductCostHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductCostHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCostHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductCostHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductCostHistory.
             <code><![CDATA[
             TList<ProductCostHistory> list = new TList<ProductCostHistory>();
             ProductCostHistory entity = new ProductCostHistory();
             entity.StringProperty = "foo";
             ProductCostHistory entity2 = new ProductCostHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCostHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            public virtual method that Deletes a ProductCostHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCostHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductCostHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductCostHistory entity = ProductCostHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductCostHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCostHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductCostHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductCostHistory.
             <code><![CDATA[
             TList<ProductCostHistory> list = new TList<ProductCostHistory>();
             ProductCostHistory entity = new ProductCostHistory();
             entity.StringProperty = "foo";
             ProductCostHistory entity2 = new ProductCostHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCostHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductCostHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.Delete(System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productId, System.DateTime _startDate
            </summary>
            <param name="_productId">ProductCostHistory pk id.</param>
            <param name="_startDate">ProductCostHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoadByProductIdStartDate(System.Int32,System.DateTime,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">Product cost start date.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCostHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductCostHistory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCostHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCostHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCostHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductCostHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCostHistory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCostHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCostHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCostHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductCostHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCostHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductCostHistory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductCostHistory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductCostHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductCostHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductCostHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductCostHistory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCostHistory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductCostHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductCostHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCostHistoryService.#ctor">
            <summary>
            Initializes a new instance of the ProductCostHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.LocationServiceBase">
            <summary>
             An object representation of the 'Location' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Location.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.CreateLocation(System.String,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> instance.
            </summary>
            <param name="_name">Location description.</param>
            <param name="_costRate">Standard hourly cost of the manufacturing location.</param>
            <param name="_availability">Work capacity (in hours) of the manufacturing location.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Get(Nettiers.AdventureWorks.Entities.LocationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Location_Name index.
            </summary>
            <param name="_name">Location description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Location_Name index.
            </summary>
            <param name="_name">Location description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetByLocationId(System.Int16)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Location_LocationID index.
            </summary>
            <param name="_locationId">Primary key for Location records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetByLocationId(System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Location_LocationID index.
            </summary>
            <param name="_locationId">Primary key for Location records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Location} of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Insert(Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            public virtual method that Inserts a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Insert.</param>
            <remarks>After Inserting into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Location entity = new Location();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LocationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Update(Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            public virtual method that Updates a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Update.</param>
            <remarks>After Updateing into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Location entity = LocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LocationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Save(Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            public virtual method that Saves a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Save.</param>
            <remarks>After Saveing into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Location entity = LocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LocationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Delete(Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            public virtual method that Deletes a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Location entity = LocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LocationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Delete(Nettiers.AdventureWorks.Entities.LocationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.Delete(System.Int16)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int16 _locationId
            </summary>
            <param name="_locationId">Location pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetByProductIdFromProductInventory(System.Int32)">
            <summary>
            	Gets Location objects from the datasource by ProductID in the
            	ProductInventory table. Table Location is related to table Product
            	through the (M:N) relationship defined in the ProductInventory table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a typed collection of Location objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.GetByProductIdFromProductInventory(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Location objects from the datasource by ProductID in the
            	ProductInventory table. Table Location is related to table Product
            	through the (M:N) relationship defined in the ProductInventory table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Location objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Location description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Location Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoadByLocationId(System.Int16,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_locationId">Primary key for Location records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Location Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Location Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Location,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Location Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Location,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Location Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Location"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Location)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Location"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Location Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Location,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Location object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Location Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Location</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Location} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Location},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Location Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.LocationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ErrorLogServiceBase">
            <summary>
             An object representation of the 'ErrorLog' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ErrorLog.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.CreateErrorLog(System.DateTime,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> instance.
            </summary>
            <param name="_errorTime">The date and time at which the error occurred.</param>
            <param name="_userName">The user who executed the batch in which the error occurred.</param>
            <param name="_errorNumber">The error number of the error that occurred.</param>
            <param name="_errorSeverity">The severity of the error that occurred.</param>
            <param name="_errorState">The state number of the error that occurred.</param>
            <param name="_errorProcedure">The name of the stored procedure or trigger where the error occurred.</param>
            <param name="_errorLine">The line number at which the error occurred.</param>
            <param name="_errorMessage">The message text of the error that occurred.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Get(Nettiers.AdventureWorks.Entities.ErrorLogKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetByErrorLogId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ErrorLog_ErrorLogID index.
            </summary>
            <param name="_errorLogId">Primary key for ErrorLog records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetByErrorLogId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ErrorLog_ErrorLogID index.
            </summary>
            <param name="_errorLogId">Primary key for ErrorLog records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ErrorLog} of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ErrorLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Insert(Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            public virtual method that Inserts a ErrorLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ErrorLog object to Insert.</param>
            <remarks>After Inserting into the datasource, the ErrorLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ErrorLog entity = new ErrorLog();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ErrorLogService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ErrorLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ErrorLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ErrorLog.
             <code><![CDATA[
             TList<ErrorLog> list = new TList<ErrorLog>();
             ErrorLog entity = new ErrorLog();
             entity.StringProperty = "foo";
             ErrorLog entity2 = new ErrorLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ErrorLogService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Update(Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            public virtual method that Updates a ErrorLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ErrorLog object to Update.</param>
            <remarks>After Updateing into the datasource, the ErrorLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ErrorLog entity = ErrorLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ErrorLogService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ErrorLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ErrorLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ErrorLog.
             <code><![CDATA[
             TList<ErrorLog> list = new TList<ErrorLog>();
             ErrorLog entity = new ErrorLog();
             entity.StringProperty = "foo";
             ErrorLog entity2 = new ErrorLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ErrorLogService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Save(Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            public virtual method that Saves a ErrorLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ErrorLog object to Save.</param>
            <remarks>After Saveing into the datasource, the ErrorLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ErrorLog entity = ErrorLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ErrorLogService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ErrorLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ErrorLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ErrorLog.
             <code><![CDATA[
             TList<ErrorLog> list = new TList<ErrorLog>();
             ErrorLog entity = new ErrorLog();
             entity.StringProperty = "foo";
             ErrorLog entity2 = new ErrorLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ErrorLogService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Delete(Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            public virtual method that Deletes a ErrorLog object into the datasource using a transaction.
            </summary>
            <param name="entity">ErrorLog object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ErrorLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ErrorLog entity = ErrorLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ErrorLogService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ErrorLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ErrorLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ErrorLog.
             <code><![CDATA[
             TList<ErrorLog> list = new TList<ErrorLog>();
             ErrorLog entity = new ErrorLog();
             entity.StringProperty = "foo";
             ErrorLog entity2 = new ErrorLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ErrorLogService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Delete(Nettiers.AdventureWorks.Entities.ErrorLogKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _errorLogId
            </summary>
            <param name="_errorLogId">ErrorLog pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoadByErrorLogId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_errorLogId">Primary key for ErrorLog records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ErrorLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ErrorLog Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ErrorLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ErrorLog,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ErrorLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ErrorLog Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ErrorLog,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ErrorLog Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ErrorLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ErrorLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ErrorLog)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ErrorLog"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ErrorLog Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ErrorLog,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ErrorLog object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ErrorLog Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ErrorLog</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ErrorLog} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ErrorLog},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ErrorLog Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ErrorLogServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CultureService">
            <summary>
            An component type implementation of the 'Culture' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CultureServiceBase">
            <summary>
             An object representation of the 'Culture' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Culture.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.CreateCulture(System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> instance.
            </summary>
            <param name="_cultureId">Primary key for Culture records.</param>
            <param name="_name">Culture description.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Get(Nettiers.AdventureWorks.Entities.CultureKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Culture_Name index.
            </summary>
            <param name="_name">Culture description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Culture_Name index.
            </summary>
            <param name="_name">Culture description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByCultureId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Culture_CultureID index.
            </summary>
            <param name="_cultureId">Primary key for Culture records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByCultureId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Culture_CultureID index.
            </summary>
            <param name="_cultureId">Primary key for Culture records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Culture} of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Culture</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Insert(Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            public virtual method that Inserts a Culture object into the datasource using a transaction.
            </summary>
            <param name="entity">Culture object to Insert.</param>
            <remarks>After Inserting into the datasource, the Culture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Culture entity = new Culture();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CultureService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Culture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Culture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Culture.
             <code><![CDATA[
             TList<Culture> list = new TList<Culture>();
             Culture entity = new Culture();
             entity.StringProperty = "foo";
             Culture entity2 = new Culture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CultureService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Update(Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            public virtual method that Updates a Culture object into the datasource using a transaction.
            </summary>
            <param name="entity">Culture object to Update.</param>
            <remarks>After Updateing into the datasource, the Culture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Culture entity = CultureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CultureService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Culture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Culture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Culture.
             <code><![CDATA[
             TList<Culture> list = new TList<Culture>();
             Culture entity = new Culture();
             entity.StringProperty = "foo";
             Culture entity2 = new Culture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CultureService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Save(Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            public virtual method that Saves a Culture object into the datasource using a transaction.
            </summary>
            <param name="entity">Culture object to Save.</param>
            <remarks>After Saveing into the datasource, the Culture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Culture entity = CultureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CultureService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Culture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Culture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Culture.
             <code><![CDATA[
             TList<Culture> list = new TList<Culture>();
             Culture entity = new Culture();
             entity.StringProperty = "foo";
             Culture entity2 = new Culture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CultureService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Delete(Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            public virtual method that Deletes a Culture object into the datasource using a transaction.
            </summary>
            <param name="entity">Culture object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Culture object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Culture entity = CultureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CultureService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Culture</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Culture</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Culture.
             <code><![CDATA[
             TList<Culture> list = new TList<Culture>();
             Culture entity = new Culture();
             entity.StringProperty = "foo";
             Culture entity2 = new Culture();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CultureService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Delete(Nettiers.AdventureWorks.Entities.CultureKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _cultureId
            </summary>
            <param name="_cultureId">Culture pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByProductDescriptionIdFromProductModelProductDescriptionCulture(System.Int32)">
            <summary>
            	Gets Culture objects from the datasource by ProductDescriptionID in the
            	ProductModelProductDescriptionCulture table. Table Culture is related to table ProductDescription
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <returns>Returns a typed collection of Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByProductDescriptionIdFromProductModelProductDescriptionCulture(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Culture objects from the datasource by ProductDescriptionID in the
            	ProductModelProductDescriptionCulture table. Table Culture is related to table ProductDescription
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByProductModelIdFromProductModelProductDescriptionCulture(System.Int32)">
            <summary>
            	Gets Culture objects from the datasource by ProductModelID in the
            	ProductModelProductDescriptionCulture table. Table Culture is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <returns>Returns a typed collection of Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.GetByProductModelIdFromProductModelProductDescriptionCulture(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Culture objects from the datasource by ProductModelID in the
            	ProductModelProductDescriptionCulture table. Table Culture is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Culture objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Culture description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Culture Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoadByCultureId(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_cultureId">Primary key for Culture records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Culture Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Culture Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Culture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Culture,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Culture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Culture Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Culture,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Culture Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Culture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Culture)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Culture)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Culture"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Culture Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Culture,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Culture object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Culture Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Culture</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Culture} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Culture},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Culture Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CultureServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CultureService.#ctor">
            <summary>
            Initializes a new instance of the CultureService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.AddressTypeServiceBase">
            <summary>
             An object representation of the 'AddressType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AddressType.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.CreateAddressType(System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> instance.
            </summary>
            <param name="_name">Address type description. For example, Billing, Home, or Shipping.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Get(Nettiers.AdventureWorks.Entities.AddressTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_AddressType_Name index.
            </summary>
            <param name="_name">Address type description. For example, Billing, Home, or Shipping.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_AddressType_Name index.
            </summary>
            <param name="_name">Address type description. For example, Billing, Home, or Shipping.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_AddressType_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_AddressType_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetByAddressTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_AddressType_AddressTypeID index.
            </summary>
            <param name="_addressTypeId">Primary key for AddressType records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetByAddressTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_AddressType_AddressTypeID index.
            </summary>
            <param name="_addressTypeId">Primary key for AddressType records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AddressType} of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AddressType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Insert(Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            public virtual method that Inserts a AddressType object into the datasource using a transaction.
            </summary>
            <param name="entity">AddressType object to Insert.</param>
            <remarks>After Inserting into the datasource, the AddressType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AddressType entity = new AddressType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AddressTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddressType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AddressType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AddressType.
             <code><![CDATA[
             TList<AddressType> list = new TList<AddressType>();
             AddressType entity = new AddressType();
             entity.StringProperty = "foo";
             AddressType entity2 = new AddressType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Update(Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            public virtual method that Updates a AddressType object into the datasource using a transaction.
            </summary>
            <param name="entity">AddressType object to Update.</param>
            <remarks>After Updateing into the datasource, the AddressType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AddressType entity = AddressTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AddressTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddressType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AddressType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AddressType.
             <code><![CDATA[
             TList<AddressType> list = new TList<AddressType>();
             AddressType entity = new AddressType();
             entity.StringProperty = "foo";
             AddressType entity2 = new AddressType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Save(Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            public virtual method that Saves a AddressType object into the datasource using a transaction.
            </summary>
            <param name="entity">AddressType object to Save.</param>
            <remarks>After Saveing into the datasource, the AddressType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AddressType entity = AddressTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AddressTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddressType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AddressType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AddressType.
             <code><![CDATA[
             TList<AddressType> list = new TList<AddressType>();
             AddressType entity = new AddressType();
             entity.StringProperty = "foo";
             AddressType entity2 = new AddressType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Delete(Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            public virtual method that Deletes a AddressType object into the datasource using a transaction.
            </summary>
            <param name="entity">AddressType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AddressType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AddressType entity = AddressTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AddressTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddressType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AddressType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AddressType.
             <code><![CDATA[
             TList<AddressType> list = new TList<AddressType>();
             AddressType entity = new AddressType();
             entity.StringProperty = "foo";
             AddressType entity2 = new AddressType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Delete(Nettiers.AdventureWorks.Entities.AddressTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _addressTypeId
            </summary>
            <param name="_addressTypeId">AddressType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Address type description. For example, Billing, Home, or Shipping.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddressType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddressType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoadByAddressTypeId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_addressTypeId">Primary key for AddressType records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddressType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AddressType Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AddressType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AddressType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AddressType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AddressType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AddressType,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AddressType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AddressType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AddressType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.AddressType)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.AddressType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AddressType Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.AddressType,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AddressType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AddressType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AddressType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AddressType} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AddressType},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AddressType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.AddressTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VJobCandidateService">
            <summary>
             An component type implementation of the 'vJobCandidate' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase">
            <summary>
             An object representation of the 'vJobCandidate' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VJobCandidate.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidate"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidate"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.CreateVJobCandidate(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidate"/> instance.
            </summary>
            <param name="_jobCandidateId"></param>
            <param name="_employeeId"></param>
            <param name="_safeNameNamePrefix"></param>
            <param name="_safeNameNameFirst"></param>
            <param name="_safeNameNameMiddle"></param>
            <param name="_safeNameNameLast"></param>
            <param name="_safeNameNameSuffix"></param>
            <param name="_skills"></param>
            <param name="_safeNameAddrType"></param>
            <param name="_safeNameAddrLocCountryRegion"></param>
            <param name="_safeNameAddrLocState"></param>
            <param name="_safeNameAddrLocCity"></param>
            <param name="_safeNameAddrPostalCode"></param>
            <param name="_email"></param>
            <param name="_webSite"></param>
            <param name="_modifiedDate"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VJobCandidate} of <c>VJobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidate"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidate"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VJobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VJobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VJobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateService.#ctor">
            <summary>
            Initializes a new instance of the VJobCandidateService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase">
            <summary>
             An object representation of the 'vIndividualDemographics' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VIndividualDemographics.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualDemographics"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualDemographics"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.CreateVIndividualDemographics(System.Int32,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualDemographics"/> instance.
            </summary>
            <param name="_customerId"></param>
            <param name="_totalPurchaseYtd"></param>
            <param name="_dateFirstPurchase"></param>
            <param name="_birthDate"></param>
            <param name="_maritalStatus"></param>
            <param name="_yearlyIncome"></param>
            <param name="_gender"></param>
            <param name="_totalChildren"></param>
            <param name="_numberChildrenAtHome"></param>
            <param name="_education"></param>
            <param name="_occupation"></param>
            <param name="_homeOwnerFlag"></param>
            <param name="_numberCarsOwned"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VIndividualDemographics} of <c>VIndividualDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualDemographics"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualDemographics"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VIndividualDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VIndividualDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VIndividualDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VIndividualDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VIndividualDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VIndividualDemographics</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TimestampPkService">
            <summary>
            An component type implementation of the 'TimestampPK' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TimestampPkServiceBase">
            <summary>
             An object representation of the 'TimestampPK' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TimestampPk.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.CreateTimestampPk(System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> instance.
            </summary>
            <param name="_someText"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Get(Nettiers.AdventureWorks.Entities.TimestampPkKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetByTimestampPk(System.Byte[])">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TimestampPK index.
            </summary>
            <param name="_timestampPk"></param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetByTimestampPk(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TimestampPK index.
            </summary>
            <param name="_timestampPk"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TimestampPk} of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TimestampPk</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Insert(Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            public virtual method that Inserts a TimestampPk object into the datasource using a transaction.
            </summary>
            <param name="entity">TimestampPk object to Insert.</param>
            <remarks>After Inserting into the datasource, the TimestampPk object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TimestampPk entity = new TimestampPk();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TimestampPkService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TimestampPk</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TimestampPk</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TimestampPk.
             <code><![CDATA[
             TList<TimestampPk> list = new TList<TimestampPk>();
             TimestampPk entity = new TimestampPk();
             entity.StringProperty = "foo";
             TimestampPk entity2 = new TimestampPk();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TimestampPkService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Update(Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            public virtual method that Updates a TimestampPk object into the datasource using a transaction.
            </summary>
            <param name="entity">TimestampPk object to Update.</param>
            <remarks>After Updateing into the datasource, the TimestampPk object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TimestampPk entity = TimestampPkService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TimestampPkService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TimestampPk</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TimestampPk</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TimestampPk.
             <code><![CDATA[
             TList<TimestampPk> list = new TList<TimestampPk>();
             TimestampPk entity = new TimestampPk();
             entity.StringProperty = "foo";
             TimestampPk entity2 = new TimestampPk();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TimestampPkService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Save(Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            public virtual method that Saves a TimestampPk object into the datasource using a transaction.
            </summary>
            <param name="entity">TimestampPk object to Save.</param>
            <remarks>After Saveing into the datasource, the TimestampPk object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TimestampPk entity = TimestampPkService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TimestampPkService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TimestampPk</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TimestampPk</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TimestampPk.
             <code><![CDATA[
             TList<TimestampPk> list = new TList<TimestampPk>();
             TimestampPk entity = new TimestampPk();
             entity.StringProperty = "foo";
             TimestampPk entity2 = new TimestampPk();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TimestampPkService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Delete(Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            public virtual method that Deletes a TimestampPk object into the datasource using a transaction.
            </summary>
            <param name="entity">TimestampPk object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TimestampPk object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TimestampPk entity = TimestampPkService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TimestampPkService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TimestampPk</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TimestampPk</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TimestampPk.
             <code><![CDATA[
             TList<TimestampPk> list = new TList<TimestampPk>();
             TimestampPk entity = new TimestampPk();
             entity.StringProperty = "foo";
             TimestampPk entity2 = new TimestampPk();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TimestampPkService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Delete(Nettiers.AdventureWorks.Entities.TimestampPkKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.Delete(System.Byte[])">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Byte[] _timestampPk
            </summary>
            <param name="_timestampPk">TimestampPk pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoadByTimestampPk(System.Byte[],System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_timestampPk"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TimestampPk Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TimestampPk Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TimestampPk)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TimestampPk,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TimestampPk)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TimestampPk Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TimestampPk,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TimestampPk Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TimestampPk)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TimestampPk)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TimestampPk)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.TimestampPk"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TimestampPk Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TimestampPk,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TimestampPk object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TimestampPk Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TimestampPk</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TimestampPk} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TimestampPk},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TimestampPk Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.TimestampPkServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TimestampPkService.#ctor">
            <summary>
            Initializes a new instance of the TimestampPkService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.StoreServiceBase">
            <summary>
             An object representation of the 'Store' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Store.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.CreateStore(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> instance.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="_name">Name of the store.</param>
            <param name="_salesPersonId">ID of the sales person assigned to the customer. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="_demographics">Demographic informationg about the store such as the number of employees, annual sales and store type.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Get(Nettiers.AdventureWorks.Entities.StoreKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Store_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Store_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetBySalesPersonId(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Store_SalesPersonID index.
            </summary>
            <param name="_salesPersonId">ID of the sales person assigned to the customer. Foreign key to SalesPerson.SalesPersonID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetBySalesPersonId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Store_SalesPersonID index.
            </summary>
            <param name="_salesPersonId">ID of the sales person assigned to the customer. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByCustomerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Store_CustomerID index.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Store_CustomerID index.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByDemographics(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_Store_Demographics index.
            </summary>
            <param name="_demographics">Demographic informationg about the store such as the number of employees, annual sales and store type.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByDemographics(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_Store_Demographics index.
            </summary>
            <param name="_demographics">Demographic informationg about the store such as the number of employees, annual sales and store type.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Store} of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Insert(Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            public virtual method that Inserts a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Insert.</param>
            <remarks>After Inserting into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Store entity = new Store();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StoreService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Update(Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            public virtual method that Updates a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Update.</param>
            <remarks>After Updateing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StoreService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Save(Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            public virtual method that Saves a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Save.</param>
            <remarks>After Saveing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StoreService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Delete(Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            public virtual method that Deletes a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StoreService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Delete(Nettiers.AdventureWorks.Entities.StoreKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _customerId
            </summary>
            <param name="_customerId">Store pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByContactIdFromStoreContact(System.Int32)">
            <summary>
            	Gets Store objects from the datasource by ContactID in the
            	StoreContact table. Table Store is related to table Contact
            	through the (M:N) relationship defined in the StoreContact table.
            </summary>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns a typed collection of Store objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.GetByContactIdFromStoreContact(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Store objects from the datasource by ContactID in the
            	StoreContact table. Table Store is related to table Contact
            	through the (M:N) relationship defined in the StoreContact table.
            </summary>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Store objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoadBySalesPersonId(System.Nullable{System.Int32},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesPersonId">ID of the sales person assigned to the customer. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoadByCustomerId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoadByDemographics(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_demographics">Demographic informationg about the store such as the number of employees, annual sales and store type.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Store Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Store,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Store Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Store,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Store"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Store)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Store"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Store Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Store,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Store object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Store Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Store</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Store} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Store},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.StoreServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase">
            <summary>
             An object representation of the 'SpecialOfferProduct' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SpecialOfferProduct.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.CreateSpecialOfferProduct(System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> instance.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetBySpecialOfferId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID key.
            	FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID Description: Foreign key constraint referencing SpecialOffer.SpecialOfferID.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <returns>Returns a generic collection of SpecialOfferProduct objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetBySpecialOfferId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID key.
            	FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID Description: Foreign key constraint referencing SpecialOffer.SpecialOfferID.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Get(Nettiers.AdventureWorks.Entities.SpecialOfferProductKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SpecialOfferProduct_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SpecialOfferProduct_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SpecialOfferProduct_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SpecialOfferProduct_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetBySpecialOfferIdProductId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SpecialOfferProduct_SpecialOfferID_ProductID index.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetBySpecialOfferIdProductId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SpecialOfferProduct_SpecialOfferID_ProductID index.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SpecialOfferProduct} of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SpecialOfferProduct</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Insert(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            public virtual method that Inserts a SpecialOfferProduct object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOfferProduct object to Insert.</param>
            <remarks>After Inserting into the datasource, the SpecialOfferProduct object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SpecialOfferProduct entity = new SpecialOfferProduct();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SpecialOfferProductService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOfferProduct</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SpecialOfferProduct</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SpecialOfferProduct.
             <code><![CDATA[
             TList<SpecialOfferProduct> list = new TList<SpecialOfferProduct>();
             SpecialOfferProduct entity = new SpecialOfferProduct();
             entity.StringProperty = "foo";
             SpecialOfferProduct entity2 = new SpecialOfferProduct();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferProductService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Update(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            public virtual method that Updates a SpecialOfferProduct object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOfferProduct object to Update.</param>
            <remarks>After Updateing into the datasource, the SpecialOfferProduct object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SpecialOfferProduct entity = SpecialOfferProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SpecialOfferProductService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOfferProduct</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SpecialOfferProduct</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SpecialOfferProduct.
             <code><![CDATA[
             TList<SpecialOfferProduct> list = new TList<SpecialOfferProduct>();
             SpecialOfferProduct entity = new SpecialOfferProduct();
             entity.StringProperty = "foo";
             SpecialOfferProduct entity2 = new SpecialOfferProduct();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferProductService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Save(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            public virtual method that Saves a SpecialOfferProduct object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOfferProduct object to Save.</param>
            <remarks>After Saveing into the datasource, the SpecialOfferProduct object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SpecialOfferProduct entity = SpecialOfferProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SpecialOfferProductService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOfferProduct</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SpecialOfferProduct</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SpecialOfferProduct.
             <code><![CDATA[
             TList<SpecialOfferProduct> list = new TList<SpecialOfferProduct>();
             SpecialOfferProduct entity = new SpecialOfferProduct();
             entity.StringProperty = "foo";
             SpecialOfferProduct entity2 = new SpecialOfferProduct();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferProductService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Delete(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            public virtual method that Deletes a SpecialOfferProduct object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOfferProduct object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SpecialOfferProduct object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SpecialOfferProduct entity = SpecialOfferProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SpecialOfferProductService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOfferProduct</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SpecialOfferProduct</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SpecialOfferProduct.
             <code><![CDATA[
             TList<SpecialOfferProduct> list = new TList<SpecialOfferProduct>();
             SpecialOfferProduct entity = new SpecialOfferProduct();
             entity.StringProperty = "foo";
             SpecialOfferProduct entity2 = new SpecialOfferProduct();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferProductService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Delete(Nettiers.AdventureWorks.Entities.SpecialOfferProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _specialOfferId, System.Int32 _productId
            </summary>
            <param name="_specialOfferId">SpecialOfferProduct pk id.</param>
            <param name="_productId">SpecialOfferProduct pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SpecialOfferProduct Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SpecialOfferProduct Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoadBySpecialOfferIdProductId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SpecialOfferProduct Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SpecialOfferProduct Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOfferProduct,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SpecialOfferProduct Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOfferProduct,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SpecialOfferProduct Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SpecialOfferProduct)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOfferProduct"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SpecialOfferProduct Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SpecialOfferProduct,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SpecialOfferProduct object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SpecialOfferProduct Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SpecialOfferProduct</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SpecialOfferProduct} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOfferProduct},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SpecialOfferProduct Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SpecialOfferProductServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ShiftService">
            <summary>
            An component type implementation of the 'Shift' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ShiftServiceBase">
            <summary>
             An object representation of the 'Shift' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Shift.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.CreateShift(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> instance.
            </summary>
            <param name="_name">Shift description.</param>
            <param name="_startTime">Shift start time.</param>
            <param name="_endTime">Shift end time.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Get(Nettiers.AdventureWorks.Entities.ShiftKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Shift_Name index.
            </summary>
            <param name="_name">Shift description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Shift_Name index.
            </summary>
            <param name="_name">Shift description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetByStartTimeEndTime(System.DateTime,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Shift_StartTime_EndTime index.
            </summary>
            <param name="_startTime">Shift start time.</param>
            <param name="_endTime">Shift end time.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetByStartTimeEndTime(System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Shift_StartTime_EndTime index.
            </summary>
            <param name="_startTime">Shift start time.</param>
            <param name="_endTime">Shift end time.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetByShiftId(System.Byte)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Shift_ShiftID index.
            </summary>
            <param name="_shiftId">Primary key for Shift records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetByShiftId(System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Shift_ShiftID index.
            </summary>
            <param name="_shiftId">Primary key for Shift records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Shift} of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Shift</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Insert(Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            public virtual method that Inserts a Shift object into the datasource using a transaction.
            </summary>
            <param name="entity">Shift object to Insert.</param>
            <remarks>After Inserting into the datasource, the Shift object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Shift entity = new Shift();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShiftService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shift</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Shift</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Shift.
             <code><![CDATA[
             TList<Shift> list = new TList<Shift>();
             Shift entity = new Shift();
             entity.StringProperty = "foo";
             Shift entity2 = new Shift();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShiftService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Update(Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            public virtual method that Updates a Shift object into the datasource using a transaction.
            </summary>
            <param name="entity">Shift object to Update.</param>
            <remarks>After Updateing into the datasource, the Shift object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Shift entity = ShiftService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShiftService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shift</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Shift</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Shift.
             <code><![CDATA[
             TList<Shift> list = new TList<Shift>();
             Shift entity = new Shift();
             entity.StringProperty = "foo";
             Shift entity2 = new Shift();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShiftService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Save(Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            public virtual method that Saves a Shift object into the datasource using a transaction.
            </summary>
            <param name="entity">Shift object to Save.</param>
            <remarks>After Saveing into the datasource, the Shift object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Shift entity = ShiftService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShiftService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shift</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Shift</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Shift.
             <code><![CDATA[
             TList<Shift> list = new TList<Shift>();
             Shift entity = new Shift();
             entity.StringProperty = "foo";
             Shift entity2 = new Shift();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShiftService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Delete(Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            public virtual method that Deletes a Shift object into the datasource using a transaction.
            </summary>
            <param name="entity">Shift object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Shift object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Shift entity = ShiftService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShiftService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Shift</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Shift</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Shift.
             <code><![CDATA[
             TList<Shift> list = new TList<Shift>();
             Shift entity = new Shift();
             entity.StringProperty = "foo";
             Shift entity2 = new Shift();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShiftService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Delete(Nettiers.AdventureWorks.Entities.ShiftKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.Delete(System.Byte)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Byte _shiftId
            </summary>
            <param name="_shiftId">Shift pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Shift description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shift Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoadByStartTimeEndTime(System.DateTime,System.DateTime,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_startTime">Shift start time.</param>
            <param name="_endTime">Shift end time.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shift Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoadByShiftId(System.Byte,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_shiftId">Primary key for Shift records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shift Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Shift Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Shift)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Shift,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Shift)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Shift Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Shift,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Shift Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Shift)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Shift)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Shift)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Shift"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Shift Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Shift,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Shift object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Shift Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Shift</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Shift} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Shift},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Shift Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ShiftServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShiftService.#ctor">
            <summary>
            Initializes a new instance of the ShiftService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase">
            <summary>
             An object representation of the 'SalesPersonQuotaHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesPersonQuotaHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.CreateSalesPersonQuotaHistory(System.Int32,System.DateTime,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> instance.
            </summary>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="_quotaDate">Sales quota date.</param>
            <param name="_salesQuota">Sales quota amount.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetBySalesPersonId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID key.
            	FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID Description: Foreign key constraint referencing SalesPerson.SalesPersonID.
            </summary>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <returns>Returns a generic collection of SalesPersonQuotaHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetBySalesPersonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID key.
            	FK_SalesPersonQuotaHistory_SalesPerson_SalesPersonID Description: Foreign key constraint referencing SalesPerson.SalesPersonID.
            </summary>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesPersonQuotaHistory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesPersonQuotaHistory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetBySalesPersonIdQuotaDate(System.Int32,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesPersonQuotaHistory_SalesPersonID_QuotaDate index.
            </summary>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="_quotaDate">Sales quota date.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetBySalesPersonIdQuotaDate(System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesPersonQuotaHistory_SalesPersonID_QuotaDate index.
            </summary>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="_quotaDate">Sales quota date.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesPersonQuotaHistory} of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesPersonQuotaHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            public virtual method that Inserts a SalesPersonQuotaHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPersonQuotaHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesPersonQuotaHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesPersonQuotaHistory entity = new SalesPersonQuotaHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesPersonQuotaHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPersonQuotaHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesPersonQuotaHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesPersonQuotaHistory.
             <code><![CDATA[
             TList<SalesPersonQuotaHistory> list = new TList<SalesPersonQuotaHistory>();
             SalesPersonQuotaHistory entity = new SalesPersonQuotaHistory();
             entity.StringProperty = "foo";
             SalesPersonQuotaHistory entity2 = new SalesPersonQuotaHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonQuotaHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            public virtual method that Updates a SalesPersonQuotaHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPersonQuotaHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesPersonQuotaHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesPersonQuotaHistory entity = SalesPersonQuotaHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesPersonQuotaHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPersonQuotaHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesPersonQuotaHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesPersonQuotaHistory.
             <code><![CDATA[
             TList<SalesPersonQuotaHistory> list = new TList<SalesPersonQuotaHistory>();
             SalesPersonQuotaHistory entity = new SalesPersonQuotaHistory();
             entity.StringProperty = "foo";
             SalesPersonQuotaHistory entity2 = new SalesPersonQuotaHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonQuotaHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            public virtual method that Saves a SalesPersonQuotaHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPersonQuotaHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesPersonQuotaHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesPersonQuotaHistory entity = SalesPersonQuotaHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesPersonQuotaHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPersonQuotaHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesPersonQuotaHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesPersonQuotaHistory.
             <code><![CDATA[
             TList<SalesPersonQuotaHistory> list = new TList<SalesPersonQuotaHistory>();
             SalesPersonQuotaHistory entity = new SalesPersonQuotaHistory();
             entity.StringProperty = "foo";
             SalesPersonQuotaHistory entity2 = new SalesPersonQuotaHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonQuotaHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            public virtual method that Deletes a SalesPersonQuotaHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPersonQuotaHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesPersonQuotaHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesPersonQuotaHistory entity = SalesPersonQuotaHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesPersonQuotaHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPersonQuotaHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesPersonQuotaHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesPersonQuotaHistory.
             <code><![CDATA[
             TList<SalesPersonQuotaHistory> list = new TList<SalesPersonQuotaHistory>();
             SalesPersonQuotaHistory entity = new SalesPersonQuotaHistory();
             entity.StringProperty = "foo";
             SalesPersonQuotaHistory entity2 = new SalesPersonQuotaHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonQuotaHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.Delete(System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesPersonId, System.DateTime _quotaDate
            </summary>
            <param name="_salesPersonId">SalesPersonQuotaHistory pk id.</param>
            <param name="_quotaDate">SalesPersonQuotaHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesPersonQuotaHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoadBySalesPersonIdQuotaDate(System.Int32,System.DateTime,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesPersonId">Sales person identification number. Foreign key to SalesPerson.SalesPersonID.</param>
            <param name="_quotaDate">Sales quota date.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesPersonQuotaHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesPersonQuotaHistory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesPersonQuotaHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesPersonQuotaHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesPersonQuotaHistory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesPersonQuotaHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesPersonQuotaHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesPersonQuotaHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesPersonQuotaHistory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPersonQuotaHistory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesPersonQuotaHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesPersonService">
            <summary>
            An component type implementation of the 'SalesPerson' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesPersonServiceBase">
            <summary>
             An object representation of the 'SalesPerson' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesPerson.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.CreateSalesPerson(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> instance.
            </summary>
            <param name="_salesPersonId">Primary key for SalesPerson records.</param>
            <param name="_territoryId">Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="_salesQuota">Projected yearly sales.</param>
            <param name="_bonus">Bonus due if quota is met.</param>
            <param name="_commissionPct">Commision percent received per sale.</param>
            <param name="_salesYtd">Sales total year to date.</param>
            <param name="_salesLastYear">Sales total of previous year.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetByTerritoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesPerson_SalesTerritory_TerritoryID key.
            	FK_SalesPerson_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <returns>Returns a generic collection of SalesPerson objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetByTerritoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesPerson_SalesTerritory_TerritoryID key.
            	FK_SalesPerson_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesPersonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesPerson_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesPerson_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetBySalesPersonId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesPerson_SalesPersonID index.
            </summary>
            <param name="_salesPersonId">Primary key for SalesPerson records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetBySalesPersonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesPerson_SalesPersonID index.
            </summary>
            <param name="_salesPersonId">Primary key for SalesPerson records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesPerson} of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            public virtual method that Inserts a SalesPerson object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPerson object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesPerson object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesPerson entity = new SalesPerson();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesPersonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPerson</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesPerson</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesPerson.
             <code><![CDATA[
             TList<SalesPerson> list = new TList<SalesPerson>();
             SalesPerson entity = new SalesPerson();
             entity.StringProperty = "foo";
             SalesPerson entity2 = new SalesPerson();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            public virtual method that Updates a SalesPerson object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPerson object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesPerson object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesPerson entity = SalesPersonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesPersonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPerson</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesPerson</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesPerson.
             <code><![CDATA[
             TList<SalesPerson> list = new TList<SalesPerson>();
             SalesPerson entity = new SalesPerson();
             entity.StringProperty = "foo";
             SalesPerson entity2 = new SalesPerson();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            public virtual method that Saves a SalesPerson object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPerson object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesPerson object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesPerson entity = SalesPersonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesPersonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPerson</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesPerson</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesPerson.
             <code><![CDATA[
             TList<SalesPerson> list = new TList<SalesPerson>();
             SalesPerson entity = new SalesPerson();
             entity.StringProperty = "foo";
             SalesPerson entity2 = new SalesPerson();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            public virtual method that Deletes a SalesPerson object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesPerson object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesPerson object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesPerson entity = SalesPersonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesPersonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesPerson</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesPerson</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesPerson.
             <code><![CDATA[
             TList<SalesPerson> list = new TList<SalesPerson>();
             SalesPerson entity = new SalesPerson();
             entity.StringProperty = "foo";
             SalesPerson entity2 = new SalesPerson();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesPersonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesPersonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesPersonId
            </summary>
            <param name="_salesPersonId">SalesPerson pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesPerson Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoadBySalesPersonId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesPersonId">Primary key for SalesPerson records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesPerson Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesPerson Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPerson)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPerson,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPerson)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesPerson Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPerson,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesPerson Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPerson)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesPerson)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesPerson)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesPerson"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesPerson Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesPerson,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesPerson object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesPerson Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesPerson</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesPerson} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesPerson},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesPerson Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesPersonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonService.#ctor">
            <summary>
            Initializes a new instance of the SalesPersonService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase">
            <summary>
             An object representation of the 'SalesOrderHeaderSalesReason' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesOrderHeaderSalesReason.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.CreateSalesOrderHeaderSalesReason(System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> instance.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetBySalesOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID key.
            	FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID Description: Foreign key constraint referencing SalesOrderHeader.SalesOrderID.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <returns>Returns a generic collection of SalesOrderHeaderSalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetBySalesOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID key.
            	FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID Description: Foreign key constraint referencing SalesOrderHeader.SalesOrderID.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetBySalesReasonId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID key.
            	FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID Description: Foreign key constraint referencing SalesReason.SalesReasonID.
            </summary>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <returns>Returns a generic collection of SalesOrderHeaderSalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetBySalesReasonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID key.
            	FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID Description: Foreign key constraint referencing SalesReason.SalesReasonID.
            </summary>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReasonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetBySalesOrderIdSalesReasonId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID index.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetBySalesOrderIdSalesReasonId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID index.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesOrderHeaderSalesReason} of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeaderSalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            public virtual method that Inserts a SalesOrderHeaderSalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeaderSalesReason object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesOrderHeaderSalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesOrderHeaderSalesReason entity = new SalesOrderHeaderSalesReason();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesOrderHeaderSalesReasonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeaderSalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesOrderHeaderSalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesOrderHeaderSalesReason.
             <code><![CDATA[
             TList<SalesOrderHeaderSalesReason> list = new TList<SalesOrderHeaderSalesReason>();
             SalesOrderHeaderSalesReason entity = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "foo";
             SalesOrderHeaderSalesReason entity2 = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderSalesReasonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            public virtual method that Updates a SalesOrderHeaderSalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeaderSalesReason object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesOrderHeaderSalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesOrderHeaderSalesReason entity = SalesOrderHeaderSalesReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesOrderHeaderSalesReasonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeaderSalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesOrderHeaderSalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesOrderHeaderSalesReason.
             <code><![CDATA[
             TList<SalesOrderHeaderSalesReason> list = new TList<SalesOrderHeaderSalesReason>();
             SalesOrderHeaderSalesReason entity = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "foo";
             SalesOrderHeaderSalesReason entity2 = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderSalesReasonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            public virtual method that Saves a SalesOrderHeaderSalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeaderSalesReason object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesOrderHeaderSalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesOrderHeaderSalesReason entity = SalesOrderHeaderSalesReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesOrderHeaderSalesReasonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeaderSalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesOrderHeaderSalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesOrderHeaderSalesReason.
             <code><![CDATA[
             TList<SalesOrderHeaderSalesReason> list = new TList<SalesOrderHeaderSalesReason>();
             SalesOrderHeaderSalesReason entity = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "foo";
             SalesOrderHeaderSalesReason entity2 = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderSalesReasonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            public virtual method that Deletes a SalesOrderHeaderSalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeaderSalesReason object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesOrderHeaderSalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesOrderHeaderSalesReason entity = SalesOrderHeaderSalesReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesOrderHeaderSalesReasonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeaderSalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesOrderHeaderSalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesOrderHeaderSalesReason.
             <code><![CDATA[
             TList<SalesOrderHeaderSalesReason> list = new TList<SalesOrderHeaderSalesReason>();
             SalesOrderHeaderSalesReason entity = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "foo";
             SalesOrderHeaderSalesReason entity2 = new SalesOrderHeaderSalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderSalesReasonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReasonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesOrderId, System.Int32 _salesReasonId
            </summary>
            <param name="_salesOrderId">SalesOrderHeaderSalesReason pk id.</param>
            <param name="_salesReasonId">SalesOrderHeaderSalesReason pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoadBySalesOrderIdSalesReasonId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeaderSalesReason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesOrderHeaderSalesReason Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesOrderHeaderSalesReason Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeaderSalesReason Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesOrderHeaderSalesReason Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesOrderHeaderSalesReason object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesOrderHeaderSalesReason Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesOrderHeaderSalesReason</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesOrderHeaderSalesReason} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeaderSalesReason},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesOrderHeaderSalesReason Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase">
            <summary>
             An object representation of the 'PurchaseOrderDetail' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PurchaseOrderDetail.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.CreatePurchaseOrderDetail(System.Int32,System.DateTime,System.Int16,System.Int32,System.Decimal,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> instance.
            </summary>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <param name="_dueDate">Date the product is expected to be received.</param>
            <param name="_orderQty">Quantity ordered.</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_unitPrice">Vendor's selling price of a single product.</param>
            <param name="_receivedQty">Quantity actually received from the vendor.</param>
            <param name="_rejectedQty">Quantity rejected during inspection.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetByPurchaseOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID key.
            	FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID Description: Foreign key constraint referencing PurchaseOrderHeader.PurchaseOrderID.
            </summary>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <returns>Returns a generic collection of PurchaseOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetByPurchaseOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID key.
            	FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID Description: Foreign key constraint referencing PurchaseOrderHeader.PurchaseOrderID.
            </summary>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Get(Nettiers.AdventureWorks.Entities.PurchaseOrderDetailKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_PurchaseOrderDetail_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_PurchaseOrderDetail_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetByPurchaseOrderIdPurchaseOrderDetailId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID index.
            </summary>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <param name="_purchaseOrderDetailId">Primary key. One line number per purchased product.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetByPurchaseOrderIdPurchaseOrderDetailId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID index.
            </summary>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <param name="_purchaseOrderDetailId">Primary key. One line number per purchased product.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PurchaseOrderDetail} of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Insert(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            public virtual method that Inserts a PurchaseOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderDetail object to Insert.</param>
            <remarks>After Inserting into the datasource, the PurchaseOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PurchaseOrderDetail entity = new PurchaseOrderDetail();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PurchaseOrderDetailService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PurchaseOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PurchaseOrderDetail.
             <code><![CDATA[
             TList<PurchaseOrderDetail> list = new TList<PurchaseOrderDetail>();
             PurchaseOrderDetail entity = new PurchaseOrderDetail();
             entity.StringProperty = "foo";
             PurchaseOrderDetail entity2 = new PurchaseOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderDetailService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Update(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            public virtual method that Updates a PurchaseOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderDetail object to Update.</param>
            <remarks>After Updateing into the datasource, the PurchaseOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PurchaseOrderDetail entity = PurchaseOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PurchaseOrderDetailService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PurchaseOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PurchaseOrderDetail.
             <code><![CDATA[
             TList<PurchaseOrderDetail> list = new TList<PurchaseOrderDetail>();
             PurchaseOrderDetail entity = new PurchaseOrderDetail();
             entity.StringProperty = "foo";
             PurchaseOrderDetail entity2 = new PurchaseOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderDetailService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Save(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            public virtual method that Saves a PurchaseOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderDetail object to Save.</param>
            <remarks>After Saveing into the datasource, the PurchaseOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PurchaseOrderDetail entity = PurchaseOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PurchaseOrderDetailService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PurchaseOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PurchaseOrderDetail.
             <code><![CDATA[
             TList<PurchaseOrderDetail> list = new TList<PurchaseOrderDetail>();
             PurchaseOrderDetail entity = new PurchaseOrderDetail();
             entity.StringProperty = "foo";
             PurchaseOrderDetail entity2 = new PurchaseOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderDetailService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Delete(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            public virtual method that Deletes a PurchaseOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderDetail object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PurchaseOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PurchaseOrderDetail entity = PurchaseOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PurchaseOrderDetailService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PurchaseOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PurchaseOrderDetail.
             <code><![CDATA[
             TList<PurchaseOrderDetail> list = new TList<PurchaseOrderDetail>();
             PurchaseOrderDetail entity = new PurchaseOrderDetail();
             entity.StringProperty = "foo";
             PurchaseOrderDetail entity2 = new PurchaseOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderDetailService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Delete(Nettiers.AdventureWorks.Entities.PurchaseOrderDetailKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _purchaseOrderId, System.Int32 _purchaseOrderDetailId
            </summary>
            <param name="_purchaseOrderId">PurchaseOrderDetail pk id.</param>
            <param name="_purchaseOrderDetailId">PurchaseOrderDetail pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PurchaseOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoadByPurchaseOrderIdPurchaseOrderDetailId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_purchaseOrderId">Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.</param>
            <param name="_purchaseOrderDetailId">Primary key. One line number per purchased product.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PurchaseOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PurchaseOrderDetail Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PurchaseOrderDetail Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PurchaseOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderDetail"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PurchaseOrderDetail Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.PurchaseOrderDetail,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PurchaseOrderDetail object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PurchaseOrderDetail Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PurchaseOrderDetail</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PurchaseOrderDetail} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderDetail},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PurchaseOrderDetail Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.PurchaseOrderDetailServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductReviewService">
            <summary>
            An component type implementation of the 'ProductReview' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductReviewServiceBase">
            <summary>
             An object representation of the 'ProductReview' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductReview.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.CreateProductReview(System.Int32,System.String,System.DateTime,System.String,System.Int32,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_reviewerName">Name of the reviewer.</param>
            <param name="_reviewDate">Date review was submitted.</param>
            <param name="_emailAddress">Reviewer's e-mail address.</param>
            <param name="_rating">Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.</param>
            <param name="_comments">Reviewer's comments</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductReview_Product_ProductID key.
            	FK_ProductReview_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of ProductReview objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductReview_Product_ProductID key.
            	FK_ProductReview_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductReviewKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetByProductIdReviewerName(System.Int32,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ProductReview_ProductID_Name index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_reviewerName">Name of the reviewer.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetByProductIdReviewerName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ProductReview_ProductID_Name index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_reviewerName">Name of the reviewer.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetByProductReviewId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductReview_ProductReviewID index.
            </summary>
            <param name="_productReviewId">Primary key for ProductReview records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetByProductReviewId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductReview_ProductReviewID index.
            </summary>
            <param name="_productReviewId">Primary key for ProductReview records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductReview} of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductReview</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            public virtual method that Inserts a ProductReview object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductReview object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductReview object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductReview entity = new ProductReview();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductReviewService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductReview</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductReview</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductReview.
             <code><![CDATA[
             TList<ProductReview> list = new TList<ProductReview>();
             ProductReview entity = new ProductReview();
             entity.StringProperty = "foo";
             ProductReview entity2 = new ProductReview();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductReviewService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            public virtual method that Updates a ProductReview object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductReview object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductReview object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductReview entity = ProductReviewService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductReviewService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductReview</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductReview</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductReview.
             <code><![CDATA[
             TList<ProductReview> list = new TList<ProductReview>();
             ProductReview entity = new ProductReview();
             entity.StringProperty = "foo";
             ProductReview entity2 = new ProductReview();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductReviewService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            public virtual method that Saves a ProductReview object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductReview object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductReview object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductReview entity = ProductReviewService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductReviewService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductReview</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductReview</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductReview.
             <code><![CDATA[
             TList<ProductReview> list = new TList<ProductReview>();
             ProductReview entity = new ProductReview();
             entity.StringProperty = "foo";
             ProductReview entity2 = new ProductReview();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductReviewService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            public virtual method that Deletes a ProductReview object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductReview object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductReview object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductReview entity = ProductReviewService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductReviewService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductReview</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductReview</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductReview.
             <code><![CDATA[
             TList<ProductReview> list = new TList<ProductReview>();
             ProductReview entity = new ProductReview();
             entity.StringProperty = "foo";
             ProductReview entity2 = new ProductReview();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductReviewService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductReviewKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productReviewId
            </summary>
            <param name="_productReviewId">ProductReview pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoadByProductIdReviewerName(System.Int32,System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_reviewerName">Name of the reviewer.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductReview Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoadByProductReviewId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productReviewId">Primary key for ProductReview records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductReview Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductReview Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductReview)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductReview,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductReview)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductReview Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductReview,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductReview Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductReview)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductReview)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductReview)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductReview"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductReview Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductReview,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductReview object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductReview Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductReview</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductReview} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductReview},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductReview Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductReviewServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductReviewService.#ctor">
            <summary>
            Initializes a new instance of the ProductReviewService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductDescriptionService">
            <summary>
            An component type implementation of the 'ProductDescription' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase">
            <summary>
             An object representation of the 'ProductDescription' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductDescription.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.CreateProductDescription(System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> instance.
            </summary>
            <param name="_description">Description of the product.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductDescriptionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductDescription_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductDescription_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByProductDescriptionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductDescription_ProductDescriptionID index.
            </summary>
            <param name="_productDescriptionId">Primary key for ProductDescription records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByProductDescriptionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductDescription_ProductDescriptionID index.
            </summary>
            <param name="_productDescriptionId">Primary key for ProductDescription records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductDescription} of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            public virtual method that Inserts a ProductDescription object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDescription object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductDescription object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductDescription entity = new ProductDescription();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductDescriptionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDescription</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductDescription</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductDescription.
             <code><![CDATA[
             TList<ProductDescription> list = new TList<ProductDescription>();
             ProductDescription entity = new ProductDescription();
             entity.StringProperty = "foo";
             ProductDescription entity2 = new ProductDescription();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDescriptionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            public virtual method that Updates a ProductDescription object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDescription object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductDescription object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductDescription entity = ProductDescriptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductDescriptionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDescription</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductDescription</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductDescription.
             <code><![CDATA[
             TList<ProductDescription> list = new TList<ProductDescription>();
             ProductDescription entity = new ProductDescription();
             entity.StringProperty = "foo";
             ProductDescription entity2 = new ProductDescription();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDescriptionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            public virtual method that Saves a ProductDescription object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDescription object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductDescription object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductDescription entity = ProductDescriptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductDescriptionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDescription</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductDescription</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductDescription.
             <code><![CDATA[
             TList<ProductDescription> list = new TList<ProductDescription>();
             ProductDescription entity = new ProductDescription();
             entity.StringProperty = "foo";
             ProductDescription entity2 = new ProductDescription();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDescriptionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            public virtual method that Deletes a ProductDescription object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDescription object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductDescription object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductDescription entity = ProductDescriptionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductDescriptionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDescription</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductDescription</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductDescription.
             <code><![CDATA[
             TList<ProductDescription> list = new TList<ProductDescription>();
             ProductDescription entity = new ProductDescription();
             entity.StringProperty = "foo";
             ProductDescription entity2 = new ProductDescription();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDescriptionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductDescriptionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productDescriptionId
            </summary>
            <param name="_productDescriptionId">ProductDescription pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByCultureIdFromProductModelProductDescriptionCulture(System.String)">
            <summary>
            	Gets ProductDescription objects from the datasource by CultureID in the
            	ProductModelProductDescriptionCulture table. Table ProductDescription is related to table Culture
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <returns>Returns a typed collection of ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByCultureIdFromProductModelProductDescriptionCulture(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductDescription objects from the datasource by CultureID in the
            	ProductModelProductDescriptionCulture table. Table ProductDescription is related to table Culture
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByProductModelIdFromProductModelProductDescriptionCulture(System.Int32)">
            <summary>
            	Gets ProductDescription objects from the datasource by ProductModelID in the
            	ProductModelProductDescriptionCulture table. Table ProductDescription is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <returns>Returns a typed collection of ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.GetByProductModelIdFromProductModelProductDescriptionCulture(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductDescription objects from the datasource by ProductModelID in the
            	ProductModelProductDescriptionCulture table. Table ProductDescription is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProductDescription objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductDescription Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoadByProductDescriptionId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productDescriptionId">Primary key for ProductDescription records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductDescription Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductDescription Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDescription)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDescription,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDescription)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductDescription Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDescription,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductDescription Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDescription)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDescription)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductDescription)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDescription"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductDescription Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductDescription,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductDescription object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductDescription Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductDescription</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductDescription} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDescription},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductDescription Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductDescriptionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDescriptionService.#ctor">
            <summary>
            Initializes a new instance of the ProductDescriptionService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CurrencyServiceBase">
            <summary>
             An object representation of the 'Currency' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Currency.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.CreateCurrency(System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> instance.
            </summary>
            <param name="_currencyCode">The ISO code for the Currency.</param>
            <param name="_name">Currency name.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Get(Nettiers.AdventureWorks.Entities.CurrencyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Currency_Name index.
            </summary>
            <param name="_name">Currency name.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Currency_Name index.
            </summary>
            <param name="_name">Currency name.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetByCurrencyCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Currency_CurrencyCode index.
            </summary>
            <param name="_currencyCode">The ISO code for the Currency.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetByCurrencyCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Currency_CurrencyCode index.
            </summary>
            <param name="_currencyCode">The ISO code for the Currency.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Currency} of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Insert(Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            public virtual method that Inserts a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Insert.</param>
            <remarks>After Inserting into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Currency entity = new Currency();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CurrencyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Update(Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            public virtual method that Updates a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Update.</param>
            <remarks>After Updateing into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Currency entity = CurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CurrencyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Save(Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            public virtual method that Saves a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Save.</param>
            <remarks>After Saveing into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Currency entity = CurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CurrencyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Delete(Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            public virtual method that Deletes a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Currency entity = CurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CurrencyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Delete(Nettiers.AdventureWorks.Entities.CurrencyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _currencyCode
            </summary>
            <param name="_currencyCode">Currency pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetByCountryRegionCodeFromCountryRegionCurrency(System.String)">
            <summary>
            	Gets Currency objects from the datasource by CountryRegionCode in the
            	CountryRegionCurrency table. Table Currency is related to table CountryRegion
            	through the (M:N) relationship defined in the CountryRegionCurrency table.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <returns>Returns a typed collection of Currency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.GetByCountryRegionCodeFromCountryRegionCurrency(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Currency objects from the datasource by CountryRegionCode in the
            	CountryRegionCurrency table. Table Currency is related to table CountryRegion
            	through the (M:N) relationship defined in the CountryRegionCurrency table.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Currency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Currency name.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Currency Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoadByCurrencyCode(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_currencyCode">The ISO code for the Currency.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Currency Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Currency Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Currency,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Currency Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Currency,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Currency Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Currency)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Currency"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Currency Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Currency,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Currency object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Currency Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Currency</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Currency} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Currency},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Currency Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CurrencyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.AddressService">
            <summary>
            An component type implementation of the 'Address' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.AddressServiceBase">
            <summary>
             An object representation of the 'Address' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Address.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.CreateAddress(System.String,System.String,System.String,System.Int32,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> instance.
            </summary>
            <param name="_addressLine1">First street address line.</param>
            <param name="_addressLine2">Second street address line.</param>
            <param name="_city">Name of the city.</param>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="_postalCode">Postal code for the street address.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Get(Nettiers.AdventureWorks.Entities.AddressKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Address_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Address_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByAddressLine1AddressLine2CityStateProvinceIdPostalCode(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode index.
            </summary>
            <param name="_addressLine1">First street address line.</param>
            <param name="_addressLine2">Second street address line.</param>
            <param name="_city">Name of the city.</param>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="_postalCode">Postal code for the street address.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByAddressLine1AddressLine2CityStateProvinceIdPostalCode(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode index.
            </summary>
            <param name="_addressLine1">First street address line.</param>
            <param name="_addressLine2">Second street address line.</param>
            <param name="_city">Name of the city.</param>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="_postalCode">Postal code for the street address.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByStateProvinceId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Address_StateProvinceID index.
            </summary>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByStateProvinceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Address_StateProvinceID index.
            </summary>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByAddressId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Address_AddressID index.
            </summary>
            <param name="_addressId">Primary key for Address records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByAddressId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Address_AddressID index.
            </summary>
            <param name="_addressId">Primary key for Address records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Address} of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Address</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            public virtual method that Inserts a Address object into the datasource using a transaction.
            </summary>
            <param name="entity">Address object to Insert.</param>
            <remarks>After Inserting into the datasource, the Address object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Address entity = new Address();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AddressService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Address</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Address</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Address.
             <code><![CDATA[
             TList<Address> list = new TList<Address>();
             Address entity = new Address();
             entity.StringProperty = "foo";
             Address entity2 = new Address();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Update(Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            public virtual method that Updates a Address object into the datasource using a transaction.
            </summary>
            <param name="entity">Address object to Update.</param>
            <remarks>After Updateing into the datasource, the Address object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Address entity = AddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AddressService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Address</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Address</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Address.
             <code><![CDATA[
             TList<Address> list = new TList<Address>();
             Address entity = new Address();
             entity.StringProperty = "foo";
             Address entity2 = new Address();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Save(Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            public virtual method that Saves a Address object into the datasource using a transaction.
            </summary>
            <param name="entity">Address object to Save.</param>
            <remarks>After Saveing into the datasource, the Address object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Address entity = AddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AddressService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Address</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Address</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Address.
             <code><![CDATA[
             TList<Address> list = new TList<Address>();
             Address entity = new Address();
             entity.StringProperty = "foo";
             Address entity2 = new Address();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            public virtual method that Deletes a Address object into the datasource using a transaction.
            </summary>
            <param name="entity">Address object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Address object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Address entity = AddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AddressService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Address</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Address</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Address.
             <code><![CDATA[
             TList<Address> list = new TList<Address>();
             Address entity = new Address();
             entity.StringProperty = "foo";
             Address entity2 = new Address();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.AddressKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _addressId
            </summary>
            <param name="_addressId">Address pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByCustomerIdFromCustomerAddress(System.Int32)">
            <summary>
            	Gets Address objects from the datasource by CustomerID in the
            	CustomerAddress table. Table Address is related to table Customer
            	through the (M:N) relationship defined in the CustomerAddress table.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <returns>Returns a typed collection of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByCustomerIdFromCustomerAddress(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Address objects from the datasource by CustomerID in the
            	CustomerAddress table. Table Address is related to table Customer
            	through the (M:N) relationship defined in the CustomerAddress table.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByEmployeeIdFromEmployeeAddress(System.Int32)">
            <summary>
            	Gets Address objects from the datasource by EmployeeID in the
            	EmployeeAddress table. Table Address is related to table Employee
            	through the (M:N) relationship defined in the EmployeeAddress table.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <returns>Returns a typed collection of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByEmployeeIdFromEmployeeAddress(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Address objects from the datasource by EmployeeID in the
            	EmployeeAddress table. Table Address is related to table Employee
            	through the (M:N) relationship defined in the EmployeeAddress table.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByVendorIdFromVendorAddress(System.Int32)">
            <summary>
            	Gets Address objects from the datasource by VendorID in the
            	VendorAddress table. Table Address is related to table Vendor
            	through the (M:N) relationship defined in the VendorAddress table.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <returns>Returns a typed collection of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.GetByVendorIdFromVendorAddress(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Address objects from the datasource by VendorID in the
            	VendorAddress table. Table Address is related to table Vendor
            	through the (M:N) relationship defined in the VendorAddress table.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Address objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Address Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoadByAddressLine1AddressLine2CityStateProvinceIdPostalCode(System.String,System.String,System.String,System.Int32,System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_addressLine1">First street address line.</param>
            <param name="_addressLine2">Second street address line.</param>
            <param name="_city">Name of the city.</param>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="_postalCode">Postal code for the street address.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Address Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoadByStateProvinceId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_stateProvinceId">Unique identification number for the state or province. Foreign key to StateProvince table.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Address Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoadByAddressId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_addressId">Primary key for Address records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Address Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Address Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Address)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Address,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Address)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Address Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Address,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Address Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Address)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Address)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Address"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Address)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Address"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Address Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Address,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Address object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Address Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Address</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Address} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Address},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Address Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.AddressServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressService.#ctor">
            <summary>
            Initializes a new instance of the AddressService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase">
            <summary>
             An object representation of the 'vProductModelCatalogDescription' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VProductModelCatalogDescription.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelCatalogDescription"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelCatalogDescription"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.CreateVProductModelCatalogDescription(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Guid,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelCatalogDescription"/> instance.
            </summary>
            <param name="_productModelId"></param>
            <param name="_name"></param>
            <param name="_summary"></param>
            <param name="_manufacturer"></param>
            <param name="_copyright"></param>
            <param name="_productUrl"></param>
            <param name="_warrantyPeriod"></param>
            <param name="_warrantyDescription"></param>
            <param name="_noOfYears"></param>
            <param name="_maintenanceDescription"></param>
            <param name="_wheel"></param>
            <param name="_saddle"></param>
            <param name="_pedal"></param>
            <param name="_bikeFrame"></param>
            <param name="_crankset"></param>
            <param name="_pictureAngle"></param>
            <param name="_pictureSize"></param>
            <param name="_productPhotoId"></param>
            <param name="_material"></param>
            <param name="_color"></param>
            <param name="_productLine"></param>
            <param name="_style"></param>
            <param name="_riderExperience"></param>
            <param name="_rowguid"></param>
            <param name="_modifiedDate"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VProductModelCatalogDescription} of <c>VProductModelCatalogDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelCatalogDescription"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelCatalogDescription"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductModelCatalogDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductModelCatalogDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductModelCatalogDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VProductModelCatalogDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VProductModelCatalogDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VProductModelCatalogDescription</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VEmployeeDepartmentService">
            <summary>
             An component type implementation of the 'vEmployeeDepartment' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase">
            <summary>
             An object representation of the 'vEmployeeDepartment' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VEmployeeDepartment.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartment"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartment"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.CreateVEmployeeDepartment(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartment"/> instance.
            </summary>
            <param name="_employeeId"></param>
            <param name="_title"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_suffix"></param>
            <param name="_jobTitle"></param>
            <param name="_department"></param>
            <param name="_groupName"></param>
            <param name="_startDate"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VEmployeeDepartment} of <c>VEmployeeDepartment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartment"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartment"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployeeDepartment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployeeDepartment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployeeDepartment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VEmployeeDepartment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VEmployeeDepartment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VEmployeeDepartment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentService.#ctor">
            <summary>
            Initializes a new instance of the VEmployeeDepartmentService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TestVariantService">
            <summary>
            An component type implementation of the 'TestVariant' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TestVariantServiceBase">
            <summary>
             An object representation of the 'TestVariant' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TestVariant.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.CreateTestVariant(System.Object)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> instance.
            </summary>
            <param name="_variantField"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Get(Nettiers.AdventureWorks.Entities.TestVariantKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetByTestVariantId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TestVariant index.
            </summary>
            <param name="_testVariantId"></param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetByTestVariantId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TestVariant index.
            </summary>
            <param name="_testVariantId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TestVariant} of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TestVariant</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Insert(Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            public virtual method that Inserts a TestVariant object into the datasource using a transaction.
            </summary>
            <param name="entity">TestVariant object to Insert.</param>
            <remarks>After Inserting into the datasource, the TestVariant object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TestVariant entity = new TestVariant();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TestVariantService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TestVariant</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TestVariant</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TestVariant.
             <code><![CDATA[
             TList<TestVariant> list = new TList<TestVariant>();
             TestVariant entity = new TestVariant();
             entity.StringProperty = "foo";
             TestVariant entity2 = new TestVariant();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TestVariantService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Update(Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            public virtual method that Updates a TestVariant object into the datasource using a transaction.
            </summary>
            <param name="entity">TestVariant object to Update.</param>
            <remarks>After Updateing into the datasource, the TestVariant object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TestVariant entity = TestVariantService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TestVariantService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TestVariant</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TestVariant</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TestVariant.
             <code><![CDATA[
             TList<TestVariant> list = new TList<TestVariant>();
             TestVariant entity = new TestVariant();
             entity.StringProperty = "foo";
             TestVariant entity2 = new TestVariant();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TestVariantService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Save(Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            public virtual method that Saves a TestVariant object into the datasource using a transaction.
            </summary>
            <param name="entity">TestVariant object to Save.</param>
            <remarks>After Saveing into the datasource, the TestVariant object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TestVariant entity = TestVariantService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TestVariantService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TestVariant</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TestVariant</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TestVariant.
             <code><![CDATA[
             TList<TestVariant> list = new TList<TestVariant>();
             TestVariant entity = new TestVariant();
             entity.StringProperty = "foo";
             TestVariant entity2 = new TestVariant();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TestVariantService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Delete(Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            public virtual method that Deletes a TestVariant object into the datasource using a transaction.
            </summary>
            <param name="entity">TestVariant object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TestVariant object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TestVariant entity = TestVariantService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TestVariantService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TestVariant</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TestVariant</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TestVariant.
             <code><![CDATA[
             TList<TestVariant> list = new TList<TestVariant>();
             TestVariant entity = new TestVariant();
             entity.StringProperty = "foo";
             TestVariant entity2 = new TestVariant();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TestVariantService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Delete(Nettiers.AdventureWorks.Entities.TestVariantKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _testVariantId
            </summary>
            <param name="_testVariantId">TestVariant pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoadByTestVariantId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_testVariantId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TestVariant Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TestVariant Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TestVariant)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TestVariant,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TestVariant)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TestVariant Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TestVariant,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TestVariant Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TestVariant)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TestVariant)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TestVariant)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.TestVariant"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TestVariant Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TestVariant,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TestVariant object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TestVariant Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TestVariant</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TestVariant} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TestVariant},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TestVariant Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.TestVariantServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TestVariantService.#ctor">
            <summary>
            Initializes a new instance of the TestVariantService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ScrapReasonService">
            <summary>
            An component type implementation of the 'ScrapReason' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase">
            <summary>
             An object representation of the 'ScrapReason' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ScrapReason.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.CreateScrapReason(System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> instance.
            </summary>
            <param name="_name">Failure description.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Get(Nettiers.AdventureWorks.Entities.ScrapReasonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ScrapReason_Name index.
            </summary>
            <param name="_name">Failure description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ScrapReason_Name index.
            </summary>
            <param name="_name">Failure description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetByScrapReasonId(System.Int16)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ScrapReason_ScrapReasonID index.
            </summary>
            <param name="_scrapReasonId">Primary key for ScrapReason records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetByScrapReasonId(System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ScrapReason_ScrapReasonID index.
            </summary>
            <param name="_scrapReasonId">Primary key for ScrapReason records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ScrapReason} of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ScrapReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Insert(Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            public virtual method that Inserts a ScrapReason object into the datasource using a transaction.
            </summary>
            <param name="entity">ScrapReason object to Insert.</param>
            <remarks>After Inserting into the datasource, the ScrapReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ScrapReason entity = new ScrapReason();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ScrapReasonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ScrapReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ScrapReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ScrapReason.
             <code><![CDATA[
             TList<ScrapReason> list = new TList<ScrapReason>();
             ScrapReason entity = new ScrapReason();
             entity.StringProperty = "foo";
             ScrapReason entity2 = new ScrapReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ScrapReasonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Update(Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            public virtual method that Updates a ScrapReason object into the datasource using a transaction.
            </summary>
            <param name="entity">ScrapReason object to Update.</param>
            <remarks>After Updateing into the datasource, the ScrapReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ScrapReason entity = ScrapReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ScrapReasonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ScrapReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ScrapReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ScrapReason.
             <code><![CDATA[
             TList<ScrapReason> list = new TList<ScrapReason>();
             ScrapReason entity = new ScrapReason();
             entity.StringProperty = "foo";
             ScrapReason entity2 = new ScrapReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ScrapReasonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Save(Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            public virtual method that Saves a ScrapReason object into the datasource using a transaction.
            </summary>
            <param name="entity">ScrapReason object to Save.</param>
            <remarks>After Saveing into the datasource, the ScrapReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ScrapReason entity = ScrapReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ScrapReasonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ScrapReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ScrapReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ScrapReason.
             <code><![CDATA[
             TList<ScrapReason> list = new TList<ScrapReason>();
             ScrapReason entity = new ScrapReason();
             entity.StringProperty = "foo";
             ScrapReason entity2 = new ScrapReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ScrapReasonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            public virtual method that Deletes a ScrapReason object into the datasource using a transaction.
            </summary>
            <param name="entity">ScrapReason object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ScrapReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ScrapReason entity = ScrapReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ScrapReasonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ScrapReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ScrapReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ScrapReason.
             <code><![CDATA[
             TList<ScrapReason> list = new TList<ScrapReason>();
             ScrapReason entity = new ScrapReason();
             entity.StringProperty = "foo";
             ScrapReason entity2 = new ScrapReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ScrapReasonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.ScrapReasonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.Delete(System.Int16)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int16 _scrapReasonId
            </summary>
            <param name="_scrapReasonId">ScrapReason pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Failure description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ScrapReason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoadByScrapReasonId(System.Int16,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_scrapReasonId">Primary key for ScrapReason records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ScrapReason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ScrapReason Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ScrapReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ScrapReason,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ScrapReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ScrapReason Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ScrapReason,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ScrapReason Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ScrapReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ScrapReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ScrapReason)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ScrapReason"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ScrapReason Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ScrapReason,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ScrapReason object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ScrapReason Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ScrapReason</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ScrapReason} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ScrapReason},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ScrapReason Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ScrapReasonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ScrapReasonService.#ctor">
            <summary>
            Initializes a new instance of the ScrapReasonService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase">
            <summary>
             An object representation of the 'SalesOrderHeader' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesOrderHeader.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.CreateSalesOrderHeader(System.Byte,System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.Byte,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Decimal,System.Decimal,System.Decimal,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> instance.
            </summary>
            <param name="_revisionNumber">Incremental number to track changes to the sales order over time.</param>
            <param name="_orderDate">Dates the sales order was created.</param>
            <param name="_dueDate">Date the order is due to the customer.</param>
            <param name="_shipDate">Date the order was shipped to the customer.</param>
            <param name="_status">Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled</param>
            <param name="_onlineOrderFlag">0 = Order placed by sales person. 1 = Order placed online by customer.</param>
            <param name="_purchaseOrderNumber">Customer purchase order number reference. </param>
            <param name="_accountNumber">Financial accounting number reference.</param>
            <param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="_contactId">Customer contact identification number. Foreign key to Contact.ContactID.</param>
            <param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
            <param name="_territoryId">Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="_billToAddressId">Customer billing address. Foreign key to Address.AddressID.</param>
            <param name="_shipToAddressId">Customer shipping address. Foreign key to Address.AddressID.</param>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="_creditCardApprovalCode">Approval code provided by the credit card company.</param>
            <param name="_currencyRateId">Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</param>
            <param name="_subTotal">Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.</param>
            <param name="_taxAmt">Tax amount.</param>
            <param name="_freight">Shipping cost.</param>
            <param name="_comment">Sales representative comments.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByBillToAddressId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_Address_BillToAddressID key.
            	FK_SalesOrderHeader_Address_BillToAddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_billToAddressId">Customer billing address. Foreign key to Address.AddressID.</param>
            <returns>Returns a generic collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByBillToAddressId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_Address_BillToAddressID key.
            	FK_SalesOrderHeader_Address_BillToAddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_billToAddressId">Customer billing address. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByShipToAddressId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_Address_ShipToAddressID key.
            	FK_SalesOrderHeader_Address_ShipToAddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_shipToAddressId">Customer shipping address. Foreign key to Address.AddressID.</param>
            <returns>Returns a generic collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByShipToAddressId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_Address_ShipToAddressID key.
            	FK_SalesOrderHeader_Address_ShipToAddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_shipToAddressId">Customer shipping address. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByContactId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_Contact_ContactID key.
            	FK_SalesOrderHeader_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Customer contact identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns a generic collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByContactId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_Contact_ContactID key.
            	FK_SalesOrderHeader_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Customer contact identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByCreditCardId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_CreditCard_CreditCardID key.
            	FK_SalesOrderHeader_CreditCard_CreditCardID Description: Foreign key constraint referencing CreditCard.CreditCardID.
            </summary>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <returns>Returns a generic collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByCreditCardId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_CreditCard_CreditCardID key.
            	FK_SalesOrderHeader_CreditCard_CreditCardID Description: Foreign key constraint referencing CreditCard.CreditCardID.
            </summary>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByCurrencyRateId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_CurrencyRate_CurrencyRateID key.
            	FK_SalesOrderHeader_CurrencyRate_CurrencyRateID Description: Foreign key constraint referencing CurrencyRate.CurrencyRateID.
            </summary>
            <param name="_currencyRateId">Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</param>
            <returns>Returns a generic collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByCurrencyRateId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_CurrencyRate_CurrencyRateID key.
            	FK_SalesOrderHeader_CurrencyRate_CurrencyRateID Description: Foreign key constraint referencing CurrencyRate.CurrencyRateID.
            </summary>
            <param name="_currencyRateId">Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByTerritoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_SalesTerritory_TerritoryID key.
            	FK_SalesOrderHeader_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <returns>Returns a generic collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByTerritoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_SalesTerritory_TerritoryID key.
            	FK_SalesOrderHeader_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByShipMethodId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_ShipMethod_ShipMethodID key.
            	FK_SalesOrderHeader_ShipMethod_ShipMethodID Description: Foreign key constraint referencing ShipMethod.ShipMethodID.
            </summary>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <returns>Returns a generic collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByShipMethodId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderHeader_ShipMethod_ShipMethodID key.
            	FK_SalesOrderHeader_ShipMethod_ShipMethodID Description: Foreign key constraint referencing ShipMethod.ShipMethodID.
            </summary>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesOrderHeaderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesOrderHeader_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesOrderHeader_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesOrderNumber(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesOrderHeader_SalesOrderNumber index.
            </summary>
            <param name="_salesOrderNumber">Unique sales order identification number.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesOrderNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesOrderHeader_SalesOrderNumber index.
            </summary>
            <param name="_salesOrderNumber">Unique sales order identification number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByCustomerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SalesOrderHeader_CustomerID index.
            </summary>
            <param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SalesOrderHeader_CustomerID index.
            </summary>
            <param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesPersonId(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SalesOrderHeader_SalesPersonID index.
            </summary>
            <param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesPersonId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SalesOrderHeader_SalesPersonID index.
            </summary>
            <param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesOrderId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesOrderHeader_SalesOrderID index.
            </summary>
            <param name="_salesOrderId">Primary key.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesOrderHeader_SalesOrderID index.
            </summary>
            <param name="_salesOrderId">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesOrderHeader} of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            public virtual method that Inserts a SalesOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeader object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesOrderHeader entity = new SalesOrderHeader();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesOrderHeaderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesOrderHeader.
             <code><![CDATA[
             TList<SalesOrderHeader> list = new TList<SalesOrderHeader>();
             SalesOrderHeader entity = new SalesOrderHeader();
             entity.StringProperty = "foo";
             SalesOrderHeader entity2 = new SalesOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            public virtual method that Updates a SalesOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeader object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesOrderHeader entity = SalesOrderHeaderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesOrderHeaderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesOrderHeader.
             <code><![CDATA[
             TList<SalesOrderHeader> list = new TList<SalesOrderHeader>();
             SalesOrderHeader entity = new SalesOrderHeader();
             entity.StringProperty = "foo";
             SalesOrderHeader entity2 = new SalesOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            public virtual method that Saves a SalesOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeader object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesOrderHeader entity = SalesOrderHeaderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesOrderHeaderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesOrderHeader.
             <code><![CDATA[
             TList<SalesOrderHeader> list = new TList<SalesOrderHeader>();
             SalesOrderHeader entity = new SalesOrderHeader();
             entity.StringProperty = "foo";
             SalesOrderHeader entity2 = new SalesOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            public virtual method that Deletes a SalesOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderHeader object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesOrderHeader entity = SalesOrderHeaderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesOrderHeaderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesOrderHeader.
             <code><![CDATA[
             TList<SalesOrderHeader> list = new TList<SalesOrderHeader>();
             SalesOrderHeader entity = new SalesOrderHeader();
             entity.StringProperty = "foo";
             SalesOrderHeader entity2 = new SalesOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderHeaderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesOrderHeaderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesOrderId
            </summary>
            <param name="_salesOrderId">SalesOrderHeader pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesReasonIdFromSalesOrderHeaderSalesReason(System.Int32)">
            <summary>
            	Gets SalesOrderHeader objects from the datasource by SalesReasonID in the
            	SalesOrderHeaderSalesReason table. Table SalesOrderHeader is related to table SalesReason
            	through the (M:N) relationship defined in the SalesOrderHeaderSalesReason table.
            </summary>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <returns>Returns a typed collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.GetBySalesReasonIdFromSalesOrderHeaderSalesReason(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SalesOrderHeader objects from the datasource by SalesReasonID in the
            	SalesOrderHeaderSalesReason table. Table SalesOrderHeader is related to table SalesReason
            	through the (M:N) relationship defined in the SalesOrderHeaderSalesReason table.
            </summary>
            <param name="_salesReasonId">Primary key. Foreign key to SalesReason.SalesReasonID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoadBySalesOrderNumber(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesOrderNumber">Unique sales order identification number.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoadByCustomerId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_customerId">Customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoadBySalesPersonId(System.Nullable{System.Int32},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesPersonId">Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoadBySalesOrderId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesOrderId">Primary key.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesOrderHeader Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeader,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesOrderHeader Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeader,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesOrderHeader)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderHeader"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesOrderHeader Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesOrderHeader,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesOrderHeader object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesOrderHeader Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesOrderHeader</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesOrderHeader} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderHeader},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesOrderHeader Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesOrderHeaderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.NullFkeyChildService">
            <summary>
            An component type implementation of the 'NullFKeyChild' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase">
            <summary>
             An object representation of the 'NullFKeyChild' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NullFkeyChild.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.CreateNullFkeyChild(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> instance.
            </summary>
            <param name="_nullFkeyChildId"></param>
            <param name="_nullFkeyParentId"></param>
            <param name="_someText"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetByNullFkeyParentId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_NullFKeyChild_NullFKeyParent key.
            	FK_NullFKeyChild_NullFKeyParent Description: 
            </summary>
            <param name="_nullFkeyParentId"></param>
            <returns>Returns a generic collection of NullFkeyChild objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetByNullFkeyParentId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_NullFKeyChild_NullFKeyParent key.
            	FK_NullFKeyChild_NullFKeyParent Description: 
            </summary>
            <param name="_nullFkeyParentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Get(Nettiers.AdventureWorks.Entities.NullFkeyChildKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetByNullFkeyChildId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_NullFKeyChild index.
            </summary>
            <param name="_nullFkeyChildId"></param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetByNullFkeyChildId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_NullFKeyChild index.
            </summary>
            <param name="_nullFkeyChildId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NullFkeyChild} of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NullFkeyChild</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Insert(Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            public virtual method that Inserts a NullFkeyChild object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyChild object to Insert.</param>
            <remarks>After Inserting into the datasource, the NullFkeyChild object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NullFkeyChild entity = new NullFkeyChild();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NullFkeyChildService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyChild</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NullFkeyChild</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NullFkeyChild.
             <code><![CDATA[
             TList<NullFkeyChild> list = new TList<NullFkeyChild>();
             NullFkeyChild entity = new NullFkeyChild();
             entity.StringProperty = "foo";
             NullFkeyChild entity2 = new NullFkeyChild();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyChildService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Update(Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            public virtual method that Updates a NullFkeyChild object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyChild object to Update.</param>
            <remarks>After Updateing into the datasource, the NullFkeyChild object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NullFkeyChild entity = NullFkeyChildService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NullFkeyChildService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyChild</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NullFkeyChild</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NullFkeyChild.
             <code><![CDATA[
             TList<NullFkeyChild> list = new TList<NullFkeyChild>();
             NullFkeyChild entity = new NullFkeyChild();
             entity.StringProperty = "foo";
             NullFkeyChild entity2 = new NullFkeyChild();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyChildService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Save(Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            public virtual method that Saves a NullFkeyChild object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyChild object to Save.</param>
            <remarks>After Saveing into the datasource, the NullFkeyChild object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            NullFkeyChild entity = NullFkeyChildService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NullFkeyChildService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyChild</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>NullFkeyChild</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of NullFkeyChild.
             <code><![CDATA[
             TList<NullFkeyChild> list = new TList<NullFkeyChild>();
             NullFkeyChild entity = new NullFkeyChild();
             entity.StringProperty = "foo";
             NullFkeyChild entity2 = new NullFkeyChild();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyChildService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Delete(Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            public virtual method that Deletes a NullFkeyChild object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyChild object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NullFkeyChild object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NullFkeyChild entity = NullFkeyChildService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NullFkeyChildService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyChild</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NullFkeyChild</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NullFkeyChild.
             <code><![CDATA[
             TList<NullFkeyChild> list = new TList<NullFkeyChild>();
             NullFkeyChild entity = new NullFkeyChild();
             entity.StringProperty = "foo";
             NullFkeyChild entity2 = new NullFkeyChild();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyChildService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Delete(Nettiers.AdventureWorks.Entities.NullFkeyChildKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _nullFkeyChildId
            </summary>
            <param name="_nullFkeyChildId">NullFkeyChild pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoadByNullFkeyChildId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_nullFkeyChildId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NullFkeyChild Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">NullFkeyChild Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyChild)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyChild,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyChild)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">NullFkeyChild Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyChild,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NullFkeyChild Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyChild)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyChild)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.NullFkeyChild)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyChild"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">NullFkeyChild Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.NullFkeyChild,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the NullFkeyChild object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">NullFkeyChild Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>NullFkeyChild</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{NullFkeyChild} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyChild},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">NullFkeyChild Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.NullFkeyChildServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyChildService.#ctor">
            <summary>
            Initializes a new instance of the NullFkeyChildService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.JobCandidateService">
            <summary>
            An component type implementation of the 'JobCandidate' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.JobCandidateServiceBase">
            <summary>
             An object representation of the 'JobCandidate' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the JobCandidate.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.CreateJobCandidate(System.Nullable{System.Int32},System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> instance.
            </summary>
            <param name="_employeeId">Employee identification number if applicant was hired. Foreign key to Employee.EmployeeID.</param>
            <param name="_resume">Résumé in XML format.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Get(Nettiers.AdventureWorks.Entities.JobCandidateKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetByEmployeeId(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_JobCandidate_EmployeeID index.
            </summary>
            <param name="_employeeId">Employee identification number if applicant was hired. Foreign key to Employee.EmployeeID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetByEmployeeId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_JobCandidate_EmployeeID index.
            </summary>
            <param name="_employeeId">Employee identification number if applicant was hired. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetByJobCandidateId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_JobCandidate_JobCandidateID index.
            </summary>
            <param name="_jobCandidateId">Primary key for JobCandidate records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetByJobCandidateId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_JobCandidate_JobCandidateID index.
            </summary>
            <param name="_jobCandidateId">Primary key for JobCandidate records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{JobCandidate} of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>JobCandidate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Insert(Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            public virtual method that Inserts a JobCandidate object into the datasource using a transaction.
            </summary>
            <param name="entity">JobCandidate object to Insert.</param>
            <remarks>After Inserting into the datasource, the JobCandidate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            JobCandidate entity = new JobCandidate();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	JobCandidateService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>JobCandidate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>JobCandidate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of JobCandidate.
             <code><![CDATA[
             TList<JobCandidate> list = new TList<JobCandidate>();
             JobCandidate entity = new JobCandidate();
             entity.StringProperty = "foo";
             JobCandidate entity2 = new JobCandidate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobCandidateService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Update(Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            public virtual method that Updates a JobCandidate object into the datasource using a transaction.
            </summary>
            <param name="entity">JobCandidate object to Update.</param>
            <remarks>After Updateing into the datasource, the JobCandidate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            JobCandidate entity = JobCandidateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	JobCandidateService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>JobCandidate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>JobCandidate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of JobCandidate.
             <code><![CDATA[
             TList<JobCandidate> list = new TList<JobCandidate>();
             JobCandidate entity = new JobCandidate();
             entity.StringProperty = "foo";
             JobCandidate entity2 = new JobCandidate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobCandidateService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Save(Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            public virtual method that Saves a JobCandidate object into the datasource using a transaction.
            </summary>
            <param name="entity">JobCandidate object to Save.</param>
            <remarks>After Saveing into the datasource, the JobCandidate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            JobCandidate entity = JobCandidateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	JobCandidateService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>JobCandidate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>JobCandidate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of JobCandidate.
             <code><![CDATA[
             TList<JobCandidate> list = new TList<JobCandidate>();
             JobCandidate entity = new JobCandidate();
             entity.StringProperty = "foo";
             JobCandidate entity2 = new JobCandidate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobCandidateService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Delete(Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            public virtual method that Deletes a JobCandidate object into the datasource using a transaction.
            </summary>
            <param name="entity">JobCandidate object to Delete.</param>
            <remarks>After Deleteing into the datasource, the JobCandidate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            JobCandidate entity = JobCandidateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	JobCandidateService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>JobCandidate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>JobCandidate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of JobCandidate.
             <code><![CDATA[
             TList<JobCandidate> list = new TList<JobCandidate>();
             JobCandidate entity = new JobCandidate();
             entity.StringProperty = "foo";
             JobCandidate entity2 = new JobCandidate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	JobCandidateService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Delete(Nettiers.AdventureWorks.Entities.JobCandidateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _jobCandidateId
            </summary>
            <param name="_jobCandidateId">JobCandidate pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoadByEmployeeId(System.Nullable{System.Int32},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_employeeId">Employee identification number if applicant was hired. Foreign key to Employee.EmployeeID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">JobCandidate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoadByJobCandidateId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_jobCandidateId">Primary key for JobCandidate records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">JobCandidate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">JobCandidate Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.JobCandidate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.JobCandidate,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.JobCandidate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">JobCandidate Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.JobCandidate,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">JobCandidate Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.JobCandidate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.JobCandidate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.JobCandidate)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.JobCandidate"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">JobCandidate Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.JobCandidate,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the JobCandidate object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">JobCandidate Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>JobCandidate</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{JobCandidate} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.JobCandidate},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">JobCandidate Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.JobCandidateServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.JobCandidateService.#ctor">
            <summary>
            Initializes a new instance of the JobCandidateService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IllustrationServiceBase">
            <summary>
             An object representation of the 'Illustration' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Illustration.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.CreateIllustration(System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> instance.
            </summary>
            <param name="_diagram">Illustrations used in manufacturing instructions. Stored as XML.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Get(Nettiers.AdventureWorks.Entities.IllustrationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetByIllustrationId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Illustration_IllustrationID index.
            </summary>
            <param name="_illustrationId">Primary key for Illustration records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetByIllustrationId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Illustration_IllustrationID index.
            </summary>
            <param name="_illustrationId">Primary key for Illustration records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Illustration} of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Illustration</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Insert(Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            public virtual method that Inserts a Illustration object into the datasource using a transaction.
            </summary>
            <param name="entity">Illustration object to Insert.</param>
            <remarks>After Inserting into the datasource, the Illustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Illustration entity = new Illustration();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IllustrationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Illustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Illustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Illustration.
             <code><![CDATA[
             TList<Illustration> list = new TList<Illustration>();
             Illustration entity = new Illustration();
             entity.StringProperty = "foo";
             Illustration entity2 = new Illustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IllustrationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Update(Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            public virtual method that Updates a Illustration object into the datasource using a transaction.
            </summary>
            <param name="entity">Illustration object to Update.</param>
            <remarks>After Updateing into the datasource, the Illustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Illustration entity = IllustrationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IllustrationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Illustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Illustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Illustration.
             <code><![CDATA[
             TList<Illustration> list = new TList<Illustration>();
             Illustration entity = new Illustration();
             entity.StringProperty = "foo";
             Illustration entity2 = new Illustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IllustrationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Save(Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            public virtual method that Saves a Illustration object into the datasource using a transaction.
            </summary>
            <param name="entity">Illustration object to Save.</param>
            <remarks>After Saveing into the datasource, the Illustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Illustration entity = IllustrationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IllustrationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Illustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Illustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Illustration.
             <code><![CDATA[
             TList<Illustration> list = new TList<Illustration>();
             Illustration entity = new Illustration();
             entity.StringProperty = "foo";
             Illustration entity2 = new Illustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IllustrationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Delete(Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            public virtual method that Deletes a Illustration object into the datasource using a transaction.
            </summary>
            <param name="entity">Illustration object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Illustration object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Illustration entity = IllustrationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IllustrationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Illustration</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Illustration</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Illustration.
             <code><![CDATA[
             TList<Illustration> list = new TList<Illustration>();
             Illustration entity = new Illustration();
             entity.StringProperty = "foo";
             Illustration entity2 = new Illustration();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IllustrationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Delete(Nettiers.AdventureWorks.Entities.IllustrationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _illustrationId
            </summary>
            <param name="_illustrationId">Illustration pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetByProductModelIdFromProductModelIllustration(System.Int32)">
            <summary>
            	Gets Illustration objects from the datasource by ProductModelID in the
            	ProductModelIllustration table. Table Illustration is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelIllustration table.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <returns>Returns a typed collection of Illustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.GetByProductModelIdFromProductModelIllustration(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Illustration objects from the datasource by ProductModelID in the
            	ProductModelIllustration table. Table Illustration is related to table ProductModel
            	through the (M:N) relationship defined in the ProductModelIllustration table.
            </summary>
            <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Illustration objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoadByIllustrationId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_illustrationId">Primary key for Illustration records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Illustration Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Illustration Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Illustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Illustration,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Illustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Illustration Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Illustration,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Illustration Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Illustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Illustration)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Illustration)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Illustration"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Illustration Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Illustration,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Illustration object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Illustration Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Illustration</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Illustration} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Illustration},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Illustration Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IllustrationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CurrencyService">
            <summary>
            An component type implementation of the 'Currency' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyService.#ctor">
            <summary>
            Initializes a new instance of the CurrencyService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IProcessorResult.AddBrokenRulesList(System.Type,Nettiers.AdventureWorks.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VVendorServiceBase">
            <summary>
             An object representation of the 'vVendor' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VVendor.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VVendor"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VVendor"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.CreateVVendor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VVendor"/> instance.
            </summary>
            <param name="_vendorId"></param>
            <param name="_name"></param>
            <param name="_contactType"></param>
            <param name="_title"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_suffix"></param>
            <param name="_phone"></param>
            <param name="_emailAddress"></param>
            <param name="_emailPromotion"></param>
            <param name="_addressLine1"></param>
            <param name="_addressLine2"></param>
            <param name="_city"></param>
            <param name="_stateProvinceName"></param>
            <param name="_postalCode"></param>
            <param name="_countryRegionName"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VVendor} of <c>VVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VVendor"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VVendor"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VVendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VVendor</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase">
            <summary>
             An object representation of the 'vEmployeeDepartmentHistory' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VEmployeeDepartmentHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartmentHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartmentHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.CreateVEmployeeDepartmentHistory(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartmentHistory"/> instance.
            </summary>
            <param name="_employeeId"></param>
            <param name="_title"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_suffix"></param>
            <param name="_shift"></param>
            <param name="_department"></param>
            <param name="_groupName"></param>
            <param name="_startDate"></param>
            <param name="_endDate"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VEmployeeDepartmentHistory} of <c>VEmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartmentHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VEmployeeDepartmentHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VEmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VEmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VEmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase">
            <summary>
             An object representation of the 'WorkOrderRouting' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the WorkOrderRouting.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.CreateWorkOrderRouting(System.Int32,System.Int32,System.Int16,System.Int16,System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> instance.
            </summary>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_operationSequence">Primary key. Indicates the manufacturing process sequence.</param>
            <param name="_locationId">Manufacturing location where the part is processed. Foreign key to Location.LocationID.</param>
            <param name="_scheduledStartDate">Planned manufacturing start date.</param>
            <param name="_scheduledEndDate">Planned manufacturing end date.</param>
            <param name="_actualStartDate">Actual start date.</param>
            <param name="_actualEndDate">Actual end date.</param>
            <param name="_actualResourceHrs">Number of manufacturing hours used.</param>
            <param name="_plannedCost">Estimated manufacturing cost.</param>
            <param name="_actualCost">Actual manufacturing cost.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByLocationId(System.Int16)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_WorkOrderRouting_Location_LocationID key.
            	FK_WorkOrderRouting_Location_LocationID Description: Foreign key constraint referencing Location.LocationID.
            </summary>
            <param name="_locationId">Manufacturing location where the part is processed. Foreign key to Location.LocationID.</param>
            <returns>Returns a generic collection of WorkOrderRouting objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByLocationId(System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_WorkOrderRouting_Location_LocationID key.
            	FK_WorkOrderRouting_Location_LocationID Description: Foreign key constraint referencing Location.LocationID.
            </summary>
            <param name="_locationId">Manufacturing location where the part is processed. Foreign key to Location.LocationID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByWorkOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_WorkOrderRouting_WorkOrder_WorkOrderID key.
            	FK_WorkOrderRouting_WorkOrder_WorkOrderID Description: Foreign key constraint referencing WorkOrder.WorkOrderID.
            </summary>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <returns>Returns a generic collection of WorkOrderRouting objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByWorkOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_WorkOrderRouting_WorkOrder_WorkOrderID key.
            	FK_WorkOrderRouting_WorkOrder_WorkOrderID Description: Foreign key constraint referencing WorkOrder.WorkOrderID.
            </summary>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Get(Nettiers.AdventureWorks.Entities.WorkOrderRoutingKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_WorkOrderRouting_ProductID index.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_WorkOrderRouting_ProductID index.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByWorkOrderIdProductIdOperationSequence(System.Int32,System.Int32,System.Int16)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence index.
            </summary>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_operationSequence">Primary key. Indicates the manufacturing process sequence.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetByWorkOrderIdProductIdOperationSequence(System.Int32,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence index.
            </summary>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_operationSequence">Primary key. Indicates the manufacturing process sequence.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{WorkOrderRouting} of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WorkOrderRouting</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Insert(Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            public virtual method that Inserts a WorkOrderRouting object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrderRouting object to Insert.</param>
            <remarks>After Inserting into the datasource, the WorkOrderRouting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            WorkOrderRouting entity = new WorkOrderRouting();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WorkOrderRoutingService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrderRouting</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>WorkOrderRouting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of WorkOrderRouting.
             <code><![CDATA[
             TList<WorkOrderRouting> list = new TList<WorkOrderRouting>();
             WorkOrderRouting entity = new WorkOrderRouting();
             entity.StringProperty = "foo";
             WorkOrderRouting entity2 = new WorkOrderRouting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderRoutingService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Update(Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            public virtual method that Updates a WorkOrderRouting object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrderRouting object to Update.</param>
            <remarks>After Updateing into the datasource, the WorkOrderRouting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            WorkOrderRouting entity = WorkOrderRoutingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WorkOrderRoutingService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrderRouting</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>WorkOrderRouting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of WorkOrderRouting.
             <code><![CDATA[
             TList<WorkOrderRouting> list = new TList<WorkOrderRouting>();
             WorkOrderRouting entity = new WorkOrderRouting();
             entity.StringProperty = "foo";
             WorkOrderRouting entity2 = new WorkOrderRouting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderRoutingService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Save(Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            public virtual method that Saves a WorkOrderRouting object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrderRouting object to Save.</param>
            <remarks>After Saveing into the datasource, the WorkOrderRouting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            WorkOrderRouting entity = WorkOrderRoutingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	WorkOrderRoutingService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrderRouting</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>WorkOrderRouting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of WorkOrderRouting.
             <code><![CDATA[
             TList<WorkOrderRouting> list = new TList<WorkOrderRouting>();
             WorkOrderRouting entity = new WorkOrderRouting();
             entity.StringProperty = "foo";
             WorkOrderRouting entity2 = new WorkOrderRouting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderRoutingService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Delete(Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            public virtual method that Deletes a WorkOrderRouting object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrderRouting object to Delete.</param>
            <remarks>After Deleteing into the datasource, the WorkOrderRouting object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            WorkOrderRouting entity = WorkOrderRoutingService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WorkOrderRoutingService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrderRouting</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>WorkOrderRouting</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of WorkOrderRouting.
             <code><![CDATA[
             TList<WorkOrderRouting> list = new TList<WorkOrderRouting>();
             WorkOrderRouting entity = new WorkOrderRouting();
             entity.StringProperty = "foo";
             WorkOrderRouting entity2 = new WorkOrderRouting();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderRoutingService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Delete(Nettiers.AdventureWorks.Entities.WorkOrderRoutingKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.Delete(System.Int32,System.Int32,System.Int16)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _workOrderId, System.Int32 _productId, System.Int16 _operationSequence
            </summary>
            <param name="_workOrderId">WorkOrderRouting pk id.</param>
            <param name="_productId">WorkOrderRouting pk id.</param>
            <param name="_operationSequence">WorkOrderRouting pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkOrderRouting Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoadByWorkOrderIdProductIdOperationSequence(System.Int32,System.Int32,System.Int16,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_workOrderId">Primary key. Foreign key to WorkOrder.WorkOrderID.</param>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="_operationSequence">Primary key. Indicates the manufacturing process sequence.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkOrderRouting Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">WorkOrderRouting Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrderRouting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrderRouting,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrderRouting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">WorkOrderRouting Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrderRouting,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkOrderRouting Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrderRouting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrderRouting)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.WorkOrderRouting)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrderRouting"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">WorkOrderRouting Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.WorkOrderRouting,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the WorkOrderRouting object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">WorkOrderRouting Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>WorkOrderRouting</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{WorkOrderRouting} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrderRouting},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">WorkOrderRouting Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.WorkOrderRoutingServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesTerritoryService">
            <summary>
            An component type implementation of the 'SalesTerritory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase">
            <summary>
             An object representation of the 'SalesTerritory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesTerritory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.CreateSalesTerritory(System.String,System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> instance.
            </summary>
            <param name="_name">Sales territory description</param>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <param name="_group">Geographic area to which the sales territory belong.</param>
            <param name="_salesYtd">Sales in the territory year to date.</param>
            <param name="_salesLastYear">Sales in the territory the previous year.</param>
            <param name="_costYtd">Business costs in the territory year to date.</param>
            <param name="_costLastYear">Business costs in the territory the previous year.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesTerritoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTerritory_Name index.
            </summary>
            <param name="_name">Sales territory description</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTerritory_Name index.
            </summary>
            <param name="_name">Sales territory description</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTerritory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTerritory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetByTerritoryId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesTerritory_TerritoryID index.
            </summary>
            <param name="_territoryId">Primary key for SalesTerritory records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetByTerritoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesTerritory_TerritoryID index.
            </summary>
            <param name="_territoryId">Primary key for SalesTerritory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesTerritory} of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesTerritory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            public virtual method that Inserts a SalesTerritory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritory object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesTerritory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesTerritory entity = new SalesTerritory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesTerritoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesTerritory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesTerritory.
             <code><![CDATA[
             TList<SalesTerritory> list = new TList<SalesTerritory>();
             SalesTerritory entity = new SalesTerritory();
             entity.StringProperty = "foo";
             SalesTerritory entity2 = new SalesTerritory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            public virtual method that Updates a SalesTerritory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritory object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesTerritory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesTerritory entity = SalesTerritoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesTerritoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesTerritory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesTerritory.
             <code><![CDATA[
             TList<SalesTerritory> list = new TList<SalesTerritory>();
             SalesTerritory entity = new SalesTerritory();
             entity.StringProperty = "foo";
             SalesTerritory entity2 = new SalesTerritory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            public virtual method that Saves a SalesTerritory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritory object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesTerritory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesTerritory entity = SalesTerritoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesTerritoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesTerritory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesTerritory.
             <code><![CDATA[
             TList<SalesTerritory> list = new TList<SalesTerritory>();
             SalesTerritory entity = new SalesTerritory();
             entity.StringProperty = "foo";
             SalesTerritory entity2 = new SalesTerritory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            public virtual method that Deletes a SalesTerritory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesTerritory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesTerritory entity = SalesTerritoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesTerritoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesTerritory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesTerritory.
             <code><![CDATA[
             TList<SalesTerritory> list = new TList<SalesTerritory>();
             SalesTerritory entity = new SalesTerritory();
             entity.StringProperty = "foo";
             SalesTerritory entity2 = new SalesTerritory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesTerritoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _territoryId
            </summary>
            <param name="_territoryId">SalesTerritory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Sales territory description</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTerritory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTerritory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoadByTerritoryId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_territoryId">Primary key for SalesTerritory records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTerritory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesTerritory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesTerritory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTerritory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesTerritory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesTerritory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesTerritory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesTerritory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesTerritory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesTerritory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesTerritory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesTerritory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesTerritoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryService.#ctor">
            <summary>
            Initializes a new instance of the SalesTerritoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase">
            <summary>
             An object representation of the 'ProductCategory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductCategory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.CreateProductCategory(System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> instance.
            </summary>
            <param name="_name">Category description.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductCategoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductCategory_Name index.
            </summary>
            <param name="_name">Category description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductCategory_Name index.
            </summary>
            <param name="_name">Category description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductCategory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductCategory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetByProductCategoryId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductCategory_ProductCategoryID index.
            </summary>
            <param name="_productCategoryId">Primary key for ProductCategory records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetByProductCategoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductCategory_ProductCategoryID index.
            </summary>
            <param name="_productCategoryId">Primary key for ProductCategory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductCategory} of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductCategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            public virtual method that Inserts a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductCategory entity = new ProductCategory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductCategoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            public virtual method that Updates a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductCategory entity = ProductCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductCategoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            public virtual method that Saves a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductCategory entity = ProductCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductCategoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            public virtual method that Deletes a ProductCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductCategory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductCategory entity = ProductCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductCategoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductCategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductCategory.
             <code><![CDATA[
             TList<ProductCategory> list = new TList<ProductCategory>();
             ProductCategory entity = new ProductCategory();
             entity.StringProperty = "foo";
             ProductCategory entity2 = new ProductCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductCategoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductCategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productCategoryId
            </summary>
            <param name="_productCategoryId">ProductCategory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Category description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoadByProductCategoryId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productCategoryId">Primary key for ProductCategory records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductCategory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCategory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductCategory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCategory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductCategory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductCategory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductCategory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductCategory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductCategory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductCategory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductCategory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductCategory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductCategory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductCategory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductCategoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ErrorLogService">
            <summary>
            An component type implementation of the 'ErrorLog' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ErrorLogService.#ctor">
            <summary>
            Initializes a new instance of the ErrorLogService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeePayHistoryService">
            <summary>
            An component type implementation of the 'EmployeePayHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase">
            <summary>
             An object representation of the 'EmployeePayHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the EmployeePayHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.CreateEmployeePayHistory(System.Int32,System.DateTime,System.Decimal,System.Byte,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> instance.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_rateChangeDate">Date the change in pay is effective</param>
            <param name="_rate">Salary hourly rate.</param>
            <param name="_payFrequency">1 = Salary received monthly, 2 = Salary received biweekly</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetByEmployeeId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeePayHistory_Employee_EmployeeID key.
            	FK_EmployeePayHistory_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <returns>Returns a generic collection of EmployeePayHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetByEmployeeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeePayHistory_Employee_EmployeeID key.
            	FK_EmployeePayHistory_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Get(Nettiers.AdventureWorks.Entities.EmployeePayHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetByEmployeeIdRateChangeDate(System.Int32,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_EmployeePayHistory_EmployeeID_RateChangeDate index.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_rateChangeDate">Date the change in pay is effective</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetByEmployeeIdRateChangeDate(System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_EmployeePayHistory_EmployeeID_RateChangeDate index.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_rateChangeDate">Date the change in pay is effective</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{EmployeePayHistory} of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>EmployeePayHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            public virtual method that Inserts a EmployeePayHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeePayHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the EmployeePayHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            EmployeePayHistory entity = new EmployeePayHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	EmployeePayHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeePayHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>EmployeePayHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of EmployeePayHistory.
             <code><![CDATA[
             TList<EmployeePayHistory> list = new TList<EmployeePayHistory>();
             EmployeePayHistory entity = new EmployeePayHistory();
             entity.StringProperty = "foo";
             EmployeePayHistory entity2 = new EmployeePayHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeePayHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            public virtual method that Updates a EmployeePayHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeePayHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the EmployeePayHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            EmployeePayHistory entity = EmployeePayHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	EmployeePayHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeePayHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>EmployeePayHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of EmployeePayHistory.
             <code><![CDATA[
             TList<EmployeePayHistory> list = new TList<EmployeePayHistory>();
             EmployeePayHistory entity = new EmployeePayHistory();
             entity.StringProperty = "foo";
             EmployeePayHistory entity2 = new EmployeePayHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeePayHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            public virtual method that Saves a EmployeePayHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeePayHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the EmployeePayHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            EmployeePayHistory entity = EmployeePayHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	EmployeePayHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeePayHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>EmployeePayHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of EmployeePayHistory.
             <code><![CDATA[
             TList<EmployeePayHistory> list = new TList<EmployeePayHistory>();
             EmployeePayHistory entity = new EmployeePayHistory();
             entity.StringProperty = "foo";
             EmployeePayHistory entity2 = new EmployeePayHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeePayHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            public virtual method that Deletes a EmployeePayHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeePayHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the EmployeePayHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            EmployeePayHistory entity = EmployeePayHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	EmployeePayHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeePayHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>EmployeePayHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of EmployeePayHistory.
             <code><![CDATA[
             TList<EmployeePayHistory> list = new TList<EmployeePayHistory>();
             EmployeePayHistory entity = new EmployeePayHistory();
             entity.StringProperty = "foo";
             EmployeePayHistory entity2 = new EmployeePayHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeePayHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.EmployeePayHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.Delete(System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _employeeId, System.DateTime _rateChangeDate
            </summary>
            <param name="_employeeId">EmployeePayHistory pk id.</param>
            <param name="_rateChangeDate">EmployeePayHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoadByEmployeeIdRateChangeDate(System.Int32,System.DateTime,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_rateChangeDate">Date the change in pay is effective</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeePayHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">EmployeePayHistory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeePayHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeePayHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeePayHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">EmployeePayHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeePayHistory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeePayHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeePayHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeePayHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.EmployeePayHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeePayHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">EmployeePayHistory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.EmployeePayHistory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the EmployeePayHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">EmployeePayHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>EmployeePayHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{EmployeePayHistory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeePayHistory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">EmployeePayHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.EmployeePayHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeePayHistoryService.#ctor">
            <summary>
            Initializes a new instance of the EmployeePayHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.DatabaseLogService">
            <summary>
            An component type implementation of the 'DatabaseLog' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase">
            <summary>
             An object representation of the 'DatabaseLog' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DatabaseLog.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.CreateDatabaseLog(System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> instance.
            </summary>
            <param name="_postTime">The date and time the DDL change occurred.</param>
            <param name="_databaseUser">The user who implemented the DDL change.</param>
            <param name="_safeNameEvent">The type of DDL statement that was executed.</param>
            <param name="_schema">The schema to which the changed object belongs.</param>
            <param name="_safeNameObject">The object that was changed by the DDL statment.</param>
            <param name="_tsql">The exact Transact-SQL statement that was executed.</param>
            <param name="_xmlEvent">The raw XML data generated by database trigger.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Get(Nettiers.AdventureWorks.Entities.DatabaseLogKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetByDatabaseLogId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_DatabaseLog_DatabaseLogID index.
            </summary>
            <param name="_databaseLogId">Primary key for DatabaseLog records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetByDatabaseLogId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_DatabaseLog_DatabaseLogID index.
            </summary>
            <param name="_databaseLogId">Primary key for DatabaseLog records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DatabaseLog} of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DatabaseLog</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Insert(Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            public virtual method that Inserts a DatabaseLog object into the datasource using a transaction.
            </summary>
            <param name="entity">DatabaseLog object to Insert.</param>
            <remarks>After Inserting into the datasource, the DatabaseLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DatabaseLog entity = new DatabaseLog();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DatabaseLogService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DatabaseLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DatabaseLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DatabaseLog.
             <code><![CDATA[
             TList<DatabaseLog> list = new TList<DatabaseLog>();
             DatabaseLog entity = new DatabaseLog();
             entity.StringProperty = "foo";
             DatabaseLog entity2 = new DatabaseLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DatabaseLogService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Update(Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            public virtual method that Updates a DatabaseLog object into the datasource using a transaction.
            </summary>
            <param name="entity">DatabaseLog object to Update.</param>
            <remarks>After Updateing into the datasource, the DatabaseLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DatabaseLog entity = DatabaseLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DatabaseLogService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DatabaseLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DatabaseLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DatabaseLog.
             <code><![CDATA[
             TList<DatabaseLog> list = new TList<DatabaseLog>();
             DatabaseLog entity = new DatabaseLog();
             entity.StringProperty = "foo";
             DatabaseLog entity2 = new DatabaseLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DatabaseLogService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Save(Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            public virtual method that Saves a DatabaseLog object into the datasource using a transaction.
            </summary>
            <param name="entity">DatabaseLog object to Save.</param>
            <remarks>After Saveing into the datasource, the DatabaseLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DatabaseLog entity = DatabaseLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DatabaseLogService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DatabaseLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DatabaseLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DatabaseLog.
             <code><![CDATA[
             TList<DatabaseLog> list = new TList<DatabaseLog>();
             DatabaseLog entity = new DatabaseLog();
             entity.StringProperty = "foo";
             DatabaseLog entity2 = new DatabaseLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DatabaseLogService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Delete(Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            public virtual method that Deletes a DatabaseLog object into the datasource using a transaction.
            </summary>
            <param name="entity">DatabaseLog object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DatabaseLog object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DatabaseLog entity = DatabaseLogService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DatabaseLogService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DatabaseLog</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DatabaseLog</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DatabaseLog.
             <code><![CDATA[
             TList<DatabaseLog> list = new TList<DatabaseLog>();
             DatabaseLog entity = new DatabaseLog();
             entity.StringProperty = "foo";
             DatabaseLog entity2 = new DatabaseLog();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DatabaseLogService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Delete(Nettiers.AdventureWorks.Entities.DatabaseLogKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _databaseLogId
            </summary>
            <param name="_databaseLogId">DatabaseLog pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoadByDatabaseLogId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_databaseLogId">Primary key for DatabaseLog records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DatabaseLog Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DatabaseLog Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.DatabaseLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.DatabaseLog,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.DatabaseLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DatabaseLog Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.DatabaseLog,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DatabaseLog Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.DatabaseLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.DatabaseLog)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.DatabaseLog)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.DatabaseLog"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DatabaseLog Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.DatabaseLog,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DatabaseLog object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DatabaseLog Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DatabaseLog</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DatabaseLog} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.DatabaseLog},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DatabaseLog Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.DatabaseLogServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DatabaseLogService.#ctor">
            <summary>
            Initializes a new instance of the DatabaseLogService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase">
            <summary>
             An object representation of the 'CustomerAddress' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CustomerAddress.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.CreateCustomerAddress(System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> instance.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByAddressId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CustomerAddress_Address_AddressID key.
            	FK_CustomerAddress_Address_AddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns a generic collection of CustomerAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByAddressId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CustomerAddress_Address_AddressID key.
            	FK_CustomerAddress_Address_AddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByAddressTypeId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CustomerAddress_AddressType_AddressTypeID key.
            	FK_CustomerAddress_AddressType_AddressTypeID Description: Foreign key constraint referencing AddressType.AddressTypeID.
            </summary>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <returns>Returns a generic collection of CustomerAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByAddressTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CustomerAddress_AddressType_AddressTypeID key.
            	FK_CustomerAddress_AddressType_AddressTypeID Description: Foreign key constraint referencing AddressType.AddressTypeID.
            </summary>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByCustomerId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CustomerAddress_Customer_CustomerID key.
            	FK_CustomerAddress_Customer_CustomerID Description: Foreign key constraint referencing Customer.CustomerID.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <returns>Returns a generic collection of CustomerAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CustomerAddress_Customer_CustomerID key.
            	FK_CustomerAddress_Customer_CustomerID Description: Foreign key constraint referencing Customer.CustomerID.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Get(Nettiers.AdventureWorks.Entities.CustomerAddressKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CustomerAddress_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CustomerAddress_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByCustomerIdAddressId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CustomerAddress_CustomerID_AddressID index.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetByCustomerIdAddressId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CustomerAddress_CustomerID_AddressID index.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CustomerAddress} of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustomerAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            public virtual method that Inserts a CustomerAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerAddress object to Insert.</param>
            <remarks>After Inserting into the datasource, the CustomerAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CustomerAddress entity = new CustomerAddress();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CustomerAddressService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CustomerAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CustomerAddress.
             <code><![CDATA[
             TList<CustomerAddress> list = new TList<CustomerAddress>();
             CustomerAddress entity = new CustomerAddress();
             entity.StringProperty = "foo";
             CustomerAddress entity2 = new CustomerAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerAddressService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Update(Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            public virtual method that Updates a CustomerAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerAddress object to Update.</param>
            <remarks>After Updateing into the datasource, the CustomerAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CustomerAddress entity = CustomerAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CustomerAddressService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CustomerAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CustomerAddress.
             <code><![CDATA[
             TList<CustomerAddress> list = new TList<CustomerAddress>();
             CustomerAddress entity = new CustomerAddress();
             entity.StringProperty = "foo";
             CustomerAddress entity2 = new CustomerAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerAddressService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Save(Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            public virtual method that Saves a CustomerAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerAddress object to Save.</param>
            <remarks>After Saveing into the datasource, the CustomerAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CustomerAddress entity = CustomerAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CustomerAddressService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CustomerAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CustomerAddress.
             <code><![CDATA[
             TList<CustomerAddress> list = new TList<CustomerAddress>();
             CustomerAddress entity = new CustomerAddress();
             entity.StringProperty = "foo";
             CustomerAddress entity2 = new CustomerAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerAddressService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            public virtual method that Deletes a CustomerAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerAddress object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CustomerAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CustomerAddress entity = CustomerAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CustomerAddressService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CustomerAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CustomerAddress.
             <code><![CDATA[
             TList<CustomerAddress> list = new TList<CustomerAddress>();
             CustomerAddress entity = new CustomerAddress();
             entity.StringProperty = "foo";
             CustomerAddress entity2 = new CustomerAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerAddressService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.CustomerAddressKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _customerId, System.Int32 _addressId
            </summary>
            <param name="_customerId">CustomerAddress pk id.</param>
            <param name="_addressId">CustomerAddress pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustomerAddress Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoadByCustomerIdAddressId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_customerId">Primary key. Foreign key to Customer.CustomerID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustomerAddress Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CustomerAddress Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CustomerAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CustomerAddress,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CustomerAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CustomerAddress Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CustomerAddress,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustomerAddress Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CustomerAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CustomerAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CustomerAddress)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.CustomerAddress"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CustomerAddress Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CustomerAddress,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CustomerAddress object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CustomerAddress Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CustomerAddress</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CustomerAddress} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CustomerAddress},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CustomerAddress Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CustomerAddressServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CurrencyRateService">
            <summary>
            An component type implementation of the 'CurrencyRate' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase">
            <summary>
             An object representation of the 'CurrencyRate' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CurrencyRate.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.CreateCurrencyRate(System.DateTime,System.String,System.String,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> instance.
            </summary>
            <param name="_currencyRateDate">Date and time the exchange rate was obtained.</param>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <param name="_averageRate">Average exchange rate for the day.</param>
            <param name="_endOfDayRate">Final exchange rate for the day.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByFromCurrencyCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CurrencyRate_Currency_FromCurrencyCode key.
            	FK_CurrencyRate_Currency_FromCurrencyCode Description: Foreign key constraint referencing Currency.FromCurrencyCode.
            </summary>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <returns>Returns a generic collection of CurrencyRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByFromCurrencyCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CurrencyRate_Currency_FromCurrencyCode key.
            	FK_CurrencyRate_Currency_FromCurrencyCode Description: Foreign key constraint referencing Currency.FromCurrencyCode.
            </summary>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByToCurrencyCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CurrencyRate_Currency_ToCurrencyCode key.
            	FK_CurrencyRate_Currency_ToCurrencyCode Description: Foreign key constraint referencing Currency.ToCurrencyCode.
            </summary>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <returns>Returns a generic collection of CurrencyRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByToCurrencyCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CurrencyRate_Currency_ToCurrencyCode key.
            	FK_CurrencyRate_Currency_ToCurrencyCode Description: Foreign key constraint referencing Currency.ToCurrencyCode.
            </summary>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Get(Nettiers.AdventureWorks.Entities.CurrencyRateKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByCurrencyRateDateFromCurrencyCodeToCurrencyCode(System.DateTime,System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode index.
            </summary>
            <param name="_currencyRateDate">Date and time the exchange rate was obtained.</param>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByCurrencyRateDateFromCurrencyCodeToCurrencyCode(System.DateTime,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode index.
            </summary>
            <param name="_currencyRateDate">Date and time the exchange rate was obtained.</param>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByCurrencyRateId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CurrencyRate_CurrencyRateID index.
            </summary>
            <param name="_currencyRateId">Primary key for CurrencyRate records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetByCurrencyRateId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CurrencyRate_CurrencyRateID index.
            </summary>
            <param name="_currencyRateId">Primary key for CurrencyRate records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CurrencyRate} of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CurrencyRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Insert(Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            public virtual method that Inserts a CurrencyRate object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyRate object to Insert.</param>
            <remarks>After Inserting into the datasource, the CurrencyRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CurrencyRate entity = new CurrencyRate();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CurrencyRateService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CurrencyRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CurrencyRate.
             <code><![CDATA[
             TList<CurrencyRate> list = new TList<CurrencyRate>();
             CurrencyRate entity = new CurrencyRate();
             entity.StringProperty = "foo";
             CurrencyRate entity2 = new CurrencyRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyRateService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Update(Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            public virtual method that Updates a CurrencyRate object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyRate object to Update.</param>
            <remarks>After Updateing into the datasource, the CurrencyRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CurrencyRate entity = CurrencyRateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CurrencyRateService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CurrencyRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CurrencyRate.
             <code><![CDATA[
             TList<CurrencyRate> list = new TList<CurrencyRate>();
             CurrencyRate entity = new CurrencyRate();
             entity.StringProperty = "foo";
             CurrencyRate entity2 = new CurrencyRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyRateService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Save(Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            public virtual method that Saves a CurrencyRate object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyRate object to Save.</param>
            <remarks>After Saveing into the datasource, the CurrencyRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CurrencyRate entity = CurrencyRateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CurrencyRateService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CurrencyRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CurrencyRate.
             <code><![CDATA[
             TList<CurrencyRate> list = new TList<CurrencyRate>();
             CurrencyRate entity = new CurrencyRate();
             entity.StringProperty = "foo";
             CurrencyRate entity2 = new CurrencyRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyRateService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Delete(Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            public virtual method that Deletes a CurrencyRate object into the datasource using a transaction.
            </summary>
            <param name="entity">CurrencyRate object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CurrencyRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CurrencyRate entity = CurrencyRateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CurrencyRateService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CurrencyRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CurrencyRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CurrencyRate.
             <code><![CDATA[
             TList<CurrencyRate> list = new TList<CurrencyRate>();
             CurrencyRate entity = new CurrencyRate();
             entity.StringProperty = "foo";
             CurrencyRate entity2 = new CurrencyRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyRateService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Delete(Nettiers.AdventureWorks.Entities.CurrencyRateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _currencyRateId
            </summary>
            <param name="_currencyRateId">CurrencyRate pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoadByCurrencyRateDateFromCurrencyCodeToCurrencyCode(System.DateTime,System.String,System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_currencyRateDate">Date and time the exchange rate was obtained.</param>
            <param name="_fromCurrencyCode">Exchange rate was converted from this currency code.</param>
            <param name="_toCurrencyCode">Exchange rate was converted to this currency code.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CurrencyRate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoadByCurrencyRateId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_currencyRateId">Primary key for CurrencyRate records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CurrencyRate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CurrencyRate Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CurrencyRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CurrencyRate,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CurrencyRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CurrencyRate Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CurrencyRate,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CurrencyRate Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CurrencyRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CurrencyRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CurrencyRate)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.CurrencyRate"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CurrencyRate Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CurrencyRate,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CurrencyRate object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CurrencyRate Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CurrencyRate</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CurrencyRate} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CurrencyRate},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CurrencyRate Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CurrencyRateServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CurrencyRateService.#ctor">
            <summary>
            Initializes a new instance of the CurrencyRateService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CreditCardService">
            <summary>
            An component type implementation of the 'CreditCard' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CreditCardServiceBase">
            <summary>
             An object representation of the 'CreditCard' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CreditCard.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.CreateCreditCard(System.String,System.String,System.Byte,System.Int16,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> instance.
            </summary>
            <param name="_cardType">Credit card name.</param>
            <param name="_cardNumber">Credit card number.</param>
            <param name="_expMonth">Credit card expiration month.</param>
            <param name="_expYear">Credit card expiration year.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Get(Nettiers.AdventureWorks.Entities.CreditCardKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetByCardNumber(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CreditCard_CardNumber index.
            </summary>
            <param name="_cardNumber">Credit card number.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetByCardNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CreditCard_CardNumber index.
            </summary>
            <param name="_cardNumber">Credit card number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetByCreditCardId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CreditCard_CreditCardID index.
            </summary>
            <param name="_creditCardId">Primary key for CreditCard records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetByCreditCardId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CreditCard_CreditCardID index.
            </summary>
            <param name="_creditCardId">Primary key for CreditCard records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CreditCard} of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Insert(Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            public virtual method that Inserts a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Insert.</param>
            <remarks>After Inserting into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CreditCard entity = new CreditCard();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CreditCardService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Update(Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            public virtual method that Updates a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Update.</param>
            <remarks>After Updateing into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CreditCard entity = CreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CreditCardService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Save(Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            public virtual method that Saves a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Save.</param>
            <remarks>After Saveing into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CreditCard entity = CreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CreditCardService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Delete(Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            public virtual method that Deletes a CreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CreditCard object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CreditCard entity = CreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CreditCardService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CreditCard.
             <code><![CDATA[
             TList<CreditCard> list = new TList<CreditCard>();
             CreditCard entity = new CreditCard();
             entity.StringProperty = "foo";
             CreditCard entity2 = new CreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CreditCardService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Delete(Nettiers.AdventureWorks.Entities.CreditCardKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _creditCardId
            </summary>
            <param name="_creditCardId">CreditCard pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetByContactIdFromContactCreditCard(System.Int32)">
            <summary>
            	Gets CreditCard objects from the datasource by ContactID in the
            	ContactCreditCard table. Table CreditCard is related to table Contact
            	through the (M:N) relationship defined in the ContactCreditCard table.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns a typed collection of CreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.GetByContactIdFromContactCreditCard(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CreditCard objects from the datasource by ContactID in the
            	ContactCreditCard table. Table CreditCard is related to table Contact
            	through the (M:N) relationship defined in the ContactCreditCard table.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoadByCardNumber(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_cardNumber">Credit card number.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CreditCard Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoadByCreditCardId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_creditCardId">Primary key for CreditCard records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CreditCard Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CreditCard Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CreditCard,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CreditCard Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CreditCard,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CreditCard Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CreditCard)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.CreditCard"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CreditCard Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CreditCard,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CreditCard object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CreditCard Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CreditCard</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CreditCard} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CreditCard},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CreditCard Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CreditCardServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CreditCardService.#ctor">
            <summary>
            Initializes a new instance of the CreditCardService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CountryRegionService">
            <summary>
            An component type implementation of the 'CountryRegion' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CountryRegionServiceBase">
            <summary>
             An object representation of the 'CountryRegion' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CountryRegion.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.CreateCountryRegion(System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> instance.
            </summary>
            <param name="_countryRegionCode">ISO standard code for countries and regions.</param>
            <param name="_name">Country or region name.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Get(Nettiers.AdventureWorks.Entities.CountryRegionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CountryRegion_Name index.
            </summary>
            <param name="_name">Country or region name.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_CountryRegion_Name index.
            </summary>
            <param name="_name">Country or region name.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetByCountryRegionCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CountryRegion_CountryRegionCode index.
            </summary>
            <param name="_countryRegionCode">ISO standard code for countries and regions.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetByCountryRegionCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CountryRegion_CountryRegionCode index.
            </summary>
            <param name="_countryRegionCode">ISO standard code for countries and regions.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CountryRegion} of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Insert(Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            public virtual method that Inserts a CountryRegion object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegion object to Insert.</param>
            <remarks>After Inserting into the datasource, the CountryRegion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CountryRegion entity = new CountryRegion();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CountryRegionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CountryRegion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CountryRegion.
             <code><![CDATA[
             TList<CountryRegion> list = new TList<CountryRegion>();
             CountryRegion entity = new CountryRegion();
             entity.StringProperty = "foo";
             CountryRegion entity2 = new CountryRegion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Update(Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            public virtual method that Updates a CountryRegion object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegion object to Update.</param>
            <remarks>After Updateing into the datasource, the CountryRegion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CountryRegion entity = CountryRegionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CountryRegionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CountryRegion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CountryRegion.
             <code><![CDATA[
             TList<CountryRegion> list = new TList<CountryRegion>();
             CountryRegion entity = new CountryRegion();
             entity.StringProperty = "foo";
             CountryRegion entity2 = new CountryRegion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Save(Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            public virtual method that Saves a CountryRegion object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegion object to Save.</param>
            <remarks>After Saveing into the datasource, the CountryRegion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CountryRegion entity = CountryRegionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CountryRegionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CountryRegion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CountryRegion.
             <code><![CDATA[
             TList<CountryRegion> list = new TList<CountryRegion>();
             CountryRegion entity = new CountryRegion();
             entity.StringProperty = "foo";
             CountryRegion entity2 = new CountryRegion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Delete(Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            public virtual method that Deletes a CountryRegion object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegion object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CountryRegion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CountryRegion entity = CountryRegionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CountryRegionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CountryRegion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CountryRegion.
             <code><![CDATA[
             TList<CountryRegion> list = new TList<CountryRegion>();
             CountryRegion entity = new CountryRegion();
             entity.StringProperty = "foo";
             CountryRegion entity2 = new CountryRegion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Delete(Nettiers.AdventureWorks.Entities.CountryRegionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _countryRegionCode
            </summary>
            <param name="_countryRegionCode">CountryRegion pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetByCurrencyCodeFromCountryRegionCurrency(System.String)">
            <summary>
            	Gets CountryRegion objects from the datasource by CurrencyCode in the
            	CountryRegionCurrency table. Table CountryRegion is related to table Currency
            	through the (M:N) relationship defined in the CountryRegionCurrency table.
            </summary>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <returns>Returns a typed collection of CountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.GetByCurrencyCodeFromCountryRegionCurrency(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CountryRegion objects from the datasource by CurrencyCode in the
            	CountryRegionCurrency table. Table CountryRegion is related to table Currency
            	through the (M:N) relationship defined in the CountryRegionCurrency table.
            </summary>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CountryRegion objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Country or region name.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CountryRegion Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoadByCountryRegionCode(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_countryRegionCode">ISO standard code for countries and regions.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CountryRegion Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CountryRegion Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegion,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CountryRegion Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegion,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CountryRegion Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CountryRegion)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegion"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CountryRegion Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CountryRegion,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CountryRegion object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CountryRegion Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CountryRegion</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CountryRegion} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegion},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CountryRegion Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CountryRegionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionService.#ctor">
            <summary>
            Initializes a new instance of the CountryRegionService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase">
            <summary>
             An object representation of the 'ContactCreditCard' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ContactCreditCard.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.CreateContactCreditCard(System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> instance.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetByContactId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ContactCreditCard_Contact_ContactID key.
            	FK_ContactCreditCard_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns a generic collection of ContactCreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetByContactId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ContactCreditCard_Contact_ContactID key.
            	FK_ContactCreditCard_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetByCreditCardId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ContactCreditCard_CreditCard_CreditCardID key.
            	FK_ContactCreditCard_CreditCard_CreditCardID Description: Foreign key constraint referencing CreditCard.CreditCardID.
            </summary>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <returns>Returns a generic collection of ContactCreditCard objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetByCreditCardId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ContactCreditCard_CreditCard_CreditCardID key.
            	FK_ContactCreditCard_CreditCard_CreditCardID Description: Foreign key constraint referencing CreditCard.CreditCardID.
            </summary>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Get(Nettiers.AdventureWorks.Entities.ContactCreditCardKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetByContactIdCreditCardId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ContactCreditCard_ContactID_CreditCardID index.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetByContactIdCreditCardId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ContactCreditCard_ContactID_CreditCardID index.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ContactCreditCard} of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ContactCreditCard</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Insert(Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            public virtual method that Inserts a ContactCreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactCreditCard object to Insert.</param>
            <remarks>After Inserting into the datasource, the ContactCreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ContactCreditCard entity = new ContactCreditCard();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContactCreditCardService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactCreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ContactCreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ContactCreditCard.
             <code><![CDATA[
             TList<ContactCreditCard> list = new TList<ContactCreditCard>();
             ContactCreditCard entity = new ContactCreditCard();
             entity.StringProperty = "foo";
             ContactCreditCard entity2 = new ContactCreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactCreditCardService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Update(Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            public virtual method that Updates a ContactCreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactCreditCard object to Update.</param>
            <remarks>After Updateing into the datasource, the ContactCreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ContactCreditCard entity = ContactCreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContactCreditCardService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactCreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ContactCreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ContactCreditCard.
             <code><![CDATA[
             TList<ContactCreditCard> list = new TList<ContactCreditCard>();
             ContactCreditCard entity = new ContactCreditCard();
             entity.StringProperty = "foo";
             ContactCreditCard entity2 = new ContactCreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactCreditCardService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Save(Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            public virtual method that Saves a ContactCreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactCreditCard object to Save.</param>
            <remarks>After Saveing into the datasource, the ContactCreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ContactCreditCard entity = ContactCreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContactCreditCardService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactCreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ContactCreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ContactCreditCard.
             <code><![CDATA[
             TList<ContactCreditCard> list = new TList<ContactCreditCard>();
             ContactCreditCard entity = new ContactCreditCard();
             entity.StringProperty = "foo";
             ContactCreditCard entity2 = new ContactCreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactCreditCardService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Delete(Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            public virtual method that Deletes a ContactCreditCard object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactCreditCard object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ContactCreditCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ContactCreditCard entity = ContactCreditCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContactCreditCardService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactCreditCard</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ContactCreditCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ContactCreditCard.
             <code><![CDATA[
             TList<ContactCreditCard> list = new TList<ContactCreditCard>();
             ContactCreditCard entity = new ContactCreditCard();
             entity.StringProperty = "foo";
             ContactCreditCard entity2 = new ContactCreditCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactCreditCardService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Delete(Nettiers.AdventureWorks.Entities.ContactCreditCardKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _contactId, System.Int32 _creditCardId
            </summary>
            <param name="_contactId">ContactCreditCard pk id.</param>
            <param name="_creditCardId">ContactCreditCard pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoadByContactIdCreditCardId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_contactId">Customer identification number. Foreign key to Contact.ContactID.</param>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContactCreditCard Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ContactCreditCard Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactCreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactCreditCard,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactCreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ContactCreditCard Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactCreditCard,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContactCreditCard Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactCreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactCreditCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ContactCreditCard)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ContactCreditCard"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ContactCreditCard Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ContactCreditCard,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ContactCreditCard object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ContactCreditCard Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ContactCreditCard</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ContactCreditCard} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactCreditCard},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ContactCreditCard Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ContactCreditCardServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ContactCreditCardService">
            <summary>
            An component type implementation of the 'ContactCreditCard' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactCreditCardService.#ctor">
            <summary>
            Initializes a new instance of the ContactCreditCardService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DomainUtil.GetErrorsFromList``1(Nettiers.AdventureWorks.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VJobCandidateEducationService">
            <summary>
             An component type implementation of the 'vJobCandidateEducation' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase">
            <summary>
             An object representation of the 'vJobCandidateEducation' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VJobCandidateEducation.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEducation"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEducation"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.CreateVJobCandidateEducation(System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEducation"/> instance.
            </summary>
            <param name="_jobCandidateId"></param>
            <param name="_safeNameEduLevel"></param>
            <param name="_safeNameEduStartDate"></param>
            <param name="_safeNameEduEndDate"></param>
            <param name="_safeNameEduDegree"></param>
            <param name="_safeNameEduMajor"></param>
            <param name="_safeNameEduMinor"></param>
            <param name="_safeNameEduGpa"></param>
            <param name="_safeNameEduGpaScale"></param>
            <param name="_safeNameEduSchool"></param>
            <param name="_safeNameEduLocCountryRegion"></param>
            <param name="_safeNameEduLocState"></param>
            <param name="_safeNameEduLocCity"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VJobCandidateEducation} of <c>VJobCandidateEducation</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEducation"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEducation"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidateEducation</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidateEducation</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidateEducation</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VJobCandidateEducation</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VJobCandidateEducation</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VJobCandidateEducation</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEducationService.#ctor">
            <summary>
            Initializes a new instance of the VJobCandidateEducationService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VIndividualDemographicsService">
            <summary>
             An component type implementation of the 'vIndividualDemographics' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualDemographicsService.#ctor">
            <summary>
            Initializes a new instance of the VIndividualDemographicsService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SpecialOfferProductService">
            <summary>
            An component type implementation of the 'SpecialOfferProduct' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferProductService.#ctor">
            <summary>
            Initializes a new instance of the SpecialOfferProductService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SpecialOfferService">
            <summary>
            An component type implementation of the 'SpecialOffer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase">
            <summary>
             An object representation of the 'SpecialOffer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SpecialOffer.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.CreateSpecialOffer(System.String,System.Decimal,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Nullable{System.Int32},System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> instance.
            </summary>
            <param name="_description">Discount description.</param>
            <param name="_discountPct">Discount precentage.</param>
            <param name="_type">Discount type category.</param>
            <param name="_category">Group the discount applies to such as Reseller or Customer.</param>
            <param name="_startDate">Discount start date.</param>
            <param name="_endDate">Discount end date.</param>
            <param name="_minQty">Minimum discount percent allowed.</param>
            <param name="_maxQty">Maximum discount percent allowed.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Get(Nettiers.AdventureWorks.Entities.SpecialOfferKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SpecialOffer_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SpecialOffer_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetBySpecialOfferId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SpecialOffer_SpecialOfferID index.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOffer records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetBySpecialOfferId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SpecialOffer_SpecialOfferID index.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOffer records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SpecialOffer} of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SpecialOffer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Insert(Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            public virtual method that Inserts a SpecialOffer object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOffer object to Insert.</param>
            <remarks>After Inserting into the datasource, the SpecialOffer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SpecialOffer entity = new SpecialOffer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SpecialOfferService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOffer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SpecialOffer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SpecialOffer.
             <code><![CDATA[
             TList<SpecialOffer> list = new TList<SpecialOffer>();
             SpecialOffer entity = new SpecialOffer();
             entity.StringProperty = "foo";
             SpecialOffer entity2 = new SpecialOffer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Update(Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            public virtual method that Updates a SpecialOffer object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOffer object to Update.</param>
            <remarks>After Updateing into the datasource, the SpecialOffer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SpecialOffer entity = SpecialOfferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SpecialOfferService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOffer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SpecialOffer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SpecialOffer.
             <code><![CDATA[
             TList<SpecialOffer> list = new TList<SpecialOffer>();
             SpecialOffer entity = new SpecialOffer();
             entity.StringProperty = "foo";
             SpecialOffer entity2 = new SpecialOffer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Save(Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            public virtual method that Saves a SpecialOffer object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOffer object to Save.</param>
            <remarks>After Saveing into the datasource, the SpecialOffer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SpecialOffer entity = SpecialOfferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SpecialOfferService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOffer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SpecialOffer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SpecialOffer.
             <code><![CDATA[
             TList<SpecialOffer> list = new TList<SpecialOffer>();
             SpecialOffer entity = new SpecialOffer();
             entity.StringProperty = "foo";
             SpecialOffer entity2 = new SpecialOffer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Delete(Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            public virtual method that Deletes a SpecialOffer object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialOffer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SpecialOffer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SpecialOffer entity = SpecialOfferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SpecialOfferService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialOffer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SpecialOffer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SpecialOffer.
             <code><![CDATA[
             TList<SpecialOffer> list = new TList<SpecialOffer>();
             SpecialOffer entity = new SpecialOffer();
             entity.StringProperty = "foo";
             SpecialOffer entity2 = new SpecialOffer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialOfferService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Delete(Nettiers.AdventureWorks.Entities.SpecialOfferKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _specialOfferId
            </summary>
            <param name="_specialOfferId">SpecialOffer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetByProductIdFromSpecialOfferProduct(System.Int32)">
            <summary>
            	Gets SpecialOffer objects from the datasource by ProductID in the
            	SpecialOfferProduct table. Table SpecialOffer is related to table Product
            	through the (M:N) relationship defined in the SpecialOfferProduct table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a typed collection of SpecialOffer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.GetByProductIdFromSpecialOfferProduct(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SpecialOffer objects from the datasource by ProductID in the
            	SpecialOfferProduct table. Table SpecialOffer is related to table Product
            	through the (M:N) relationship defined in the SpecialOfferProduct table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SpecialOffer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SpecialOffer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoadBySpecialOfferId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOffer records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SpecialOffer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SpecialOffer Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOffer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOffer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOffer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SpecialOffer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOffer,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SpecialOffer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOffer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SpecialOffer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SpecialOffer)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SpecialOffer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SpecialOffer Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SpecialOffer,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SpecialOffer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SpecialOffer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SpecialOffer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SpecialOffer} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SpecialOffer},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SpecialOffer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SpecialOfferServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SpecialOfferService.#ctor">
            <summary>
            Initializes a new instance of the SpecialOfferService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase">
            <summary>
             An object representation of the 'ShoppingCartItem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ShoppingCartItem.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.CreateShoppingCartItem(System.String,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> instance.
            </summary>
            <param name="_shoppingCartId">Shopping cart identification number.</param>
            <param name="_quantity">Product quantity ordered.</param>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <param name="_dateCreated">Date the time the record was created.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ShoppingCartItem_Product_ProductID key.
            	FK_ShoppingCartItem_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of ShoppingCartItem objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ShoppingCartItem_Product_ProductID key.
            	FK_ShoppingCartItem_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Get(Nettiers.AdventureWorks.Entities.ShoppingCartItemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetByShoppingCartIdProductId(System.String,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ShoppingCartItem_ShoppingCartID_ProductID index.
            </summary>
            <param name="_shoppingCartId">Shopping cart identification number.</param>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetByShoppingCartIdProductId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_ShoppingCartItem_ShoppingCartID_ProductID index.
            </summary>
            <param name="_shoppingCartId">Shopping cart identification number.</param>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetByShoppingCartItemId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ShoppingCartItem_ShoppingCartItemID index.
            </summary>
            <param name="_shoppingCartItemId">Primary key for ShoppingCartItem records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetByShoppingCartItemId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ShoppingCartItem_ShoppingCartItemID index.
            </summary>
            <param name="_shoppingCartItemId">Primary key for ShoppingCartItem records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ShoppingCartItem} of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShoppingCartItem</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Insert(Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            public virtual method that Inserts a ShoppingCartItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ShoppingCartItem object to Insert.</param>
            <remarks>After Inserting into the datasource, the ShoppingCartItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ShoppingCartItem entity = new ShoppingCartItem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShoppingCartItemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShoppingCartItem</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ShoppingCartItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ShoppingCartItem.
             <code><![CDATA[
             TList<ShoppingCartItem> list = new TList<ShoppingCartItem>();
             ShoppingCartItem entity = new ShoppingCartItem();
             entity.StringProperty = "foo";
             ShoppingCartItem entity2 = new ShoppingCartItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShoppingCartItemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Update(Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            public virtual method that Updates a ShoppingCartItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ShoppingCartItem object to Update.</param>
            <remarks>After Updateing into the datasource, the ShoppingCartItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ShoppingCartItem entity = ShoppingCartItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShoppingCartItemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShoppingCartItem</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ShoppingCartItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ShoppingCartItem.
             <code><![CDATA[
             TList<ShoppingCartItem> list = new TList<ShoppingCartItem>();
             ShoppingCartItem entity = new ShoppingCartItem();
             entity.StringProperty = "foo";
             ShoppingCartItem entity2 = new ShoppingCartItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShoppingCartItemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Save(Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            public virtual method that Saves a ShoppingCartItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ShoppingCartItem object to Save.</param>
            <remarks>After Saveing into the datasource, the ShoppingCartItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ShoppingCartItem entity = ShoppingCartItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShoppingCartItemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShoppingCartItem</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ShoppingCartItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ShoppingCartItem.
             <code><![CDATA[
             TList<ShoppingCartItem> list = new TList<ShoppingCartItem>();
             ShoppingCartItem entity = new ShoppingCartItem();
             entity.StringProperty = "foo";
             ShoppingCartItem entity2 = new ShoppingCartItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShoppingCartItemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Delete(Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            public virtual method that Deletes a ShoppingCartItem object into the datasource using a transaction.
            </summary>
            <param name="entity">ShoppingCartItem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ShoppingCartItem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ShoppingCartItem entity = ShoppingCartItemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShoppingCartItemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShoppingCartItem</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ShoppingCartItem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ShoppingCartItem.
             <code><![CDATA[
             TList<ShoppingCartItem> list = new TList<ShoppingCartItem>();
             ShoppingCartItem entity = new ShoppingCartItem();
             entity.StringProperty = "foo";
             ShoppingCartItem entity2 = new ShoppingCartItem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShoppingCartItemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Delete(Nettiers.AdventureWorks.Entities.ShoppingCartItemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _shoppingCartItemId
            </summary>
            <param name="_shoppingCartItemId">ShoppingCartItem pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoadByShoppingCartIdProductId(System.String,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_shoppingCartId">Shopping cart identification number.</param>
            <param name="_productId">Product ordered. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShoppingCartItem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoadByShoppingCartItemId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_shoppingCartItemId">Primary key for ShoppingCartItem records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShoppingCartItem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ShoppingCartItem Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShoppingCartItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShoppingCartItem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShoppingCartItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ShoppingCartItem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShoppingCartItem,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShoppingCartItem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShoppingCartItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShoppingCartItem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ShoppingCartItem)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ShoppingCartItem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ShoppingCartItem Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ShoppingCartItem,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ShoppingCartItem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ShoppingCartItem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ShoppingCartItem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ShoppingCartItem} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShoppingCartItem},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ShoppingCartItem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ShoppingCartItemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VSalesPersonService">
            <summary>
             An component type implementation of the 'vSalesPerson' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase">
            <summary>
             An object representation of the 'vSalesPerson' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VSalesPerson.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPerson"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPerson"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.CreateVSalesPerson(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPerson"/> instance.
            </summary>
            <param name="_salesPersonId"></param>
            <param name="_title"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_suffix"></param>
            <param name="_jobTitle"></param>
            <param name="_phone"></param>
            <param name="_emailAddress"></param>
            <param name="_emailPromotion"></param>
            <param name="_addressLine1"></param>
            <param name="_addressLine2"></param>
            <param name="_city"></param>
            <param name="_stateProvinceName"></param>
            <param name="_postalCode"></param>
            <param name="_countryRegionName"></param>
            <param name="_territoryName"></param>
            <param name="_territoryGroup"></param>
            <param name="_salesQuota"></param>
            <param name="_salesYtd"></param>
            <param name="_salesLastYear"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VSalesPerson} of <c>VSalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPerson"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VSalesPerson"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VSalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VSalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VSalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VSalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VSalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VSalesPerson</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VSalesPersonService.#ctor">
            <summary>
            Initializes a new instance of the VSalesPersonService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase">
            <summary>
             An object representation of the 'vProductModelInstructions' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VProductModelInstructions.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelInstructions"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelInstructions"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.CreateVProductModelInstructions(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Guid,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelInstructions"/> instance.
            </summary>
            <param name="_productModelId"></param>
            <param name="_name"></param>
            <param name="_instructions"></param>
            <param name="_locationId"></param>
            <param name="_setupHours"></param>
            <param name="_machineHours"></param>
            <param name="_laborHours"></param>
            <param name="_lotSize"></param>
            <param name="_step"></param>
            <param name="_rowguid"></param>
            <param name="_modifiedDate"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VProductModelInstructions} of <c>VProductModelInstructions</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelInstructions"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VProductModelInstructions"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductModelInstructions</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductModelInstructions</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductModelInstructions</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VProductModelInstructions</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VProductModelInstructions</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VProductModelInstructions</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase">
            <summary>
             An object representation of the 'vJobCandidateEmployment' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VJobCandidateEmployment.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEmployment"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEmployment"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.CreateVJobCandidateEmployment(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEmployment"/> instance.
            </summary>
            <param name="_jobCandidateId"></param>
            <param name="_safeNameEmpStartDate"></param>
            <param name="_safeNameEmpEndDate"></param>
            <param name="_safeNameEmpOrgName"></param>
            <param name="_safeNameEmpJobTitle"></param>
            <param name="_safeNameEmpResponsibility"></param>
            <param name="_safeNameEmpFunctionCategory"></param>
            <param name="_safeNameEmpIndustryCategory"></param>
            <param name="_safeNameEmpLocCountryRegion"></param>
            <param name="_safeNameEmpLocState"></param>
            <param name="_safeNameEmpLocCity"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VJobCandidateEmployment} of <c>VJobCandidateEmployment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEmployment"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VJobCandidateEmployment"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidateEmployment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidateEmployment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VJobCandidateEmployment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VJobCandidateEmployment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VJobCandidateEmployment</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VJobCandidateEmployment</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase">
            <summary>
             An object representation of the 'vIndividualCustomer' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VIndividualCustomer.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualCustomer"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualCustomer"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.CreateVIndividualCustomer(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualCustomer"/> instance.
            </summary>
            <param name="_customerId"></param>
            <param name="_title"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_suffix"></param>
            <param name="_phone"></param>
            <param name="_emailAddress"></param>
            <param name="_emailPromotion"></param>
            <param name="_addressType"></param>
            <param name="_addressLine1"></param>
            <param name="_addressLine2"></param>
            <param name="_city"></param>
            <param name="_stateProvinceName"></param>
            <param name="_postalCode"></param>
            <param name="_countryRegionName"></param>
            <param name="_demographics"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VIndividualCustomer} of <c>VIndividualCustomer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualCustomer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VIndividualCustomer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VIndividualCustomer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VIndividualCustomer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VIndividualCustomer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VIndividualCustomer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VIndividualCustomer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VIndividualCustomer</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VAdditionalContactInfoService">
            <summary>
             An component type implementation of the 'vAdditionalContactInfo' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase">
            <summary>
             An object representation of the 'vAdditionalContactInfo' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VAdditionalContactInfo.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VAdditionalContactInfo"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VAdditionalContactInfo"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.CreateVAdditionalContactInfo(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Guid,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VAdditionalContactInfo"/> instance.
            </summary>
            <param name="_contactId"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_telephoneNumber"></param>
            <param name="_telephoneSpecialInstructions"></param>
            <param name="_street"></param>
            <param name="_city"></param>
            <param name="_stateProvince"></param>
            <param name="_postalCode"></param>
            <param name="_countryRegion"></param>
            <param name="_homeAddressSpecialInstructions"></param>
            <param name="_emailAddress"></param>
            <param name="_emailSpecialInstructions"></param>
            <param name="_emailTelephoneNumber"></param>
            <param name="_rowguid"></param>
            <param name="_modifiedDate"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VAdditionalContactInfo} of <c>VAdditionalContactInfo</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VAdditionalContactInfo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VAdditionalContactInfo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VAdditionalContactInfo</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VAdditionalContactInfo</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VAdditionalContactInfo</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VAdditionalContactInfo</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VAdditionalContactInfo</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VAdditionalContactInfo</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VAdditionalContactInfoService.#ctor">
            <summary>
            Initializes a new instance of the VAdditionalContactInfoService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VendorAddressService">
            <summary>
            An component type implementation of the 'VendorAddress' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VendorAddressServiceBase">
            <summary>
             An object representation of the 'VendorAddress' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VendorAddress.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.CreateVendorAddress(System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> instance.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByAddressTypeId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_VendorAddress_AddressType_AddressTypeID key.
            	FK_VendorAddress_AddressType_AddressTypeID Description: Foreign key constraint referencing AddressType.AddressTypeID.
            </summary>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <returns>Returns a generic collection of VendorAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByAddressTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_VendorAddress_AddressType_AddressTypeID key.
            	FK_VendorAddress_AddressType_AddressTypeID Description: Foreign key constraint referencing AddressType.AddressTypeID.
            </summary>
            <param name="_addressTypeId">Address type. Foreign key to AddressType.AddressTypeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByVendorId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_VendorAddress_Vendor_VendorID key.
            	FK_VendorAddress_Vendor_VendorID Description: Foreign key constraint referencing Vendor.VendorID.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <returns>Returns a generic collection of VendorAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByVendorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_VendorAddress_Vendor_VendorID key.
            	FK_VendorAddress_Vendor_VendorID Description: Foreign key constraint referencing Vendor.VendorID.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Get(Nettiers.AdventureWorks.Entities.VendorAddressKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByAddressId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_VendorAddress_AddressID index.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByAddressId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_VendorAddress_AddressID index.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByVendorIdAddressId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_VendorAddress_VendorID_AddressID index.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetByVendorIdAddressId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_VendorAddress_VendorID_AddressID index.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VendorAddress} of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VendorAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            public virtual method that Inserts a VendorAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorAddress object to Insert.</param>
            <remarks>After Inserting into the datasource, the VendorAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            VendorAddress entity = new VendorAddress();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	VendorAddressService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>VendorAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of VendorAddress.
             <code><![CDATA[
             TList<VendorAddress> list = new TList<VendorAddress>();
             VendorAddress entity = new VendorAddress();
             entity.StringProperty = "foo";
             VendorAddress entity2 = new VendorAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorAddressService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Update(Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            public virtual method that Updates a VendorAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorAddress object to Update.</param>
            <remarks>After Updateing into the datasource, the VendorAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            VendorAddress entity = VendorAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	VendorAddressService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>VendorAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of VendorAddress.
             <code><![CDATA[
             TList<VendorAddress> list = new TList<VendorAddress>();
             VendorAddress entity = new VendorAddress();
             entity.StringProperty = "foo";
             VendorAddress entity2 = new VendorAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorAddressService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Save(Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            public virtual method that Saves a VendorAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorAddress object to Save.</param>
            <remarks>After Saveing into the datasource, the VendorAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            VendorAddress entity = VendorAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	VendorAddressService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>VendorAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of VendorAddress.
             <code><![CDATA[
             TList<VendorAddress> list = new TList<VendorAddress>();
             VendorAddress entity = new VendorAddress();
             entity.StringProperty = "foo";
             VendorAddress entity2 = new VendorAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorAddressService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            public virtual method that Deletes a VendorAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">VendorAddress object to Delete.</param>
            <remarks>After Deleteing into the datasource, the VendorAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            VendorAddress entity = VendorAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	VendorAddressService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>VendorAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>VendorAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of VendorAddress.
             <code><![CDATA[
             TList<VendorAddress> list = new TList<VendorAddress>();
             VendorAddress entity = new VendorAddress();
             entity.StringProperty = "foo";
             VendorAddress entity2 = new VendorAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorAddressService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.VendorAddressKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _vendorId, System.Int32 _addressId
            </summary>
            <param name="_vendorId">VendorAddress pk id.</param>
            <param name="_addressId">VendorAddress pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoadByAddressId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">VendorAddress Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoadByVendorIdAddressId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">VendorAddress Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">VendorAddress Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorAddress,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">VendorAddress Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorAddress,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">VendorAddress Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.VendorAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.VendorAddress)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.VendorAddress"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">VendorAddress Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.VendorAddress,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the VendorAddress object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">VendorAddress Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>VendorAddress</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{VendorAddress} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.VendorAddress},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">VendorAddress Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.VendorAddressServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorAddressService.#ctor">
            <summary>
            Initializes a new instance of the VendorAddressService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ShoppingCartItemService">
            <summary>
            An component type implementation of the 'ShoppingCartItem' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShoppingCartItemService.#ctor">
            <summary>
            Initializes a new instance of the ShoppingCartItemService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesReasonServiceBase">
            <summary>
             An object representation of the 'SalesReason' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesReason.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.CreateSalesReason(System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> instance.
            </summary>
            <param name="_name">Sales reason description.</param>
            <param name="_reasonType">Category the sales reason belongs to.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesReasonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetBySalesReasonId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesReason_SalesReasonID index.
            </summary>
            <param name="_salesReasonId">Primary key for SalesReason records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetBySalesReasonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesReason_SalesReasonID index.
            </summary>
            <param name="_salesReasonId">Primary key for SalesReason records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesReason} of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesReason</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            public virtual method that Inserts a SalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesReason object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesReason entity = new SalesReason();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesReasonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesReason.
             <code><![CDATA[
             TList<SalesReason> list = new TList<SalesReason>();
             SalesReason entity = new SalesReason();
             entity.StringProperty = "foo";
             SalesReason entity2 = new SalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesReasonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            public virtual method that Updates a SalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesReason object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesReason entity = SalesReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesReasonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesReason.
             <code><![CDATA[
             TList<SalesReason> list = new TList<SalesReason>();
             SalesReason entity = new SalesReason();
             entity.StringProperty = "foo";
             SalesReason entity2 = new SalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesReasonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            public virtual method that Saves a SalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesReason object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesReason entity = SalesReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesReasonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesReason.
             <code><![CDATA[
             TList<SalesReason> list = new TList<SalesReason>();
             SalesReason entity = new SalesReason();
             entity.StringProperty = "foo";
             SalesReason entity2 = new SalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesReasonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            public virtual method that Deletes a SalesReason object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesReason object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesReason entity = SalesReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesReasonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesReason</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesReason.
             <code><![CDATA[
             TList<SalesReason> list = new TList<SalesReason>();
             SalesReason entity = new SalesReason();
             entity.StringProperty = "foo";
             SalesReason entity2 = new SalesReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesReasonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesReasonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesReasonId
            </summary>
            <param name="_salesReasonId">SalesReason pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetBySalesOrderIdFromSalesOrderHeaderSalesReason(System.Int32)">
            <summary>
            	Gets SalesReason objects from the datasource by SalesOrderID in the
            	SalesOrderHeaderSalesReason table. Table SalesReason is related to table SalesOrderHeader
            	through the (M:N) relationship defined in the SalesOrderHeaderSalesReason table.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <returns>Returns a typed collection of SalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.GetBySalesOrderIdFromSalesOrderHeaderSalesReason(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SalesReason objects from the datasource by SalesOrderID in the
            	SalesOrderHeaderSalesReason table. Table SalesReason is related to table SalesOrderHeader
            	through the (M:N) relationship defined in the SalesOrderHeaderSalesReason table.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesReason objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoadBySalesReasonId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesReasonId">Primary key for SalesReason records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesReason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesReason Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesReason,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesReason Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesReason,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesReason Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesReason)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesReason"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesReason Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesReason,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesReason object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesReason Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesReason</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesReason} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesReason},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesReason Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesReasonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase">
            <summary>
             An object representation of the 'ProductProductPhoto' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductProductPhoto.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.CreateProductProductPhoto(System.Int32,System.Int32,System.Boolean,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="_primary">0 = Photo is not the principal image. 1 = Photo is the principal image.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductProductPhoto_Product_ProductID key.
            	FK_ProductProductPhoto_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of ProductProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductProductPhoto_Product_ProductID key.
            	FK_ProductProductPhoto_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetByProductPhotoId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductProductPhoto_ProductPhoto_ProductPhotoID key.
            	FK_ProductProductPhoto_ProductPhoto_ProductPhotoID Description: Foreign key constraint referencing ProductPhoto.ProductPhotoID.
            </summary>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <returns>Returns a generic collection of ProductProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetByProductPhotoId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductProductPhoto_ProductPhoto_ProductPhotoID key.
            	FK_ProductProductPhoto_ProductPhoto_ProductPhotoID Description: Foreign key constraint referencing ProductPhoto.ProductPhotoID.
            </summary>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductProductPhotoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetByProductIdProductPhotoId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductProductPhoto_ProductID_ProductPhotoID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetByProductIdProductPhotoId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductProductPhoto_ProductID_ProductPhotoID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductProductPhoto} of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            public virtual method that Inserts a ProductProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductProductPhoto object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductProductPhoto entity = new ProductProductPhoto();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductProductPhotoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductProductPhoto.
             <code><![CDATA[
             TList<ProductProductPhoto> list = new TList<ProductProductPhoto>();
             ProductProductPhoto entity = new ProductProductPhoto();
             entity.StringProperty = "foo";
             ProductProductPhoto entity2 = new ProductProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductProductPhotoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            public virtual method that Updates a ProductProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductProductPhoto object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductProductPhoto entity = ProductProductPhotoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductProductPhotoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductProductPhoto.
             <code><![CDATA[
             TList<ProductProductPhoto> list = new TList<ProductProductPhoto>();
             ProductProductPhoto entity = new ProductProductPhoto();
             entity.StringProperty = "foo";
             ProductProductPhoto entity2 = new ProductProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductProductPhotoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            public virtual method that Saves a ProductProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductProductPhoto object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductProductPhoto entity = ProductProductPhotoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductProductPhotoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductProductPhoto.
             <code><![CDATA[
             TList<ProductProductPhoto> list = new TList<ProductProductPhoto>();
             ProductProductPhoto entity = new ProductProductPhoto();
             entity.StringProperty = "foo";
             ProductProductPhoto entity2 = new ProductProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductProductPhotoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            public virtual method that Deletes a ProductProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductProductPhoto object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductProductPhoto entity = ProductProductPhotoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductProductPhotoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductProductPhoto.
             <code><![CDATA[
             TList<ProductProductPhoto> list = new TList<ProductProductPhoto>();
             ProductProductPhoto entity = new ProductProductPhoto();
             entity.StringProperty = "foo";
             ProductProductPhoto entity2 = new ProductProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductProductPhotoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductProductPhotoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productId, System.Int32 _productPhotoId
            </summary>
            <param name="_productId">ProductProductPhoto pk id.</param>
            <param name="_productPhotoId">ProductProductPhoto pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoadByProductIdProductPhotoId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductProductPhoto Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductProductPhoto Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductProductPhoto,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductProductPhoto Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductProductPhoto,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductProductPhoto Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductProductPhoto)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductProductPhoto"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductProductPhoto Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductProductPhoto,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductProductPhoto object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductProductPhoto Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductProductPhoto</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductProductPhoto} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductProductPhoto},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductProductPhoto Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductProductPhotoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CustomerService">
            <summary>
            An component type implementation of the 'Customer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CustomerServiceBase">
            <summary>
             An object representation of the 'Customer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Customer.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.CreateCustomer(System.Nullable{System.Int32},System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> instance.
            </summary>
            <param name="_territoryId">ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="_customerType">Customer type: I = Individual, S = Store</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Get(Nettiers.AdventureWorks.Entities.CustomerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByAccountNumber(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Customer_AccountNumber index.
            </summary>
            <param name="_accountNumber">Unique number identifying the customer assigned by the accounting system.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByAccountNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Customer_AccountNumber index.
            </summary>
            <param name="_accountNumber">Unique number identifying the customer assigned by the accounting system.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Customer_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Customer_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByTerritoryId(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Customer_TerritoryID index.
            </summary>
            <param name="_territoryId">ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByTerritoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Customer_TerritoryID index.
            </summary>
            <param name="_territoryId">ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByCustomerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Customer_CustomerID index.
            </summary>
            <param name="_customerId">Primary key for Customer records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Customer_CustomerID index.
            </summary>
            <param name="_customerId">Primary key for Customer records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Customer} of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Insert(Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            public virtual method that Inserts a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Insert.</param>
            <remarks>After Inserting into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Customer entity = new Customer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CustomerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Update(Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            public virtual method that Updates a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Update.</param>
            <remarks>After Updateing into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Customer entity = CustomerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CustomerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Save(Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            public virtual method that Saves a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Save.</param>
            <remarks>After Saveing into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Customer entity = CustomerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CustomerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Delete(Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            public virtual method that Deletes a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Customer entity = CustomerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CustomerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Delete(Nettiers.AdventureWorks.Entities.CustomerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _customerId
            </summary>
            <param name="_customerId">Customer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByAddressIdFromCustomerAddress(System.Int32)">
            <summary>
            	Gets Customer objects from the datasource by AddressID in the
            	CustomerAddress table. Table Customer is related to table Address
            	through the (M:N) relationship defined in the CustomerAddress table.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns a typed collection of Customer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.GetByAddressIdFromCustomerAddress(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Customer objects from the datasource by AddressID in the
            	CustomerAddress table. Table Customer is related to table Address
            	through the (M:N) relationship defined in the CustomerAddress table.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Customer objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoadByAccountNumber(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_accountNumber">Unique number identifying the customer assigned by the accounting system.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoadByTerritoryId(System.Nullable{System.Int32},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_territoryId">ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoadByCustomerId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_customerId">Primary key for Customer records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Customer Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Customer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Customer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Customer,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Customer)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Customer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Customer Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Customer,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Customer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Customer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Customer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Customer} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Customer},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CustomerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerService.#ctor">
            <summary>
            Initializes a new instance of the CustomerService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase">
            <summary>
             An object representation of the 'CountryRegionCurrency' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CountryRegionCurrency.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.CreateCountryRegionCurrency(System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> instance.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetByCountryRegionCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CountryRegionCurrency_CountryRegion_CountryRegionCode key.
            	FK_CountryRegionCurrency_CountryRegion_CountryRegionCode Description: Foreign key constraint referencing CountryRegion.CountryRegionCode.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <returns>Returns a generic collection of CountryRegionCurrency objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetByCountryRegionCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_CountryRegionCurrency_CountryRegion_CountryRegionCode key.
            	FK_CountryRegionCurrency_CountryRegion_CountryRegionCode Description: Foreign key constraint referencing CountryRegion.CountryRegionCode.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Get(Nettiers.AdventureWorks.Entities.CountryRegionCurrencyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetByCurrencyCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_CountryRegionCurrency_CurrencyCode index.
            </summary>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetByCurrencyCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_CountryRegionCurrency_CurrencyCode index.
            </summary>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetByCountryRegionCodeCurrencyCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode index.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetByCountryRegionCodeCurrencyCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode index.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CountryRegionCurrency} of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CountryRegionCurrency</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Insert(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            public virtual method that Inserts a CountryRegionCurrency object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegionCurrency object to Insert.</param>
            <remarks>After Inserting into the datasource, the CountryRegionCurrency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CountryRegionCurrency entity = new CountryRegionCurrency();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CountryRegionCurrencyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegionCurrency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CountryRegionCurrency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CountryRegionCurrency.
             <code><![CDATA[
             TList<CountryRegionCurrency> list = new TList<CountryRegionCurrency>();
             CountryRegionCurrency entity = new CountryRegionCurrency();
             entity.StringProperty = "foo";
             CountryRegionCurrency entity2 = new CountryRegionCurrency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionCurrencyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Update(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            public virtual method that Updates a CountryRegionCurrency object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegionCurrency object to Update.</param>
            <remarks>After Updateing into the datasource, the CountryRegionCurrency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CountryRegionCurrency entity = CountryRegionCurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CountryRegionCurrencyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegionCurrency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CountryRegionCurrency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CountryRegionCurrency.
             <code><![CDATA[
             TList<CountryRegionCurrency> list = new TList<CountryRegionCurrency>();
             CountryRegionCurrency entity = new CountryRegionCurrency();
             entity.StringProperty = "foo";
             CountryRegionCurrency entity2 = new CountryRegionCurrency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionCurrencyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Save(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            public virtual method that Saves a CountryRegionCurrency object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegionCurrency object to Save.</param>
            <remarks>After Saveing into the datasource, the CountryRegionCurrency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CountryRegionCurrency entity = CountryRegionCurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CountryRegionCurrencyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegionCurrency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CountryRegionCurrency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CountryRegionCurrency.
             <code><![CDATA[
             TList<CountryRegionCurrency> list = new TList<CountryRegionCurrency>();
             CountryRegionCurrency entity = new CountryRegionCurrency();
             entity.StringProperty = "foo";
             CountryRegionCurrency entity2 = new CountryRegionCurrency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionCurrencyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Delete(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            public virtual method that Deletes a CountryRegionCurrency object into the datasource using a transaction.
            </summary>
            <param name="entity">CountryRegionCurrency object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CountryRegionCurrency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CountryRegionCurrency entity = CountryRegionCurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CountryRegionCurrencyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CountryRegionCurrency</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CountryRegionCurrency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CountryRegionCurrency.
             <code><![CDATA[
             TList<CountryRegionCurrency> list = new TList<CountryRegionCurrency>();
             CountryRegionCurrency entity = new CountryRegionCurrency();
             entity.StringProperty = "foo";
             CountryRegionCurrency entity2 = new CountryRegionCurrency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CountryRegionCurrencyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Delete(Nettiers.AdventureWorks.Entities.CountryRegionCurrencyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _countryRegionCode, System.String _currencyCode
            </summary>
            <param name="_countryRegionCode">CountryRegionCurrency pk id.</param>
            <param name="_currencyCode">CountryRegionCurrency pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoadByCurrencyCode(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CountryRegionCurrency Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoadByCountryRegionCodeCurrencyCode(System.String,System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_countryRegionCode">ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.</param>
            <param name="_currencyCode">ISO standard currency code. Foreign key to Currency.CurrencyCode.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CountryRegionCurrency Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CountryRegionCurrency Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegionCurrency,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CountryRegionCurrency Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegionCurrency,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CountryRegionCurrency Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CountryRegionCurrency)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.CountryRegionCurrency"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CountryRegionCurrency Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.CountryRegionCurrency,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CountryRegionCurrency object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CountryRegionCurrency Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CountryRegionCurrency</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CountryRegionCurrency} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.CountryRegionCurrency},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CountryRegionCurrency Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.CountryRegionCurrencyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase">
            <summary>
             An object representation of the 'UnitMeasure' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UnitMeasure.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.CreateUnitMeasure(System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> instance.
            </summary>
            <param name="_unitMeasureCode">Primary key.</param>
            <param name="_name">Unit of measure description.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Get(Nettiers.AdventureWorks.Entities.UnitMeasureKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_UnitMeasure_Name index.
            </summary>
            <param name="_name">Unit of measure description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_UnitMeasure_Name index.
            </summary>
            <param name="_name">Unit of measure description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetByUnitMeasureCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_UnitMeasure_UnitMeasureCode index.
            </summary>
            <param name="_unitMeasureCode">Primary key.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetByUnitMeasureCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_UnitMeasure_UnitMeasureCode index.
            </summary>
            <param name="_unitMeasureCode">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UnitMeasure} of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UnitMeasure</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Insert(Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            public virtual method that Inserts a UnitMeasure object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitMeasure object to Insert.</param>
            <remarks>After Inserting into the datasource, the UnitMeasure object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UnitMeasure entity = new UnitMeasure();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UnitMeasureService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitMeasure</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UnitMeasure</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UnitMeasure.
             <code><![CDATA[
             TList<UnitMeasure> list = new TList<UnitMeasure>();
             UnitMeasure entity = new UnitMeasure();
             entity.StringProperty = "foo";
             UnitMeasure entity2 = new UnitMeasure();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitMeasureService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Update(Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            public virtual method that Updates a UnitMeasure object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitMeasure object to Update.</param>
            <remarks>After Updateing into the datasource, the UnitMeasure object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UnitMeasure entity = UnitMeasureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UnitMeasureService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitMeasure</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UnitMeasure</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UnitMeasure.
             <code><![CDATA[
             TList<UnitMeasure> list = new TList<UnitMeasure>();
             UnitMeasure entity = new UnitMeasure();
             entity.StringProperty = "foo";
             UnitMeasure entity2 = new UnitMeasure();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitMeasureService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Save(Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            public virtual method that Saves a UnitMeasure object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitMeasure object to Save.</param>
            <remarks>After Saveing into the datasource, the UnitMeasure object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UnitMeasure entity = UnitMeasureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UnitMeasureService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitMeasure</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UnitMeasure</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UnitMeasure.
             <code><![CDATA[
             TList<UnitMeasure> list = new TList<UnitMeasure>();
             UnitMeasure entity = new UnitMeasure();
             entity.StringProperty = "foo";
             UnitMeasure entity2 = new UnitMeasure();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitMeasureService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Delete(Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            public virtual method that Deletes a UnitMeasure object into the datasource using a transaction.
            </summary>
            <param name="entity">UnitMeasure object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UnitMeasure object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UnitMeasure entity = UnitMeasureService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UnitMeasureService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UnitMeasure</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UnitMeasure</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UnitMeasure.
             <code><![CDATA[
             TList<UnitMeasure> list = new TList<UnitMeasure>();
             UnitMeasure entity = new UnitMeasure();
             entity.StringProperty = "foo";
             UnitMeasure entity2 = new UnitMeasure();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitMeasureService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Delete(Nettiers.AdventureWorks.Entities.UnitMeasureKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _unitMeasureCode
            </summary>
            <param name="_unitMeasureCode">UnitMeasure pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Unit of measure description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UnitMeasure Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoadByUnitMeasureCode(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_unitMeasureCode">Primary key.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UnitMeasure Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UnitMeasure Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.UnitMeasure)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.UnitMeasure,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.UnitMeasure)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UnitMeasure Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.UnitMeasure,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UnitMeasure Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.UnitMeasure)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.UnitMeasure)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.UnitMeasure)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.UnitMeasure"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UnitMeasure Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.UnitMeasure,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UnitMeasure object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UnitMeasure Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UnitMeasure</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UnitMeasure} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.UnitMeasure},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UnitMeasure Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.UnitMeasureServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase">
            <summary>
             An object representation of the 'TransactionHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TransactionHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.CreateTransactionHistory(System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Int32,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="_transactionDate">Date and time of the transaction.</param>
            <param name="_transactionType">W = WorkOrder, S = SalesOrder, P = PurchaseOrder</param>
            <param name="_quantity">Product quantity.</param>
            <param name="_actualCost">Product cost.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Get(Nettiers.AdventureWorks.Entities.TransactionHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistory_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistory_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetByReferenceOrderIdReferenceOrderLineId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID index.
            </summary>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetByReferenceOrderIdReferenceOrderLineId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID index.
            </summary>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetByTransactionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TransactionHistory_TransactionID index.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistory records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetByTransactionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TransactionHistory_TransactionID index.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TransactionHistory} of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TransactionHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            public virtual method that Inserts a TransactionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the TransactionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TransactionHistory entity = new TransactionHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TransactionHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TransactionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TransactionHistory.
             <code><![CDATA[
             TList<TransactionHistory> list = new TList<TransactionHistory>();
             TransactionHistory entity = new TransactionHistory();
             entity.StringProperty = "foo";
             TransactionHistory entity2 = new TransactionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            public virtual method that Updates a TransactionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the TransactionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TransactionHistory entity = TransactionHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TransactionHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TransactionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TransactionHistory.
             <code><![CDATA[
             TList<TransactionHistory> list = new TList<TransactionHistory>();
             TransactionHistory entity = new TransactionHistory();
             entity.StringProperty = "foo";
             TransactionHistory entity2 = new TransactionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            public virtual method that Saves a TransactionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the TransactionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TransactionHistory entity = TransactionHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TransactionHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TransactionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TransactionHistory.
             <code><![CDATA[
             TList<TransactionHistory> list = new TList<TransactionHistory>();
             TransactionHistory entity = new TransactionHistory();
             entity.StringProperty = "foo";
             TransactionHistory entity2 = new TransactionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            public virtual method that Deletes a TransactionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TransactionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TransactionHistory entity = TransactionHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TransactionHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TransactionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TransactionHistory.
             <code><![CDATA[
             TList<TransactionHistory> list = new TList<TransactionHistory>();
             TransactionHistory entity = new TransactionHistory();
             entity.StringProperty = "foo";
             TransactionHistory entity2 = new TransactionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TransactionHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _transactionId
            </summary>
            <param name="_transactionId">TransactionHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoadByReferenceOrderIdReferenceOrderLineId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoadByTransactionId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistory records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TransactionHistory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TransactionHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TransactionHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TransactionHistory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TransactionHistory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TransactionHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TransactionHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TransactionHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TransactionHistory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TransactionHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.TransactionHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TransactionHistoryService">
            <summary>
            An component type implementation of the 'TransactionHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryService.#ctor">
            <summary>
            Initializes a new instance of the TransactionHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesTaxRateService">
            <summary>
            An component type implementation of the 'SalesTaxRate' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase">
            <summary>
             An object representation of the 'SalesTaxRate' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesTaxRate.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.CreateSalesTaxRate(System.Int32,System.Byte,System.Decimal,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> instance.
            </summary>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <param name="_taxType">1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.</param>
            <param name="_taxRate">Tax rate amount.</param>
            <param name="_name">Tax rate description.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetByStateProvinceId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesTaxRate_StateProvince_StateProvinceID key.
            	FK_SalesTaxRate_StateProvince_StateProvinceID Description: Foreign key constraint referencing StateProvince.StateProvinceID.
            </summary>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <returns>Returns a generic collection of SalesTaxRate objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetByStateProvinceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesTaxRate_StateProvince_StateProvinceID key.
            	FK_SalesTaxRate_StateProvince_StateProvinceID Description: Foreign key constraint referencing StateProvince.StateProvinceID.
            </summary>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesTaxRateKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTaxRate_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTaxRate_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetByStateProvinceIdTaxType(System.Int32,System.Byte)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTaxRate_StateProvinceID_TaxType index.
            </summary>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <param name="_taxType">1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetByStateProvinceIdTaxType(System.Int32,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTaxRate_StateProvinceID_TaxType index.
            </summary>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <param name="_taxType">1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetBySalesTaxRateId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesTaxRate_SalesTaxRateID index.
            </summary>
            <param name="_salesTaxRateId">Primary key for SalesTaxRate records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetBySalesTaxRateId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesTaxRate_SalesTaxRateID index.
            </summary>
            <param name="_salesTaxRateId">Primary key for SalesTaxRate records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesTaxRate} of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesTaxRate</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            public virtual method that Inserts a SalesTaxRate object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTaxRate object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesTaxRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesTaxRate entity = new SalesTaxRate();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesTaxRateService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTaxRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesTaxRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesTaxRate.
             <code><![CDATA[
             TList<SalesTaxRate> list = new TList<SalesTaxRate>();
             SalesTaxRate entity = new SalesTaxRate();
             entity.StringProperty = "foo";
             SalesTaxRate entity2 = new SalesTaxRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTaxRateService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            public virtual method that Updates a SalesTaxRate object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTaxRate object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesTaxRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesTaxRate entity = SalesTaxRateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesTaxRateService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTaxRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesTaxRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesTaxRate.
             <code><![CDATA[
             TList<SalesTaxRate> list = new TList<SalesTaxRate>();
             SalesTaxRate entity = new SalesTaxRate();
             entity.StringProperty = "foo";
             SalesTaxRate entity2 = new SalesTaxRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTaxRateService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            public virtual method that Saves a SalesTaxRate object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTaxRate object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesTaxRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesTaxRate entity = SalesTaxRateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesTaxRateService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTaxRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesTaxRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesTaxRate.
             <code><![CDATA[
             TList<SalesTaxRate> list = new TList<SalesTaxRate>();
             SalesTaxRate entity = new SalesTaxRate();
             entity.StringProperty = "foo";
             SalesTaxRate entity2 = new SalesTaxRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTaxRateService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            public virtual method that Deletes a SalesTaxRate object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTaxRate object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesTaxRate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesTaxRate entity = SalesTaxRateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesTaxRateService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTaxRate</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesTaxRate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesTaxRate.
             <code><![CDATA[
             TList<SalesTaxRate> list = new TList<SalesTaxRate>();
             SalesTaxRate entity = new SalesTaxRate();
             entity.StringProperty = "foo";
             SalesTaxRate entity2 = new SalesTaxRate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTaxRateService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesTaxRateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesTaxRateId
            </summary>
            <param name="_salesTaxRateId">SalesTaxRate pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTaxRate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoadByStateProvinceIdTaxType(System.Int32,System.Byte,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_stateProvinceId">State, province, or country/region the sales tax applies to.</param>
            <param name="_taxType">1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTaxRate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoadBySalesTaxRateId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesTaxRateId">Primary key for SalesTaxRate records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTaxRate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesTaxRate Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTaxRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTaxRate,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTaxRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesTaxRate Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTaxRate,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTaxRate Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTaxRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTaxRate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesTaxRate)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTaxRate"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesTaxRate Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesTaxRate,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesTaxRate object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesTaxRate Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesTaxRate</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesTaxRate} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTaxRate},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesTaxRate Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesTaxRateServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTaxRateService.#ctor">
            <summary>
            Initializes a new instance of the SalesTaxRateService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase">
            <summary>
             An object representation of the 'ProductPhoto' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductPhoto.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.CreateProductPhoto(System.Byte[],System.String,System.Byte[],System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> instance.
            </summary>
            <param name="_thumbNailPhoto">Small image of the product.</param>
            <param name="_thumbnailPhotoFileName">Small image file name.</param>
            <param name="_largePhoto">Large image of the product.</param>
            <param name="_largePhotoFileName">Large image file name.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductPhotoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetByProductPhotoId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductPhoto_ProductPhotoID index.
            </summary>
            <param name="_productPhotoId">Primary key for ProductPhoto records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetByProductPhotoId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductPhoto_ProductPhotoID index.
            </summary>
            <param name="_productPhotoId">Primary key for ProductPhoto records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductPhoto} of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductPhoto</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            public virtual method that Inserts a ProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductPhoto object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductPhoto entity = new ProductPhoto();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductPhotoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductPhoto.
             <code><![CDATA[
             TList<ProductPhoto> list = new TList<ProductPhoto>();
             ProductPhoto entity = new ProductPhoto();
             entity.StringProperty = "foo";
             ProductPhoto entity2 = new ProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductPhotoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            public virtual method that Updates a ProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductPhoto object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductPhoto entity = ProductPhotoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductPhotoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductPhoto.
             <code><![CDATA[
             TList<ProductPhoto> list = new TList<ProductPhoto>();
             ProductPhoto entity = new ProductPhoto();
             entity.StringProperty = "foo";
             ProductPhoto entity2 = new ProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductPhotoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            public virtual method that Saves a ProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductPhoto object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductPhoto entity = ProductPhotoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductPhotoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductPhoto.
             <code><![CDATA[
             TList<ProductPhoto> list = new TList<ProductPhoto>();
             ProductPhoto entity = new ProductPhoto();
             entity.StringProperty = "foo";
             ProductPhoto entity2 = new ProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductPhotoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            public virtual method that Deletes a ProductPhoto object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductPhoto object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductPhoto object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductPhoto entity = ProductPhotoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductPhotoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductPhoto</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductPhoto</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductPhoto.
             <code><![CDATA[
             TList<ProductPhoto> list = new TList<ProductPhoto>();
             ProductPhoto entity = new ProductPhoto();
             entity.StringProperty = "foo";
             ProductPhoto entity2 = new ProductPhoto();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductPhotoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductPhotoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productPhotoId
            </summary>
            <param name="_productPhotoId">ProductPhoto pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetByProductIdFromProductProductPhoto(System.Int32)">
            <summary>
            	Gets ProductPhoto objects from the datasource by ProductID in the
            	ProductProductPhoto table. Table ProductPhoto is related to table Product
            	through the (M:N) relationship defined in the ProductProductPhoto table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a typed collection of ProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.GetByProductIdFromProductProductPhoto(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductPhoto objects from the datasource by ProductID in the
            	ProductProductPhoto table. Table ProductPhoto is related to table Product
            	through the (M:N) relationship defined in the ProductProductPhoto table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProductPhoto objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoadByProductPhotoId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productPhotoId">Primary key for ProductPhoto records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductPhoto Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductPhoto Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductPhoto,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductPhoto Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductPhoto,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductPhoto Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductPhoto)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductPhoto)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductPhoto"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductPhoto Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductPhoto,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductPhoto object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductPhoto Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductPhoto</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductPhoto} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductPhoto},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductPhoto Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductPhotoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductInventoryService">
            <summary>
            An component type implementation of the 'ProductInventory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductInventoryService.#ctor">
            <summary>
            Initializes a new instance of the ProductInventoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase">
            <summary>
             An object representation of the 'NullFKeyParent' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NullFkeyParent.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.CreateNullFkeyParent(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> instance.
            </summary>
            <param name="_nullFkeyParentId"></param>
            <param name="_someText"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Get(Nettiers.AdventureWorks.Entities.NullFkeyParentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetByNullFkeyParentId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_NullKeyParent index.
            </summary>
            <param name="_nullFkeyParentId"></param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetByNullFkeyParentId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_NullKeyParent index.
            </summary>
            <param name="_nullFkeyParentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NullFkeyParent} of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NullFkeyParent</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Insert(Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            public virtual method that Inserts a NullFkeyParent object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyParent object to Insert.</param>
            <remarks>After Inserting into the datasource, the NullFkeyParent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NullFkeyParent entity = new NullFkeyParent();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NullFkeyParentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyParent</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NullFkeyParent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NullFkeyParent.
             <code><![CDATA[
             TList<NullFkeyParent> list = new TList<NullFkeyParent>();
             NullFkeyParent entity = new NullFkeyParent();
             entity.StringProperty = "foo";
             NullFkeyParent entity2 = new NullFkeyParent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyParentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Update(Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            public virtual method that Updates a NullFkeyParent object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyParent object to Update.</param>
            <remarks>After Updateing into the datasource, the NullFkeyParent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NullFkeyParent entity = NullFkeyParentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NullFkeyParentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyParent</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NullFkeyParent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NullFkeyParent.
             <code><![CDATA[
             TList<NullFkeyParent> list = new TList<NullFkeyParent>();
             NullFkeyParent entity = new NullFkeyParent();
             entity.StringProperty = "foo";
             NullFkeyParent entity2 = new NullFkeyParent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyParentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Save(Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            public virtual method that Saves a NullFkeyParent object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyParent object to Save.</param>
            <remarks>After Saveing into the datasource, the NullFkeyParent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            NullFkeyParent entity = NullFkeyParentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NullFkeyParentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyParent</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>NullFkeyParent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of NullFkeyParent.
             <code><![CDATA[
             TList<NullFkeyParent> list = new TList<NullFkeyParent>();
             NullFkeyParent entity = new NullFkeyParent();
             entity.StringProperty = "foo";
             NullFkeyParent entity2 = new NullFkeyParent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyParentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Delete(Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            public virtual method that Deletes a NullFkeyParent object into the datasource using a transaction.
            </summary>
            <param name="entity">NullFkeyParent object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NullFkeyParent object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NullFkeyParent entity = NullFkeyParentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NullFkeyParentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NullFkeyParent</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NullFkeyParent</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NullFkeyParent.
             <code><![CDATA[
             TList<NullFkeyParent> list = new TList<NullFkeyParent>();
             NullFkeyParent entity = new NullFkeyParent();
             entity.StringProperty = "foo";
             NullFkeyParent entity2 = new NullFkeyParent();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NullFkeyParentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Delete(Nettiers.AdventureWorks.Entities.NullFkeyParentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _nullFkeyParentId
            </summary>
            <param name="_nullFkeyParentId">NullFkeyParent pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoadByNullFkeyParentId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_nullFkeyParentId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NullFkeyParent Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">NullFkeyParent Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyParent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyParent,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyParent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">NullFkeyParent Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyParent,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NullFkeyParent Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyParent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.NullFkeyParent)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.NullFkeyParent)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.NullFkeyParent"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">NullFkeyParent Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.NullFkeyParent,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the NullFkeyParent object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">NullFkeyParent Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>NullFkeyParent</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{NullFkeyParent} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.NullFkeyParent},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">NullFkeyParent Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.NullFkeyParentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.DocumentServiceBase">
            <summary>
             An object representation of the 'Document' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Document.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.CreateDocument(System.String,System.String,System.String,System.String,System.Int32,System.Byte,System.String,System.Byte[],System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> instance.
            </summary>
            <param name="_title">Title of the document.</param>
            <param name="_fileName">Directory path and file name of the document</param>
            <param name="_fileExtension">File extension indicating the document type. For example, .doc or .txt.</param>
            <param name="_revision">Revision number of the document. </param>
            <param name="_changeNumber">Engineering change approval number.</param>
            <param name="_status">1 = Pending approval, 2 = Approved, 3 = Obsolete</param>
            <param name="_documentSummary">Document abstract.</param>
            <param name="_document">Complete document.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Get(Nettiers.AdventureWorks.Entities.DocumentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetByFileNameRevision(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Document_FileName_Revision index.
            </summary>
            <param name="_fileName">Directory path and file name of the document</param>
            <param name="_revision">Revision number of the document. </param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetByFileNameRevision(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Document_FileName_Revision index.
            </summary>
            <param name="_fileName">Directory path and file name of the document</param>
            <param name="_revision">Revision number of the document. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetByDocumentId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Document_DocumentID index.
            </summary>
            <param name="_documentId">Primary key for Document records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetByDocumentId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Document_DocumentID index.
            </summary>
            <param name="_documentId">Primary key for Document records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Document} of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Document</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Insert(Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            public virtual method that Inserts a Document object into the datasource using a transaction.
            </summary>
            <param name="entity">Document object to Insert.</param>
            <remarks>After Inserting into the datasource, the Document object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Document entity = new Document();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DocumentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Document</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Document</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Document.
             <code><![CDATA[
             TList<Document> list = new TList<Document>();
             Document entity = new Document();
             entity.StringProperty = "foo";
             Document entity2 = new Document();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DocumentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Update(Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            public virtual method that Updates a Document object into the datasource using a transaction.
            </summary>
            <param name="entity">Document object to Update.</param>
            <remarks>After Updateing into the datasource, the Document object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Document entity = DocumentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DocumentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Document</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Document</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Document.
             <code><![CDATA[
             TList<Document> list = new TList<Document>();
             Document entity = new Document();
             entity.StringProperty = "foo";
             Document entity2 = new Document();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DocumentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Save(Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            public virtual method that Saves a Document object into the datasource using a transaction.
            </summary>
            <param name="entity">Document object to Save.</param>
            <remarks>After Saveing into the datasource, the Document object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Document entity = DocumentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DocumentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Document</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Document</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Document.
             <code><![CDATA[
             TList<Document> list = new TList<Document>();
             Document entity = new Document();
             entity.StringProperty = "foo";
             Document entity2 = new Document();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DocumentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Delete(Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            public virtual method that Deletes a Document object into the datasource using a transaction.
            </summary>
            <param name="entity">Document object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Document object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Document entity = DocumentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DocumentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Document</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Document</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Document.
             <code><![CDATA[
             TList<Document> list = new TList<Document>();
             Document entity = new Document();
             entity.StringProperty = "foo";
             Document entity2 = new Document();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DocumentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Delete(Nettiers.AdventureWorks.Entities.DocumentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _documentId
            </summary>
            <param name="_documentId">Document pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetByProductIdFromProductDocument(System.Int32)">
            <summary>
            	Gets Document objects from the datasource by ProductID in the
            	ProductDocument table. Table Document is related to table Product
            	through the (M:N) relationship defined in the ProductDocument table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a typed collection of Document objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.GetByProductIdFromProductDocument(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Document objects from the datasource by ProductID in the
            	ProductDocument table. Table Document is related to table Product
            	through the (M:N) relationship defined in the ProductDocument table.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Document objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoadByFileNameRevision(System.String,System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_fileName">Directory path and file name of the document</param>
            <param name="_revision">Revision number of the document. </param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Document Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoadByDocumentId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_documentId">Primary key for Document records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Document Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Document Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Document)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Document,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Document)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Document Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Document,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Document Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Document)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Document)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Document"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Document)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Document"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Document Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Document,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Document object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Document Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Document</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Document} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Document},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Document Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.DocumentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.DocumentService">
            <summary>
            An component type implementation of the 'Document' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DocumentService.#ctor">
            <summary>
            Initializes a new instance of the DocumentService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.DepartmentServiceBase">
            <summary>
             An object representation of the 'Department' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Department.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.CreateDepartment(System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> instance.
            </summary>
            <param name="_name">Name of the department.</param>
            <param name="_groupName">Name of the group to which the department belongs.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Get(Nettiers.AdventureWorks.Entities.DepartmentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Department_Name index.
            </summary>
            <param name="_name">Name of the department.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Department_Name index.
            </summary>
            <param name="_name">Name of the department.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetByDepartmentId(System.Int16)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Department_DepartmentID index.
            </summary>
            <param name="_departmentId">Primary key for Department records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetByDepartmentId(System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Department_DepartmentID index.
            </summary>
            <param name="_departmentId">Primary key for Department records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Department} of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Department</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Insert(Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            public virtual method that Inserts a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Insert.</param>
            <remarks>After Inserting into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Department entity = new Department();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DepartmentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Update(Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            public virtual method that Updates a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Update.</param>
            <remarks>After Updateing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DepartmentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Save(Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            public virtual method that Saves a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Save.</param>
            <remarks>After Saveing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DepartmentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Delete(Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            public virtual method that Deletes a Department object into the datasource using a transaction.
            </summary>
            <param name="entity">Department object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Department object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Department entity = DepartmentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DepartmentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Department</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Department</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Department.
             <code><![CDATA[
             TList<Department> list = new TList<Department>();
             Department entity = new Department();
             entity.StringProperty = "foo";
             Department entity2 = new Department();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Delete(Nettiers.AdventureWorks.Entities.DepartmentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.Delete(System.Int16)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int16 _departmentId
            </summary>
            <param name="_departmentId">Department pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Name of the department.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoadByDepartmentId(System.Int16,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_departmentId">Primary key for Department records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Department Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Department,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Department Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Department,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Department)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Department"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Department)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Department"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Department Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Department,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Department object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Department Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Department</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Department} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Department},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Department Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.DepartmentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ContactTypeServiceBase">
            <summary>
             An object representation of the 'ContactType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ContactType.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.CreateContactType(System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> instance.
            </summary>
            <param name="_name">Contact type description.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Get(Nettiers.AdventureWorks.Entities.ContactTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ContactType_Name index.
            </summary>
            <param name="_name">Contact type description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ContactType_Name index.
            </summary>
            <param name="_name">Contact type description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetByContactTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ContactType_ContactTypeID index.
            </summary>
            <param name="_contactTypeId">Primary key for ContactType records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetByContactTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ContactType_ContactTypeID index.
            </summary>
            <param name="_contactTypeId">Primary key for ContactType records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ContactType} of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ContactType</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Insert(Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            public virtual method that Inserts a ContactType object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ContactType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ContactType entity = new ContactType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContactTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ContactType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ContactType.
             <code><![CDATA[
             TList<ContactType> list = new TList<ContactType>();
             ContactType entity = new ContactType();
             entity.StringProperty = "foo";
             ContactType entity2 = new ContactType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Update(Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            public virtual method that Updates a ContactType object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactType object to Update.</param>
            <remarks>After Updateing into the datasource, the ContactType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ContactType entity = ContactTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContactTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ContactType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ContactType.
             <code><![CDATA[
             TList<ContactType> list = new TList<ContactType>();
             ContactType entity = new ContactType();
             entity.StringProperty = "foo";
             ContactType entity2 = new ContactType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Save(Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            public virtual method that Saves a ContactType object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactType object to Save.</param>
            <remarks>After Saveing into the datasource, the ContactType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ContactType entity = ContactTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContactTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ContactType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ContactType.
             <code><![CDATA[
             TList<ContactType> list = new TList<ContactType>();
             ContactType entity = new ContactType();
             entity.StringProperty = "foo";
             ContactType entity2 = new ContactType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Delete(Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            public virtual method that Deletes a ContactType object into the datasource using a transaction.
            </summary>
            <param name="entity">ContactType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ContactType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ContactType entity = ContactTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContactTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ContactType</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ContactType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ContactType.
             <code><![CDATA[
             TList<ContactType> list = new TList<ContactType>();
             ContactType entity = new ContactType();
             entity.StringProperty = "foo";
             ContactType entity2 = new ContactType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Delete(Nettiers.AdventureWorks.Entities.ContactTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _contactTypeId
            </summary>
            <param name="_contactTypeId">ContactType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Contact type description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContactType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoadByContactTypeId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_contactTypeId">Primary key for ContactType records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContactType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ContactType Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ContactType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactType,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ContactType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ContactType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ContactType)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ContactType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ContactType Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ContactType,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ContactType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ContactType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ContactType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ContactType} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ContactType},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ContactType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ContactTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.BillOfMaterialsService">
            <summary>
            An component type implementation of the 'BillOfMaterials' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase">
            <summary>
             An object representation of the 'BillOfMaterials' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BillOfMaterials.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.CreateBillOfMaterials(System.Nullable{System.Int32},System.Int32,System.DateTime,System.Nullable{System.DateTime},System.String,System.Int16,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> instance.
            </summary>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <param name="_startDate">Date the component started being used in the assembly item.</param>
            <param name="_endDate">Date the component stopped being used in the assembly item.</param>
            <param name="_unitMeasureCode">Standard code identifying the unit of measure for the quantity.</param>
            <param name="_bomLevel">Indicates the depth the component is from its parent (AssemblyID).</param>
            <param name="_perAssemblyQty">Quantity of the component needed to create the assembly.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByComponentId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_BillOfMaterials_Product_ComponentID key.
            	FK_BillOfMaterials_Product_ComponentID Description: Foreign key constraint referencing Product.ComponentID.
            </summary>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of BillOfMaterials objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByComponentId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_BillOfMaterials_Product_ComponentID key.
            	FK_BillOfMaterials_Product_ComponentID Description: Foreign key constraint referencing Product.ComponentID.
            </summary>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByProductAssemblyId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_BillOfMaterials_Product_ProductAssemblyID key.
            	FK_BillOfMaterials_Product_ProductAssemblyID Description: Foreign key constraint referencing Product.ProductAssemblyID.
            </summary>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of BillOfMaterials objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByProductAssemblyId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_BillOfMaterials_Product_ProductAssemblyID key.
            	FK_BillOfMaterials_Product_ProductAssemblyID Description: Foreign key constraint referencing Product.ProductAssemblyID.
            </summary>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Get(Nettiers.AdventureWorks.Entities.BillOfMaterialsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByProductAssemblyIdComponentIdStartDate(System.Nullable{System.Int32},System.Int32,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate index.
            </summary>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <param name="_startDate">Date the component started being used in the assembly item.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByProductAssemblyIdComponentIdStartDate(System.Nullable{System.Int32},System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate index.
            </summary>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <param name="_startDate">Date the component started being used in the assembly item.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByUnitMeasureCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_BillOfMaterials_UnitMeasureCode index.
            </summary>
            <param name="_unitMeasureCode">Standard code identifying the unit of measure for the quantity.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByUnitMeasureCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_BillOfMaterials_UnitMeasureCode index.
            </summary>
            <param name="_unitMeasureCode">Standard code identifying the unit of measure for the quantity.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByBillOfMaterialsId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_BillOfMaterials_BillOfMaterialsID index.
            </summary>
            <param name="_billOfMaterialsId">Primary key for BillOfMaterials records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetByBillOfMaterialsId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_BillOfMaterials_BillOfMaterialsID index.
            </summary>
            <param name="_billOfMaterialsId">Primary key for BillOfMaterials records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BillOfMaterials} of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BillOfMaterials</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Insert(Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            public virtual method that Inserts a BillOfMaterials object into the datasource using a transaction.
            </summary>
            <param name="entity">BillOfMaterials object to Insert.</param>
            <remarks>After Inserting into the datasource, the BillOfMaterials object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BillOfMaterials entity = new BillOfMaterials();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BillOfMaterialsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BillOfMaterials</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BillOfMaterials</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BillOfMaterials.
             <code><![CDATA[
             TList<BillOfMaterials> list = new TList<BillOfMaterials>();
             BillOfMaterials entity = new BillOfMaterials();
             entity.StringProperty = "foo";
             BillOfMaterials entity2 = new BillOfMaterials();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BillOfMaterialsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Update(Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            public virtual method that Updates a BillOfMaterials object into the datasource using a transaction.
            </summary>
            <param name="entity">BillOfMaterials object to Update.</param>
            <remarks>After Updateing into the datasource, the BillOfMaterials object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BillOfMaterials entity = BillOfMaterialsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BillOfMaterialsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BillOfMaterials</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BillOfMaterials</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BillOfMaterials.
             <code><![CDATA[
             TList<BillOfMaterials> list = new TList<BillOfMaterials>();
             BillOfMaterials entity = new BillOfMaterials();
             entity.StringProperty = "foo";
             BillOfMaterials entity2 = new BillOfMaterials();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BillOfMaterialsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Save(Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            public virtual method that Saves a BillOfMaterials object into the datasource using a transaction.
            </summary>
            <param name="entity">BillOfMaterials object to Save.</param>
            <remarks>After Saveing into the datasource, the BillOfMaterials object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BillOfMaterials entity = BillOfMaterialsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BillOfMaterialsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BillOfMaterials</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BillOfMaterials</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BillOfMaterials.
             <code><![CDATA[
             TList<BillOfMaterials> list = new TList<BillOfMaterials>();
             BillOfMaterials entity = new BillOfMaterials();
             entity.StringProperty = "foo";
             BillOfMaterials entity2 = new BillOfMaterials();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BillOfMaterialsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Delete(Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            public virtual method that Deletes a BillOfMaterials object into the datasource using a transaction.
            </summary>
            <param name="entity">BillOfMaterials object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BillOfMaterials object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BillOfMaterials entity = BillOfMaterialsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BillOfMaterialsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BillOfMaterials</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BillOfMaterials</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BillOfMaterials.
             <code><![CDATA[
             TList<BillOfMaterials> list = new TList<BillOfMaterials>();
             BillOfMaterials entity = new BillOfMaterials();
             entity.StringProperty = "foo";
             BillOfMaterials entity2 = new BillOfMaterials();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BillOfMaterialsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Delete(Nettiers.AdventureWorks.Entities.BillOfMaterialsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _billOfMaterialsId
            </summary>
            <param name="_billOfMaterialsId">BillOfMaterials pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoadByProductAssemblyIdComponentIdStartDate(System.Nullable{System.Int32},System.Int32,System.DateTime,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productAssemblyId">Parent product identification number. Foreign key to Product.ProductID.</param>
            <param name="_componentId">Component identification number. Foreign key to Product.ProductID.</param>
            <param name="_startDate">Date the component started being used in the assembly item.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BillOfMaterials Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoadByUnitMeasureCode(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_unitMeasureCode">Standard code identifying the unit of measure for the quantity.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BillOfMaterials Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoadByBillOfMaterialsId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_billOfMaterialsId">Primary key for BillOfMaterials records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BillOfMaterials Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BillOfMaterials Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.BillOfMaterials)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.BillOfMaterials,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.BillOfMaterials)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BillOfMaterials Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.BillOfMaterials,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BillOfMaterials Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.BillOfMaterials)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.BillOfMaterials)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.BillOfMaterials)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.BillOfMaterials"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BillOfMaterials Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.BillOfMaterials,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BillOfMaterials object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BillOfMaterials Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BillOfMaterials</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BillOfMaterials} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.BillOfMaterials},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BillOfMaterials Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.BillOfMaterialsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.BillOfMaterialsService.#ctor">
            <summary>
            Initializes a new instance of the BillOfMaterialsService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nettiers.AdventureWorks.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContextView`2.#ctor(`0,Nettiers.AdventureWorks.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nettiers.AdventureWorks.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContextView`2.#ctor(`0,Nettiers.AdventureWorks.Services.SecurityContext{`0},Nettiers.AdventureWorks.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Nettiers.AdventureWorks.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IProcessor.ChangeProcessorState(Nettiers.AdventureWorks.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProcessorBase.ChangeProcessorState(Nettiers.AdventureWorks.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProcessorBase.OnNotifyProcessorStateChanging(Nettiers.AdventureWorks.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:Nettiers.AdventureWorks.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VendorService">
            <summary>
            An component type implementation of the 'Vendor' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VendorServiceBase">
            <summary>
             An object representation of the 'Vendor' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Vendor.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.CreateVendor(System.String,System.String,System.Byte,System.Boolean,System.Boolean,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> instance.
            </summary>
            <param name="_accountNumber">Vendor account (identification) number.</param>
            <param name="_name">Company name.</param>
            <param name="_creditRating">1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average</param>
            <param name="_preferredVendorStatus">0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.</param>
            <param name="_activeFlag">0 = Vendor no longer used. 1 = Vendor is actively used.</param>
            <param name="_purchasingWebServiceUrl">Vendor URL.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Get(Nettiers.AdventureWorks.Entities.VendorKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByAccountNumber(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Vendor_AccountNumber index.
            </summary>
            <param name="_accountNumber">Vendor account (identification) number.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByAccountNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Vendor_AccountNumber index.
            </summary>
            <param name="_accountNumber">Vendor account (identification) number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByVendorId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Vendor_VendorID index.
            </summary>
            <param name="_vendorId">Primary key for Vendor records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByVendorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Vendor_VendorID index.
            </summary>
            <param name="_vendorId">Primary key for Vendor records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Vendor} of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Vendor</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Insert(Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            public virtual method that Inserts a Vendor object into the datasource using a transaction.
            </summary>
            <param name="entity">Vendor object to Insert.</param>
            <remarks>After Inserting into the datasource, the Vendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Vendor entity = new Vendor();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	VendorService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Vendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Vendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Vendor.
             <code><![CDATA[
             TList<Vendor> list = new TList<Vendor>();
             Vendor entity = new Vendor();
             entity.StringProperty = "foo";
             Vendor entity2 = new Vendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Update(Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            public virtual method that Updates a Vendor object into the datasource using a transaction.
            </summary>
            <param name="entity">Vendor object to Update.</param>
            <remarks>After Updateing into the datasource, the Vendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Vendor entity = VendorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	VendorService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Vendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Vendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Vendor.
             <code><![CDATA[
             TList<Vendor> list = new TList<Vendor>();
             Vendor entity = new Vendor();
             entity.StringProperty = "foo";
             Vendor entity2 = new Vendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Save(Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            public virtual method that Saves a Vendor object into the datasource using a transaction.
            </summary>
            <param name="entity">Vendor object to Save.</param>
            <remarks>After Saveing into the datasource, the Vendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Vendor entity = VendorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	VendorService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Vendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Vendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Vendor.
             <code><![CDATA[
             TList<Vendor> list = new TList<Vendor>();
             Vendor entity = new Vendor();
             entity.StringProperty = "foo";
             Vendor entity2 = new Vendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Delete(Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            public virtual method that Deletes a Vendor object into the datasource using a transaction.
            </summary>
            <param name="entity">Vendor object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Vendor object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Vendor entity = VendorService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	VendorService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Vendor</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Vendor</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Vendor.
             <code><![CDATA[
             TList<Vendor> list = new TList<Vendor>();
             Vendor entity = new Vendor();
             entity.StringProperty = "foo";
             Vendor entity2 = new Vendor();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	VendorService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Delete(Nettiers.AdventureWorks.Entities.VendorKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _vendorId
            </summary>
            <param name="_vendorId">Vendor pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByProductIdFromProductVendor(System.Int32)">
            <summary>
            	Gets Vendor objects from the datasource by ProductID in the
            	ProductVendor table. Table Vendor is related to table Product
            	through the (M:N) relationship defined in the ProductVendor table.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <returns>Returns a typed collection of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByProductIdFromProductVendor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Vendor objects from the datasource by ProductID in the
            	ProductVendor table. Table Vendor is related to table Product
            	through the (M:N) relationship defined in the ProductVendor table.
            </summary>
            <param name="_productId">Primary key. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByAddressIdFromVendorAddress(System.Int32)">
            <summary>
            	Gets Vendor objects from the datasource by AddressID in the
            	VendorAddress table. Table Vendor is related to table Address
            	through the (M:N) relationship defined in the VendorAddress table.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns a typed collection of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByAddressIdFromVendorAddress(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Vendor objects from the datasource by AddressID in the
            	VendorAddress table. Table Vendor is related to table Address
            	through the (M:N) relationship defined in the VendorAddress table.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByContactIdFromVendorContact(System.Int32)">
            <summary>
            	Gets Vendor objects from the datasource by ContactID in the
            	VendorContact table. Table Vendor is related to table Contact
            	through the (M:N) relationship defined in the VendorContact table.
            </summary>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns a typed collection of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.GetByContactIdFromVendorContact(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Vendor objects from the datasource by ContactID in the
            	VendorContact table. Table Vendor is related to table Contact
            	through the (M:N) relationship defined in the VendorContact table.
            </summary>
            <param name="_contactId">Contact (Vendor employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Vendor objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoadByAccountNumber(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_accountNumber">Vendor account (identification) number.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Vendor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoadByVendorId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_vendorId">Primary key for Vendor records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Vendor Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Vendor Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Vendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Vendor,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Vendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Vendor Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Vendor,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Vendor Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Vendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Vendor)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Vendor)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Vendor"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Vendor Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Vendor,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Vendor object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Vendor Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Vendor</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Vendor} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Vendor},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Vendor Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.VendorServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VendorService.#ctor">
            <summary>
            Initializes a new instance of the VendorService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase">
            <summary>
             An object representation of the 'TransactionHistoryArchive' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TransactionHistoryArchive.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.CreateTransactionHistoryArchive(System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Int32,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> instance.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistoryArchive records.</param>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="_transactionDate">Date and time of the transaction.</param>
            <param name="_transactionType">W = Work Order, S = Sales Order, P = Purchase Order</param>
            <param name="_quantity">Product quantity.</param>
            <param name="_actualCost">Product cost.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Get(Nettiers.AdventureWorks.Entities.TransactionHistoryArchiveKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistoryArchive_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistoryArchive_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetByReferenceOrderIdReferenceOrderLineId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID index.
            </summary>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetByReferenceOrderIdReferenceOrderLineId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID index.
            </summary>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetByTransactionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TransactionHistoryArchive_TransactionID index.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistoryArchive records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetByTransactionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_TransactionHistoryArchive_TransactionID index.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistoryArchive records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TransactionHistoryArchive} of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TransactionHistoryArchive</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Insert(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            public virtual method that Inserts a TransactionHistoryArchive object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistoryArchive object to Insert.</param>
            <remarks>After Inserting into the datasource, the TransactionHistoryArchive object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TransactionHistoryArchive entity = new TransactionHistoryArchive();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TransactionHistoryArchiveService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistoryArchive</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TransactionHistoryArchive</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TransactionHistoryArchive.
             <code><![CDATA[
             TList<TransactionHistoryArchive> list = new TList<TransactionHistoryArchive>();
             TransactionHistoryArchive entity = new TransactionHistoryArchive();
             entity.StringProperty = "foo";
             TransactionHistoryArchive entity2 = new TransactionHistoryArchive();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryArchiveService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Update(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            public virtual method that Updates a TransactionHistoryArchive object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistoryArchive object to Update.</param>
            <remarks>After Updateing into the datasource, the TransactionHistoryArchive object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TransactionHistoryArchive entity = TransactionHistoryArchiveService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TransactionHistoryArchiveService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistoryArchive</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TransactionHistoryArchive</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TransactionHistoryArchive.
             <code><![CDATA[
             TList<TransactionHistoryArchive> list = new TList<TransactionHistoryArchive>();
             TransactionHistoryArchive entity = new TransactionHistoryArchive();
             entity.StringProperty = "foo";
             TransactionHistoryArchive entity2 = new TransactionHistoryArchive();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryArchiveService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Save(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            public virtual method that Saves a TransactionHistoryArchive object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistoryArchive object to Save.</param>
            <remarks>After Saveing into the datasource, the TransactionHistoryArchive object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TransactionHistoryArchive entity = TransactionHistoryArchiveService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TransactionHistoryArchiveService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistoryArchive</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TransactionHistoryArchive</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TransactionHistoryArchive.
             <code><![CDATA[
             TList<TransactionHistoryArchive> list = new TList<TransactionHistoryArchive>();
             TransactionHistoryArchive entity = new TransactionHistoryArchive();
             entity.StringProperty = "foo";
             TransactionHistoryArchive entity2 = new TransactionHistoryArchive();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryArchiveService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Delete(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            public virtual method that Deletes a TransactionHistoryArchive object into the datasource using a transaction.
            </summary>
            <param name="entity">TransactionHistoryArchive object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TransactionHistoryArchive object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TransactionHistoryArchive entity = TransactionHistoryArchiveService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TransactionHistoryArchiveService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransactionHistoryArchive</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TransactionHistoryArchive</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TransactionHistoryArchive.
             <code><![CDATA[
             TList<TransactionHistoryArchive> list = new TList<TransactionHistoryArchive>();
             TransactionHistoryArchive entity = new TransactionHistoryArchive();
             entity.StringProperty = "foo";
             TransactionHistoryArchive entity2 = new TransactionHistoryArchive();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionHistoryArchiveService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Delete(Nettiers.AdventureWorks.Entities.TransactionHistoryArchiveKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _transactionId
            </summary>
            <param name="_transactionId">TransactionHistoryArchive pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistoryArchive Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoadByReferenceOrderIdReferenceOrderLineId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_referenceOrderId">Purchase order, sales order, or work order identification number.</param>
            <param name="_referenceOrderLineId">Line number associated with the purchase order, sales order, or work order.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistoryArchive Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoadByTransactionId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_transactionId">Primary key for TransactionHistoryArchive records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistoryArchive Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TransactionHistoryArchive Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TransactionHistoryArchive Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransactionHistoryArchive Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.TransactionHistoryArchive"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TransactionHistoryArchive Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TransactionHistoryArchive,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TransactionHistoryArchive object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TransactionHistoryArchive Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TransactionHistoryArchive</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TransactionHistoryArchive} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.TransactionHistoryArchive},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TransactionHistoryArchive Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonService">
            <summary>
            An component type implementation of the 'SalesOrderHeaderSalesReason' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderSalesReasonService.#ctor">
            <summary>
            Initializes a new instance of the SalesOrderHeaderSalesReasonService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase">
            <summary>
             An object representation of the 'SalesOrderDetail' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesOrderDetail.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.CreateSalesOrderDetail(System.Int32,System.String,System.Int16,System.Int32,System.Int32,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> instance.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_carrierTrackingNumber">Shipment tracking number supplied by the shipper.</param>
            <param name="_orderQty">Quantity ordered per product.</param>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <param name="_specialOfferId">Promotional code. Foreign key to SpecialOffer.SpecialOfferID.</param>
            <param name="_unitPrice">Selling price of a single product.</param>
            <param name="_unitPriceDiscount">Discount amount.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetBySalesOrderId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID key.
            	FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID Description: Foreign key constraint referencing SalesOrderHeader.PurchaseOrderID.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <returns>Returns a generic collection of SalesOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetBySalesOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID key.
            	FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID Description: Foreign key constraint referencing SalesOrderHeader.PurchaseOrderID.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetBySpecialOfferIdProductId(System.Int32,System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID key.
            	FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID Description: Foreign key constraint referencing SpecialOfferProduct.SpecialOfferIDProductID.
            </summary>
            <param name="_specialOfferId">Promotional code. Foreign key to SpecialOffer.SpecialOfferID.</param>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of SalesOrderDetail objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetBySpecialOfferIdProductId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID key.
            	FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID Description: Foreign key constraint referencing SpecialOfferProduct.SpecialOfferIDProductID.
            </summary>
            <param name="_specialOfferId">Promotional code. Foreign key to SpecialOffer.SpecialOfferID.</param>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesOrderDetailKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesOrderDetail_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesOrderDetail_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SalesOrderDetail_ProductID index.
            </summary>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_SalesOrderDetail_ProductID index.
            </summary>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetBySalesOrderIdSalesOrderDetailId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID index.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesOrderDetailId">Primary key. One incremental unique number per product sold.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetBySalesOrderIdSalesOrderDetailId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID index.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesOrderDetailId">Primary key. One incremental unique number per product sold.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesOrderDetail} of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesOrderDetail</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            public virtual method that Inserts a SalesOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderDetail object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesOrderDetail entity = new SalesOrderDetail();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesOrderDetailService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesOrderDetail.
             <code><![CDATA[
             TList<SalesOrderDetail> list = new TList<SalesOrderDetail>();
             SalesOrderDetail entity = new SalesOrderDetail();
             entity.StringProperty = "foo";
             SalesOrderDetail entity2 = new SalesOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderDetailService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            public virtual method that Updates a SalesOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderDetail object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesOrderDetail entity = SalesOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesOrderDetailService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesOrderDetail.
             <code><![CDATA[
             TList<SalesOrderDetail> list = new TList<SalesOrderDetail>();
             SalesOrderDetail entity = new SalesOrderDetail();
             entity.StringProperty = "foo";
             SalesOrderDetail entity2 = new SalesOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderDetailService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            public virtual method that Saves a SalesOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderDetail object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesOrderDetail entity = SalesOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesOrderDetailService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesOrderDetail.
             <code><![CDATA[
             TList<SalesOrderDetail> list = new TList<SalesOrderDetail>();
             SalesOrderDetail entity = new SalesOrderDetail();
             entity.StringProperty = "foo";
             SalesOrderDetail entity2 = new SalesOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderDetailService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            public virtual method that Deletes a SalesOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesOrderDetail object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesOrderDetail entity = SalesOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesOrderDetailService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesOrderDetail</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesOrderDetail.
             <code><![CDATA[
             TList<SalesOrderDetail> list = new TList<SalesOrderDetail>();
             SalesOrderDetail entity = new SalesOrderDetail();
             entity.StringProperty = "foo";
             SalesOrderDetail entity2 = new SalesOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesOrderDetailService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesOrderDetailKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesOrderId, System.Int32 _salesOrderDetailId
            </summary>
            <param name="_salesOrderId">SalesOrderDetail pk id.</param>
            <param name="_salesOrderDetailId">SalesOrderDetail pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product sold to customer. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoadBySalesOrderIdSalesOrderDetailId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesOrderId">Primary key. Foreign key to SalesOrderHeader.SalesOrderID.</param>
            <param name="_salesOrderDetailId">Primary key. One incremental unique number per product sold.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesOrderDetail Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderDetail,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesOrderDetail Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderDetail,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesOrderDetail)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesOrderDetail"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesOrderDetail Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesOrderDetail,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesOrderDetail object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesOrderDetail Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesOrderDetail</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesOrderDetail} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesOrderDetail},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesOrderDetail Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesOrderDetailServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductVendorService">
            <summary>
            An component type implementation of the 'ProductVendor' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductVendorService.#ctor">
            <summary>
            Initializes a new instance of the ProductVendorService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductListPriceHistoryService">
            <summary>
            An component type implementation of the 'ProductListPriceHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase">
            <summary>
             An object representation of the 'ProductListPriceHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductListPriceHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.CreateProductListPriceHistory(System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">List price start date.</param>
            <param name="_endDate">List price end date</param>
            <param name="_listPrice">Product list price.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductListPriceHistory_Product_ProductID key.
            	FK_ProductListPriceHistory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <returns>Returns a generic collection of ProductListPriceHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductListPriceHistory_Product_ProductID key.
            	FK_ProductListPriceHistory_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductListPriceHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetByProductIdStartDate(System.Int32,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductListPriceHistory_ProductID_StartDate index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">List price start date.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetByProductIdStartDate(System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductListPriceHistory_ProductID_StartDate index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">List price start date.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductListPriceHistory} of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductListPriceHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            public virtual method that Inserts a ProductListPriceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductListPriceHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductListPriceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductListPriceHistory entity = new ProductListPriceHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductListPriceHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductListPriceHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductListPriceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductListPriceHistory.
             <code><![CDATA[
             TList<ProductListPriceHistory> list = new TList<ProductListPriceHistory>();
             ProductListPriceHistory entity = new ProductListPriceHistory();
             entity.StringProperty = "foo";
             ProductListPriceHistory entity2 = new ProductListPriceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductListPriceHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            public virtual method that Updates a ProductListPriceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductListPriceHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductListPriceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductListPriceHistory entity = ProductListPriceHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductListPriceHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductListPriceHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductListPriceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductListPriceHistory.
             <code><![CDATA[
             TList<ProductListPriceHistory> list = new TList<ProductListPriceHistory>();
             ProductListPriceHistory entity = new ProductListPriceHistory();
             entity.StringProperty = "foo";
             ProductListPriceHistory entity2 = new ProductListPriceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductListPriceHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            public virtual method that Saves a ProductListPriceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductListPriceHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductListPriceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductListPriceHistory entity = ProductListPriceHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductListPriceHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductListPriceHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductListPriceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductListPriceHistory.
             <code><![CDATA[
             TList<ProductListPriceHistory> list = new TList<ProductListPriceHistory>();
             ProductListPriceHistory entity = new ProductListPriceHistory();
             entity.StringProperty = "foo";
             ProductListPriceHistory entity2 = new ProductListPriceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductListPriceHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            public virtual method that Deletes a ProductListPriceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductListPriceHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductListPriceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductListPriceHistory entity = ProductListPriceHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductListPriceHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductListPriceHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductListPriceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductListPriceHistory.
             <code><![CDATA[
             TList<ProductListPriceHistory> list = new TList<ProductListPriceHistory>();
             ProductListPriceHistory entity = new ProductListPriceHistory();
             entity.StringProperty = "foo";
             ProductListPriceHistory entity2 = new ProductListPriceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductListPriceHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductListPriceHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.Delete(System.Int32,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productId, System.DateTime _startDate
            </summary>
            <param name="_productId">ProductListPriceHistory pk id.</param>
            <param name="_startDate">ProductListPriceHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoadByProductIdStartDate(System.Int32,System.DateTime,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID</param>
            <param name="_startDate">List price start date.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductListPriceHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductListPriceHistory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductListPriceHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductListPriceHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductListPriceHistory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductListPriceHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductListPriceHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductListPriceHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductListPriceHistory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductListPriceHistory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductListPriceHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductListPriceHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductListPriceHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductListPriceHistory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductListPriceHistory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductListPriceHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductListPriceHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductListPriceHistoryService.#ctor">
            <summary>
            Initializes a new instance of the ProductListPriceHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IndividualService">
            <summary>
            An component type implementation of the 'Individual' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IndividualServiceBase">
            <summary>
             An object representation of the 'Individual' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Individual.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.CreateIndividual(System.Int32,System.Int32,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> instance.
            </summary>
            <param name="_customerId">Unique customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="_contactId">Identifies the customer in the Contact table. Foreign key to Contact.ContactID.</param>
            <param name="_demographics">Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetByContactId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Individual_Contact_ContactID key.
            	FK_Individual_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Identifies the customer in the Contact table. Foreign key to Contact.ContactID.</param>
            <returns>Returns a generic collection of Individual objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetByContactId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Individual_Contact_ContactID key.
            	FK_Individual_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Identifies the customer in the Contact table. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Get(Nettiers.AdventureWorks.Entities.IndividualKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetByCustomerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Individual_CustomerID index.
            </summary>
            <param name="_customerId">Unique customer identification number. Foreign key to Customer.CustomerID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Individual_CustomerID index.
            </summary>
            <param name="_customerId">Unique customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetByDemographics(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_Individual_Demographics index.
            </summary>
            <param name="_demographics">Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetByDemographics(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_Individual_Demographics index.
            </summary>
            <param name="_demographics">Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Individual} of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Individual</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Insert(Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            public virtual method that Inserts a Individual object into the datasource using a transaction.
            </summary>
            <param name="entity">Individual object to Insert.</param>
            <remarks>After Inserting into the datasource, the Individual object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Individual entity = new Individual();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IndividualService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Individual</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Individual</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Individual.
             <code><![CDATA[
             TList<Individual> list = new TList<Individual>();
             Individual entity = new Individual();
             entity.StringProperty = "foo";
             Individual entity2 = new Individual();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndividualService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Update(Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            public virtual method that Updates a Individual object into the datasource using a transaction.
            </summary>
            <param name="entity">Individual object to Update.</param>
            <remarks>After Updateing into the datasource, the Individual object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Individual entity = IndividualService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IndividualService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Individual</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Individual</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Individual.
             <code><![CDATA[
             TList<Individual> list = new TList<Individual>();
             Individual entity = new Individual();
             entity.StringProperty = "foo";
             Individual entity2 = new Individual();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndividualService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Save(Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            public virtual method that Saves a Individual object into the datasource using a transaction.
            </summary>
            <param name="entity">Individual object to Save.</param>
            <remarks>After Saveing into the datasource, the Individual object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Individual entity = IndividualService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IndividualService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Individual</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Individual</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Individual.
             <code><![CDATA[
             TList<Individual> list = new TList<Individual>();
             Individual entity = new Individual();
             entity.StringProperty = "foo";
             Individual entity2 = new Individual();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndividualService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Delete(Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            public virtual method that Deletes a Individual object into the datasource using a transaction.
            </summary>
            <param name="entity">Individual object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Individual object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Individual entity = IndividualService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IndividualService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Individual</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Individual</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Individual.
             <code><![CDATA[
             TList<Individual> list = new TList<Individual>();
             Individual entity = new Individual();
             entity.StringProperty = "foo";
             Individual entity2 = new Individual();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndividualService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Delete(Nettiers.AdventureWorks.Entities.IndividualKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _customerId
            </summary>
            <param name="_customerId">Individual pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoadByCustomerId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_customerId">Unique customer identification number. Foreign key to Customer.CustomerID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Individual Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoadByDemographics(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_demographics">Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Individual Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Individual Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Individual)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Individual,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Individual)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Individual Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Individual,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Individual Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Individual)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Individual)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Individual)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Individual"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Individual Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Individual,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Individual object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Individual Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Individual</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Individual} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Individual},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Individual Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.IndividualServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IndividualService.#ctor">
            <summary>
            Initializes a new instance of the IndividualService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase">
            <summary>
             An object representation of the 'EmployeeDepartmentHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the EmployeeDepartmentHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.CreateEmployeeDepartmentHistory(System.Int32,System.Int16,System.Byte,System.DateTime,System.Nullable{System.DateTime},System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> instance.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <param name="_startDate">Date the employee started work in the department.</param>
            <param name="_endDate">Date the employee left the department. NULL = Current department.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByEmployeeId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeeDepartmentHistory_Employee_EmployeeID key.
            	FK_EmployeeDepartmentHistory_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <returns>Returns a generic collection of EmployeeDepartmentHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByEmployeeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeeDepartmentHistory_Employee_EmployeeID key.
            	FK_EmployeeDepartmentHistory_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Get(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByDepartmentId(System.Int16)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_EmployeeDepartmentHistory_DepartmentID index.
            </summary>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByDepartmentId(System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_EmployeeDepartmentHistory_DepartmentID index.
            </summary>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByShiftId(System.Byte)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_EmployeeDepartmentHistory_ShiftID index.
            </summary>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByShiftId(System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_EmployeeDepartmentHistory_ShiftID index.
            </summary>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByEmployeeIdStartDateDepartmentIdShiftId(System.Int32,System.DateTime,System.Int16,System.Byte)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_EmployeeDepartmentHistory_EmployeeID_StartDate_DepartmentID index.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_startDate">Date the employee started work in the department.</param>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetByEmployeeIdStartDateDepartmentIdShiftId(System.Int32,System.DateTime,System.Int16,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_EmployeeDepartmentHistory_EmployeeID_StartDate_DepartmentID index.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_startDate">Date the employee started work in the department.</param>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{EmployeeDepartmentHistory} of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>EmployeeDepartmentHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            public virtual method that Inserts a EmployeeDepartmentHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeDepartmentHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the EmployeeDepartmentHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            EmployeeDepartmentHistory entity = new EmployeeDepartmentHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	EmployeeDepartmentHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeDepartmentHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>EmployeeDepartmentHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of EmployeeDepartmentHistory.
             <code><![CDATA[
             TList<EmployeeDepartmentHistory> list = new TList<EmployeeDepartmentHistory>();
             EmployeeDepartmentHistory entity = new EmployeeDepartmentHistory();
             entity.StringProperty = "foo";
             EmployeeDepartmentHistory entity2 = new EmployeeDepartmentHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeDepartmentHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            public virtual method that Updates a EmployeeDepartmentHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeDepartmentHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the EmployeeDepartmentHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            EmployeeDepartmentHistory entity = EmployeeDepartmentHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	EmployeeDepartmentHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeDepartmentHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>EmployeeDepartmentHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of EmployeeDepartmentHistory.
             <code><![CDATA[
             TList<EmployeeDepartmentHistory> list = new TList<EmployeeDepartmentHistory>();
             EmployeeDepartmentHistory entity = new EmployeeDepartmentHistory();
             entity.StringProperty = "foo";
             EmployeeDepartmentHistory entity2 = new EmployeeDepartmentHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeDepartmentHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            public virtual method that Saves a EmployeeDepartmentHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeDepartmentHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the EmployeeDepartmentHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            EmployeeDepartmentHistory entity = EmployeeDepartmentHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	EmployeeDepartmentHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeDepartmentHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>EmployeeDepartmentHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of EmployeeDepartmentHistory.
             <code><![CDATA[
             TList<EmployeeDepartmentHistory> list = new TList<EmployeeDepartmentHistory>();
             EmployeeDepartmentHistory entity = new EmployeeDepartmentHistory();
             entity.StringProperty = "foo";
             EmployeeDepartmentHistory entity2 = new EmployeeDepartmentHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeDepartmentHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            public virtual method that Deletes a EmployeeDepartmentHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeDepartmentHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the EmployeeDepartmentHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            EmployeeDepartmentHistory entity = EmployeeDepartmentHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	EmployeeDepartmentHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeDepartmentHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>EmployeeDepartmentHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of EmployeeDepartmentHistory.
             <code><![CDATA[
             TList<EmployeeDepartmentHistory> list = new TList<EmployeeDepartmentHistory>();
             EmployeeDepartmentHistory entity = new EmployeeDepartmentHistory();
             entity.StringProperty = "foo";
             EmployeeDepartmentHistory entity2 = new EmployeeDepartmentHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeDepartmentHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.Delete(System.Int32,System.DateTime,System.Int16,System.Byte)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _employeeId, System.DateTime _startDate, System.Int16 _departmentId, System.Byte _shiftId
            </summary>
            <param name="_employeeId">EmployeeDepartmentHistory pk id.</param>
            <param name="_startDate">EmployeeDepartmentHistory pk id.</param>
            <param name="_departmentId">EmployeeDepartmentHistory pk id.</param>
            <param name="_shiftId">EmployeeDepartmentHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoadByDepartmentId(System.Int16,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeeDepartmentHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoadByShiftId(System.Byte,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeeDepartmentHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoadByEmployeeIdStartDateDepartmentIdShiftId(System.Int32,System.DateTime,System.Int16,System.Byte,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_employeeId">Employee identification number. Foreign key to Employee.EmployeeID.</param>
            <param name="_startDate">Date the employee started work in the department.</param>
            <param name="_departmentId">Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</param>
            <param name="_shiftId">Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeeDepartmentHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">EmployeeDepartmentHistory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">EmployeeDepartmentHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeeDepartmentHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">EmployeeDepartmentHistory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the EmployeeDepartmentHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">EmployeeDepartmentHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>EmployeeDepartmentHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{EmployeeDepartmentHistory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeDepartmentHistory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">EmployeeDepartmentHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryService">
            <summary>
            An component type implementation of the 'EmployeeDepartmentHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeDepartmentHistoryService.#ctor">
            <summary>
            Initializes a new instance of the EmployeeDepartmentHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CustomerAddressService">
            <summary>
            An component type implementation of the 'CustomerAddress' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CustomerAddressService.#ctor">
            <summary>
            Initializes a new instance of the CustomerAddressService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.WorkOrderRoutingService">
            <summary>
            An component type implementation of the 'WorkOrderRouting' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderRoutingService.#ctor">
            <summary>
            Initializes a new instance of the WorkOrderRoutingService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductModelService">
            <summary>
            An component type implementation of the 'ProductModel' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductModelServiceBase">
            <summary>
             An object representation of the 'ProductModel' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductModel.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.CreateProductModel(System.String,System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> instance.
            </summary>
            <param name="_name">Product model description.</param>
            <param name="_catalogDescription">Detailed product catalog information in xml format.</param>
            <param name="_instructions">Manufacturing instructions in xml format.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductModelKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductModel_Name index.
            </summary>
            <param name="_name">Product model description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductModel_Name index.
            </summary>
            <param name="_name">Product model description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductModel_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductModel_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByProductModelId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductModel_ProductModelID index.
            </summary>
            <param name="_productModelId">Primary key for ProductModel records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByProductModelId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductModel_ProductModelID index.
            </summary>
            <param name="_productModelId">Primary key for ProductModel records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByCatalogDescription(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_ProductModel_CatalogDescription index.
            </summary>
            <param name="_catalogDescription">Detailed product catalog information in xml format.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByCatalogDescription(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_ProductModel_CatalogDescription index.
            </summary>
            <param name="_catalogDescription">Detailed product catalog information in xml format.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByInstructions(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_ProductModel_Instructions index.
            </summary>
            <param name="_instructions">Manufacturing instructions in xml format.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByInstructions(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_ProductModel_Instructions index.
            </summary>
            <param name="_instructions">Manufacturing instructions in xml format.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductModel} of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductModel</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            public virtual method that Inserts a ProductModel object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModel object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductModel object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductModel entity = new ProductModel();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductModelService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModel</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductModel</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductModel.
             <code><![CDATA[
             TList<ProductModel> list = new TList<ProductModel>();
             ProductModel entity = new ProductModel();
             entity.StringProperty = "foo";
             ProductModel entity2 = new ProductModel();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            public virtual method that Updates a ProductModel object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModel object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductModel object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductModel entity = ProductModelService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductModelService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModel</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductModel</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductModel.
             <code><![CDATA[
             TList<ProductModel> list = new TList<ProductModel>();
             ProductModel entity = new ProductModel();
             entity.StringProperty = "foo";
             ProductModel entity2 = new ProductModel();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            public virtual method that Saves a ProductModel object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModel object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductModel object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductModel entity = ProductModelService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductModelService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModel</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductModel</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductModel.
             <code><![CDATA[
             TList<ProductModel> list = new TList<ProductModel>();
             ProductModel entity = new ProductModel();
             entity.StringProperty = "foo";
             ProductModel entity2 = new ProductModel();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            public virtual method that Deletes a ProductModel object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductModel object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductModel object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductModel entity = ProductModelService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductModelService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductModel</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductModel</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductModel.
             <code><![CDATA[
             TList<ProductModel> list = new TList<ProductModel>();
             ProductModel entity = new ProductModel();
             entity.StringProperty = "foo";
             ProductModel entity2 = new ProductModel();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductModelService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductModelKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productModelId
            </summary>
            <param name="_productModelId">ProductModel pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByIllustrationIdFromProductModelIllustration(System.Int32)">
            <summary>
            	Gets ProductModel objects from the datasource by IllustrationID in the
            	ProductModelIllustration table. Table ProductModel is related to table Illustration
            	through the (M:N) relationship defined in the ProductModelIllustration table.
            </summary>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <returns>Returns a typed collection of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByIllustrationIdFromProductModelIllustration(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductModel objects from the datasource by IllustrationID in the
            	ProductModelIllustration table. Table ProductModel is related to table Illustration
            	through the (M:N) relationship defined in the ProductModelIllustration table.
            </summary>
            <param name="_illustrationId">Primary key. Foreign key to Illustration.IllustrationID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByCultureIdFromProductModelProductDescriptionCulture(System.String)">
            <summary>
            	Gets ProductModel objects from the datasource by CultureID in the
            	ProductModelProductDescriptionCulture table. Table ProductModel is related to table Culture
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <returns>Returns a typed collection of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByCultureIdFromProductModelProductDescriptionCulture(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductModel objects from the datasource by CultureID in the
            	ProductModelProductDescriptionCulture table. Table ProductModel is related to table Culture
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByProductDescriptionIdFromProductModelProductDescriptionCulture(System.Int32)">
            <summary>
            	Gets ProductModel objects from the datasource by ProductDescriptionID in the
            	ProductModelProductDescriptionCulture table. Table ProductModel is related to table ProductDescription
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <returns>Returns a typed collection of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.GetByProductDescriptionIdFromProductModelProductDescriptionCulture(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ProductModel objects from the datasource by ProductDescriptionID in the
            	ProductModelProductDescriptionCulture table. Table ProductModel is related to table ProductDescription
            	through the (M:N) relationship defined in the ProductModelProductDescriptionCulture table.
            </summary>
            <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ProductModel objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Product model description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModel Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModel Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoadByProductModelId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productModelId">Primary key for ProductModel records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModel Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoadByCatalogDescription(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_catalogDescription">Detailed product catalog information in xml format.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModel Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoadByInstructions(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_instructions">Manufacturing instructions in xml format.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModel Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductModel Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModel)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModel,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModel)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductModel Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModel,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductModel Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModel)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductModel)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductModel)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductModel"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductModel Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductModel,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductModel object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductModel Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductModel</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductModel} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductModel},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductModel Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductModelServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelService.#ctor">
            <summary>
            Initializes a new instance of the ProductModelService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase">
            <summary>
             An object representation of the 'ProductDocument' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductDocument.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.CreateProductDocument(System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetByDocumentId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductDocument_Document_DocumentID key.
            	FK_ProductDocument_Document_DocumentID Description: Foreign key constraint referencing Document.DocumentID.
            </summary>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <returns>Returns a generic collection of ProductDocument objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetByDocumentId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductDocument_Document_DocumentID key.
            	FK_ProductDocument_Document_DocumentID Description: Foreign key constraint referencing Document.DocumentID.
            </summary>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetByProductId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductDocument_Product_ProductID key.
            	FK_ProductDocument_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns a generic collection of ProductDocument objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductDocument_Product_ProductID key.
            	FK_ProductDocument_Product_ProductID Description: Foreign key constraint referencing Product.ProductID.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductDocumentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetByProductIdDocumentId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductDocument_ProductID_DocumentID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetByProductIdDocumentId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductDocument_ProductID_DocumentID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductDocument} of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductDocument</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            public virtual method that Inserts a ProductDocument object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDocument object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductDocument object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductDocument entity = new ProductDocument();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductDocumentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDocument</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductDocument</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductDocument.
             <code><![CDATA[
             TList<ProductDocument> list = new TList<ProductDocument>();
             ProductDocument entity = new ProductDocument();
             entity.StringProperty = "foo";
             ProductDocument entity2 = new ProductDocument();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDocumentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            public virtual method that Updates a ProductDocument object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDocument object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductDocument object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductDocument entity = ProductDocumentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductDocumentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDocument</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductDocument</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductDocument.
             <code><![CDATA[
             TList<ProductDocument> list = new TList<ProductDocument>();
             ProductDocument entity = new ProductDocument();
             entity.StringProperty = "foo";
             ProductDocument entity2 = new ProductDocument();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDocumentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            public virtual method that Saves a ProductDocument object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDocument object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductDocument object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductDocument entity = ProductDocumentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductDocumentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDocument</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductDocument</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductDocument.
             <code><![CDATA[
             TList<ProductDocument> list = new TList<ProductDocument>();
             ProductDocument entity = new ProductDocument();
             entity.StringProperty = "foo";
             ProductDocument entity2 = new ProductDocument();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDocumentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            public virtual method that Deletes a ProductDocument object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductDocument object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductDocument object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductDocument entity = ProductDocumentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductDocumentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductDocument</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductDocument</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductDocument.
             <code><![CDATA[
             TList<ProductDocument> list = new TList<ProductDocument>();
             ProductDocument entity = new ProductDocument();
             entity.StringProperty = "foo";
             ProductDocument entity2 = new ProductDocument();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductDocumentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductDocumentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productId, System.Int32 _documentId
            </summary>
            <param name="_productId">ProductDocument pk id.</param>
            <param name="_documentId">ProductDocument pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoadByProductIdDocumentId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductDocument Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductDocument Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDocument)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDocument,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDocument)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductDocument Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDocument,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductDocument Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDocument)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductDocument)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductDocument)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductDocument"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductDocument Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductDocument,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductDocument object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductDocument Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductDocument</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductDocument} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductDocument},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductDocument Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductDocumentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.NullFkeyParentService">
            <summary>
            An component type implementation of the 'NullFKeyParent' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.NullFkeyParentService.#ctor">
            <summary>
            Initializes a new instance of the NullFkeyParentService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:Nettiers.AdventureWorks.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:Nettiers.AdventureWorks.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.Copy(Nettiers.AdventureWorks.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:Nettiers.AdventureWorks.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:Nettiers.AdventureWorks.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:Nettiers.AdventureWorks.Data.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <see cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VStoreWithDemographicsService">
            <summary>
             An component type implementation of the 'vStoreWithDemographics' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase">
            <summary>
             An object representation of the 'vStoreWithDemographics' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VStoreWithDemographics.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VStoreWithDemographics"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VStoreWithDemographics"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.CreateVStoreWithDemographics(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VStoreWithDemographics"/> instance.
            </summary>
            <param name="_customerId"></param>
            <param name="_name"></param>
            <param name="_contactType"></param>
            <param name="_title"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_suffix"></param>
            <param name="_phone"></param>
            <param name="_emailAddress"></param>
            <param name="_emailPromotion"></param>
            <param name="_addressType"></param>
            <param name="_addressLine1"></param>
            <param name="_addressLine2"></param>
            <param name="_city"></param>
            <param name="_stateProvinceName"></param>
            <param name="_postalCode"></param>
            <param name="_countryRegionName"></param>
            <param name="_annualSales"></param>
            <param name="_annualRevenue"></param>
            <param name="_bankName"></param>
            <param name="_businessType"></param>
            <param name="_yearOpened"></param>
            <param name="_specialty"></param>
            <param name="_squareFeet"></param>
            <param name="_brands"></param>
            <param name="_internet"></param>
            <param name="_numberEmployees"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VStoreWithDemographics} of <c>VStoreWithDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VStoreWithDemographics"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VStoreWithDemographics"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VStoreWithDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VStoreWithDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VStoreWithDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VStoreWithDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VStoreWithDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VStoreWithDemographics</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStoreWithDemographicsService.#ctor">
            <summary>
            Initializes a new instance of the VStoreWithDemographicsService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VIndividualCustomerService">
            <summary>
             An component type implementation of the 'vIndividualCustomer' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VIndividualCustomerService.#ctor">
            <summary>
            Initializes a new instance of the VIndividualCustomerService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.WorkOrderService">
            <summary>
            An component type implementation of the 'WorkOrder' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.WorkOrderServiceBase">
            <summary>
             An object representation of the 'WorkOrder' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the WorkOrder.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.CreateWorkOrder(System.Int32,System.Int32,System.Int16,System.DateTime,System.Nullable{System.DateTime},System.DateTime,System.Nullable{System.Int16},System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> instance.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="_orderQty">Product quantity to build.</param>
            <param name="_scrappedQty">Quantity that failed inspection.</param>
            <param name="_startDate">Work order start date.</param>
            <param name="_endDate">Work order end date.</param>
            <param name="_dueDate">Work order due date.</param>
            <param name="_scrapReasonId">Reason for inspection failure.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Get(Nettiers.AdventureWorks.Entities.WorkOrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_WorkOrder_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_WorkOrder_ProductID index.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetByScrapReasonId(System.Nullable{System.Int16})">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_WorkOrder_ScrapReasonID index.
            </summary>
            <param name="_scrapReasonId">Reason for inspection failure.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetByScrapReasonId(System.Nullable{System.Int16},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_WorkOrder_ScrapReasonID index.
            </summary>
            <param name="_scrapReasonId">Reason for inspection failure.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetByWorkOrderId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_WorkOrder_WorkOrderID index.
            </summary>
            <param name="_workOrderId">Primary key for WorkOrder records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetByWorkOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_WorkOrder_WorkOrderID index.
            </summary>
            <param name="_workOrderId">Primary key for WorkOrder records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{WorkOrder} of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WorkOrder</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Insert(Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            public virtual method that Inserts a WorkOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrder object to Insert.</param>
            <remarks>After Inserting into the datasource, the WorkOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            WorkOrder entity = new WorkOrder();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WorkOrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrder</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>WorkOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of WorkOrder.
             <code><![CDATA[
             TList<WorkOrder> list = new TList<WorkOrder>();
             WorkOrder entity = new WorkOrder();
             entity.StringProperty = "foo";
             WorkOrder entity2 = new WorkOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Update(Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            public virtual method that Updates a WorkOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrder object to Update.</param>
            <remarks>After Updateing into the datasource, the WorkOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            WorkOrder entity = WorkOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WorkOrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrder</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>WorkOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of WorkOrder.
             <code><![CDATA[
             TList<WorkOrder> list = new TList<WorkOrder>();
             WorkOrder entity = new WorkOrder();
             entity.StringProperty = "foo";
             WorkOrder entity2 = new WorkOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Save(Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            public virtual method that Saves a WorkOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrder object to Save.</param>
            <remarks>After Saveing into the datasource, the WorkOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            WorkOrder entity = WorkOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	WorkOrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrder</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>WorkOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of WorkOrder.
             <code><![CDATA[
             TList<WorkOrder> list = new TList<WorkOrder>();
             WorkOrder entity = new WorkOrder();
             entity.StringProperty = "foo";
             WorkOrder entity2 = new WorkOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Delete(Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            public virtual method that Deletes a WorkOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkOrder object to Delete.</param>
            <remarks>After Deleteing into the datasource, the WorkOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            WorkOrder entity = WorkOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WorkOrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkOrder</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>WorkOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of WorkOrder.
             <code><![CDATA[
             TList<WorkOrder> list = new TList<WorkOrder>();
             WorkOrder entity = new WorkOrder();
             entity.StringProperty = "foo";
             WorkOrder entity2 = new WorkOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkOrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Delete(Nettiers.AdventureWorks.Entities.WorkOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _workOrderId
            </summary>
            <param name="_workOrderId">WorkOrder pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Product identification number. Foreign key to Product.ProductID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoadByScrapReasonId(System.Nullable{System.Int16},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_scrapReasonId">Reason for inspection failure.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoadByWorkOrderId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_workOrderId">Primary key for WorkOrder records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">WorkOrder Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrder,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">WorkOrder Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrder,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkOrder Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.WorkOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.WorkOrder)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.WorkOrder"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">WorkOrder Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.WorkOrder,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the WorkOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">WorkOrder Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>WorkOrder</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{WorkOrder} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.WorkOrder},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">WorkOrder Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.WorkOrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.WorkOrderService.#ctor">
            <summary>
            Initializes a new instance of the WorkOrderService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.StoreContactServiceBase">
            <summary>
             An object representation of the 'StoreContact' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the StoreContact.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.CreateStoreContact(System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> instance.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="_contactTypeId">Contact type such as owner or purchasing agent. Foreign key to ContactType.ContactTypeID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByCustomerId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_StoreContact_Store_CustomerID key.
            	FK_StoreContact_Store_CustomerID Description: Foreign key constraint referencing Store.CustomerID.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <returns>Returns a generic collection of StoreContact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByCustomerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_StoreContact_Store_CustomerID key.
            	FK_StoreContact_Store_CustomerID Description: Foreign key constraint referencing Store.CustomerID.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Get(Nettiers.AdventureWorks.Entities.StoreContactKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StoreContact_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StoreContact_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByContactId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_StoreContact_ContactID index.
            </summary>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByContactId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_StoreContact_ContactID index.
            </summary>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByContactTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_StoreContact_ContactTypeID index.
            </summary>
            <param name="_contactTypeId">Contact type such as owner or purchasing agent. Foreign key to ContactType.ContactTypeID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByContactTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_StoreContact_ContactTypeID index.
            </summary>
            <param name="_contactTypeId">Contact type such as owner or purchasing agent. Foreign key to ContactType.ContactTypeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByCustomerIdContactId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_StoreContact_CustomerID_ContactID index.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetByCustomerIdContactId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_StoreContact_CustomerID_ContactID index.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{StoreContact} of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StoreContact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Insert(Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            public virtual method that Inserts a StoreContact object into the datasource using a transaction.
            </summary>
            <param name="entity">StoreContact object to Insert.</param>
            <remarks>After Inserting into the datasource, the StoreContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            StoreContact entity = new StoreContact();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StoreContactService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StoreContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>StoreContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of StoreContact.
             <code><![CDATA[
             TList<StoreContact> list = new TList<StoreContact>();
             StoreContact entity = new StoreContact();
             entity.StringProperty = "foo";
             StoreContact entity2 = new StoreContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreContactService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Update(Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            public virtual method that Updates a StoreContact object into the datasource using a transaction.
            </summary>
            <param name="entity">StoreContact object to Update.</param>
            <remarks>After Updateing into the datasource, the StoreContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            StoreContact entity = StoreContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StoreContactService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StoreContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>StoreContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of StoreContact.
             <code><![CDATA[
             TList<StoreContact> list = new TList<StoreContact>();
             StoreContact entity = new StoreContact();
             entity.StringProperty = "foo";
             StoreContact entity2 = new StoreContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreContactService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Save(Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            public virtual method that Saves a StoreContact object into the datasource using a transaction.
            </summary>
            <param name="entity">StoreContact object to Save.</param>
            <remarks>After Saveing into the datasource, the StoreContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            StoreContact entity = StoreContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StoreContactService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StoreContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>StoreContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of StoreContact.
             <code><![CDATA[
             TList<StoreContact> list = new TList<StoreContact>();
             StoreContact entity = new StoreContact();
             entity.StringProperty = "foo";
             StoreContact entity2 = new StoreContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreContactService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            public virtual method that Deletes a StoreContact object into the datasource using a transaction.
            </summary>
            <param name="entity">StoreContact object to Delete.</param>
            <remarks>After Deleteing into the datasource, the StoreContact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            StoreContact entity = StoreContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StoreContactService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StoreContact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>StoreContact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of StoreContact.
             <code><![CDATA[
             TList<StoreContact> list = new TList<StoreContact>();
             StoreContact entity = new StoreContact();
             entity.StringProperty = "foo";
             StoreContact entity2 = new StoreContact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreContactService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.StoreContactKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _customerId, System.Int32 _contactId
            </summary>
            <param name="_customerId">StoreContact pk id.</param>
            <param name="_contactId">StoreContact pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StoreContact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoadByContactId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StoreContact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoadByContactTypeId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_contactTypeId">Contact type such as owner or purchasing agent. Foreign key to ContactType.ContactTypeID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StoreContact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoadByCustomerIdContactId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="_contactId">Contact (store employee) identification number. Foreign key to Contact.ContactID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StoreContact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">StoreContact Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StoreContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StoreContact,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StoreContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">StoreContact Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StoreContact,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StoreContact Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StoreContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StoreContact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.StoreContact)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.StoreContact"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">StoreContact Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.StoreContact,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the StoreContact object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">StoreContact Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>StoreContact</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{StoreContact} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StoreContact},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">StoreContact Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.StoreContactServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.StateProvinceServiceBase">
            <summary>
             An object representation of the 'StateProvince' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the StateProvince.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.CreateStateProvince(System.String,System.String,System.Boolean,System.String,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> instance.
            </summary>
            <param name="_stateProvinceCode">ISO standard state or province code.</param>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <param name="_isOnlyStateProvinceFlag">0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.</param>
            <param name="_name">State or province description.</param>
            <param name="_territoryId">ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByCountryRegionCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_StateProvince_CountryRegion_CountryRegionCode key.
            	FK_StateProvince_CountryRegion_CountryRegionCode Description: Foreign key constraint referencing CountryRegion.CountryRegionCode.
            </summary>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <returns>Returns a generic collection of StateProvince objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByCountryRegionCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_StateProvince_CountryRegion_CountryRegionCode key.
            	FK_StateProvince_CountryRegion_CountryRegionCode Description: Foreign key constraint referencing CountryRegion.CountryRegionCode.
            </summary>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByTerritoryId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_StateProvince_SalesTerritory_TerritoryID key.
            	FK_StateProvince_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <returns>Returns a generic collection of StateProvince objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByTerritoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_StateProvince_SalesTerritory_TerritoryID key.
            	FK_StateProvince_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Get(Nettiers.AdventureWorks.Entities.StateProvinceKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StateProvince_Name index.
            </summary>
            <param name="_name">State or province description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StateProvince_Name index.
            </summary>
            <param name="_name">State or province description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StateProvince_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StateProvince_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByStateProvinceCodeCountryRegionCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StateProvince_StateProvinceCode_CountryRegionCode index.
            </summary>
            <param name="_stateProvinceCode">ISO standard state or province code.</param>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByStateProvinceCodeCountryRegionCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_StateProvince_StateProvinceCode_CountryRegionCode index.
            </summary>
            <param name="_stateProvinceCode">ISO standard state or province code.</param>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByStateProvinceId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_StateProvince_StateProvinceID index.
            </summary>
            <param name="_stateProvinceId">Primary key for StateProvince records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetByStateProvinceId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_StateProvince_StateProvinceID index.
            </summary>
            <param name="_stateProvinceId">Primary key for StateProvince records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{StateProvince} of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StateProvince</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Insert(Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            public virtual method that Inserts a StateProvince object into the datasource using a transaction.
            </summary>
            <param name="entity">StateProvince object to Insert.</param>
            <remarks>After Inserting into the datasource, the StateProvince object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            StateProvince entity = new StateProvince();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StateProvinceService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StateProvince</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>StateProvince</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of StateProvince.
             <code><![CDATA[
             TList<StateProvince> list = new TList<StateProvince>();
             StateProvince entity = new StateProvince();
             entity.StringProperty = "foo";
             StateProvince entity2 = new StateProvince();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateProvinceService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Update(Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            public virtual method that Updates a StateProvince object into the datasource using a transaction.
            </summary>
            <param name="entity">StateProvince object to Update.</param>
            <remarks>After Updateing into the datasource, the StateProvince object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            StateProvince entity = StateProvinceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StateProvinceService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StateProvince</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>StateProvince</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of StateProvince.
             <code><![CDATA[
             TList<StateProvince> list = new TList<StateProvince>();
             StateProvince entity = new StateProvince();
             entity.StringProperty = "foo";
             StateProvince entity2 = new StateProvince();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateProvinceService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Save(Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            public virtual method that Saves a StateProvince object into the datasource using a transaction.
            </summary>
            <param name="entity">StateProvince object to Save.</param>
            <remarks>After Saveing into the datasource, the StateProvince object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            StateProvince entity = StateProvinceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StateProvinceService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StateProvince</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>StateProvince</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of StateProvince.
             <code><![CDATA[
             TList<StateProvince> list = new TList<StateProvince>();
             StateProvince entity = new StateProvince();
             entity.StringProperty = "foo";
             StateProvince entity2 = new StateProvince();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateProvinceService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Delete(Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            public virtual method that Deletes a StateProvince object into the datasource using a transaction.
            </summary>
            <param name="entity">StateProvince object to Delete.</param>
            <remarks>After Deleteing into the datasource, the StateProvince object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            StateProvince entity = StateProvinceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StateProvinceService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StateProvince</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>StateProvince</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of StateProvince.
             <code><![CDATA[
             TList<StateProvince> list = new TList<StateProvince>();
             StateProvince entity = new StateProvince();
             entity.StringProperty = "foo";
             StateProvince entity2 = new StateProvince();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StateProvinceService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Delete(Nettiers.AdventureWorks.Entities.StateProvinceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _stateProvinceId
            </summary>
            <param name="_stateProvinceId">StateProvince pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">State or province description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StateProvince Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StateProvince Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoadByStateProvinceCodeCountryRegionCode(System.String,System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_stateProvinceCode">ISO standard state or province code.</param>
            <param name="_countryRegionCode">ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. </param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StateProvince Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoadByStateProvinceId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_stateProvinceId">Primary key for StateProvince records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StateProvince Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">StateProvince Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StateProvince)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StateProvince,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StateProvince)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">StateProvince Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StateProvince,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StateProvince Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StateProvince)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.StateProvince)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.StateProvince)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.StateProvince"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">StateProvince Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.StateProvince,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the StateProvince object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">StateProvince Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>StateProvince</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{StateProvince} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.StateProvince},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">StateProvince Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.StateProvinceServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.StateProvinceService">
            <summary>
            An component type implementation of the 'StateProvince' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StateProvinceService.#ctor">
            <summary>
            Initializes a new instance of the StateProvinceService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ShipMethodServiceBase">
            <summary>
             An object representation of the 'ShipMethod' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ShipMethod.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.CreateShipMethod(System.String,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> instance.
            </summary>
            <param name="_name">Shipping company name.</param>
            <param name="_shipBase">Minimum shipping charge.</param>
            <param name="_shipRate">Shipping charge per pound.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Get(Nettiers.AdventureWorks.Entities.ShipMethodKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ShipMethod_Name index.
            </summary>
            <param name="_name">Shipping company name.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ShipMethod_Name index.
            </summary>
            <param name="_name">Shipping company name.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ShipMethod_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ShipMethod_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetByShipMethodId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ShipMethod_ShipMethodID index.
            </summary>
            <param name="_shipMethodId">Primary key for ShipMethod records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetByShipMethodId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ShipMethod_ShipMethodID index.
            </summary>
            <param name="_shipMethodId">Primary key for ShipMethod records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ShipMethod} of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ShipMethod</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Insert(Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            public virtual method that Inserts a ShipMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">ShipMethod object to Insert.</param>
            <remarks>After Inserting into the datasource, the ShipMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ShipMethod entity = new ShipMethod();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ShipMethodService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShipMethod</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ShipMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ShipMethod.
             <code><![CDATA[
             TList<ShipMethod> list = new TList<ShipMethod>();
             ShipMethod entity = new ShipMethod();
             entity.StringProperty = "foo";
             ShipMethod entity2 = new ShipMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShipMethodService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Update(Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            public virtual method that Updates a ShipMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">ShipMethod object to Update.</param>
            <remarks>After Updateing into the datasource, the ShipMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ShipMethod entity = ShipMethodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ShipMethodService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShipMethod</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ShipMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ShipMethod.
             <code><![CDATA[
             TList<ShipMethod> list = new TList<ShipMethod>();
             ShipMethod entity = new ShipMethod();
             entity.StringProperty = "foo";
             ShipMethod entity2 = new ShipMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShipMethodService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Save(Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            public virtual method that Saves a ShipMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">ShipMethod object to Save.</param>
            <remarks>After Saveing into the datasource, the ShipMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ShipMethod entity = ShipMethodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ShipMethodService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShipMethod</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ShipMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ShipMethod.
             <code><![CDATA[
             TList<ShipMethod> list = new TList<ShipMethod>();
             ShipMethod entity = new ShipMethod();
             entity.StringProperty = "foo";
             ShipMethod entity2 = new ShipMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShipMethodService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Delete(Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            public virtual method that Deletes a ShipMethod object into the datasource using a transaction.
            </summary>
            <param name="entity">ShipMethod object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ShipMethod object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ShipMethod entity = ShipMethodService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ShipMethodService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ShipMethod</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ShipMethod</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ShipMethod.
             <code><![CDATA[
             TList<ShipMethod> list = new TList<ShipMethod>();
             ShipMethod entity = new ShipMethod();
             entity.StringProperty = "foo";
             ShipMethod entity2 = new ShipMethod();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ShipMethodService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Delete(Nettiers.AdventureWorks.Entities.ShipMethodKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _shipMethodId
            </summary>
            <param name="_shipMethodId">ShipMethod pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Shipping company name.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShipMethod Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShipMethod Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoadByShipMethodId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_shipMethodId">Primary key for ShipMethod records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShipMethod Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ShipMethod Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShipMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShipMethod,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShipMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ShipMethod Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShipMethod,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ShipMethod Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShipMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ShipMethod)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ShipMethod)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ShipMethod"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ShipMethod Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ShipMethod,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ShipMethod object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ShipMethod Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ShipMethod</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ShipMethod} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ShipMethod},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ShipMethod Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ShipMethodServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase">
            <summary>
             An object representation of the 'SalesTerritoryHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SalesTerritoryHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.CreateSalesTerritoryHistory(System.Int32,System.Int32,System.DateTime,System.Nullable{System.DateTime},System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> instance.
            </summary>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="_startDate">Date the sales representive started work in the territory.</param>
            <param name="_endDate">Date the sales representative left work in the territory.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetBySalesPersonId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesTerritoryHistory_SalesPerson_SalesPersonID key.
            	FK_SalesTerritoryHistory_SalesPerson_SalesPersonID Description: Foreign key constraint referencing SalesPerson.SalesPersonID.
            </summary>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <returns>Returns a generic collection of SalesTerritoryHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetBySalesPersonId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesTerritoryHistory_SalesPerson_SalesPersonID key.
            	FK_SalesTerritoryHistory_SalesPerson_SalesPersonID Description: Foreign key constraint referencing SalesPerson.SalesPersonID.
            </summary>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetByTerritoryId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesTerritoryHistory_SalesTerritory_TerritoryID key.
            	FK_SalesTerritoryHistory_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <returns>Returns a generic collection of SalesTerritoryHistory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetByTerritoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_SalesTerritoryHistory_SalesTerritory_TerritoryID key.
            	FK_SalesTerritoryHistory_SalesTerritory_TerritoryID Description: Foreign key constraint referencing SalesTerritory.TerritoryID.
            </summary>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Get(Nettiers.AdventureWorks.Entities.SalesTerritoryHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTerritoryHistory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_SalesTerritoryHistory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetBySalesPersonIdStartDateTerritoryId(System.Int32,System.DateTime,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesTerritoryHistory_SalesPersonID_StartDate_TerritoryID index.
            </summary>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <param name="_startDate">Date the sales representive started work in the territory.</param>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetBySalesPersonIdStartDateTerritoryId(System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_SalesTerritoryHistory_SalesPersonID_StartDate_TerritoryID index.
            </summary>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <param name="_startDate">Date the sales representive started work in the territory.</param>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SalesTerritoryHistory} of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SalesTerritoryHistory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            public virtual method that Inserts a SalesTerritoryHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritoryHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the SalesTerritoryHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SalesTerritoryHistory entity = new SalesTerritoryHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SalesTerritoryHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritoryHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SalesTerritoryHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SalesTerritoryHistory.
             <code><![CDATA[
             TList<SalesTerritoryHistory> list = new TList<SalesTerritoryHistory>();
             SalesTerritoryHistory entity = new SalesTerritoryHistory();
             entity.StringProperty = "foo";
             SalesTerritoryHistory entity2 = new SalesTerritoryHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            public virtual method that Updates a SalesTerritoryHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritoryHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the SalesTerritoryHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SalesTerritoryHistory entity = SalesTerritoryHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SalesTerritoryHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritoryHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SalesTerritoryHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SalesTerritoryHistory.
             <code><![CDATA[
             TList<SalesTerritoryHistory> list = new TList<SalesTerritoryHistory>();
             SalesTerritoryHistory entity = new SalesTerritoryHistory();
             entity.StringProperty = "foo";
             SalesTerritoryHistory entity2 = new SalesTerritoryHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            public virtual method that Saves a SalesTerritoryHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritoryHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the SalesTerritoryHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SalesTerritoryHistory entity = SalesTerritoryHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SalesTerritoryHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritoryHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SalesTerritoryHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SalesTerritoryHistory.
             <code><![CDATA[
             TList<SalesTerritoryHistory> list = new TList<SalesTerritoryHistory>();
             SalesTerritoryHistory entity = new SalesTerritoryHistory();
             entity.StringProperty = "foo";
             SalesTerritoryHistory entity2 = new SalesTerritoryHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            public virtual method that Deletes a SalesTerritoryHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">SalesTerritoryHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SalesTerritoryHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SalesTerritoryHistory entity = SalesTerritoryHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SalesTerritoryHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SalesTerritoryHistory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SalesTerritoryHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SalesTerritoryHistory.
             <code><![CDATA[
             TList<SalesTerritoryHistory> list = new TList<SalesTerritoryHistory>();
             SalesTerritoryHistory entity = new SalesTerritoryHistory();
             entity.StringProperty = "foo";
             SalesTerritoryHistory entity2 = new SalesTerritoryHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SalesTerritoryHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.SalesTerritoryHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.Delete(System.Int32,System.DateTime,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _salesPersonId, System.DateTime _startDate, System.Int32 _territoryId
            </summary>
            <param name="_salesPersonId">SalesTerritoryHistory pk id.</param>
            <param name="_startDate">SalesTerritoryHistory pk id.</param>
            <param name="_territoryId">SalesTerritoryHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTerritoryHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoadBySalesPersonIdStartDateTerritoryId(System.Int32,System.DateTime,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_salesPersonId">Primary key for SalesTerritoryHistory records.</param>
            <param name="_startDate">Date the sales representive started work in the territory.</param>
            <param name="_territoryId">Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTerritoryHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SalesTerritoryHistory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SalesTerritoryHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SalesTerritoryHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.SalesTerritoryHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SalesTerritoryHistory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.SalesTerritoryHistory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SalesTerritoryHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SalesTerritoryHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SalesTerritoryHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SalesTerritoryHistory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.SalesTerritoryHistory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SalesTerritoryHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ContactTypeService">
            <summary>
            An component type implementation of the 'ContactType' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactTypeService.#ctor">
            <summary>
            Initializes a new instance of the ContactTypeService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:Nettiers.AdventureWorks.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VProductModelInstructionsService">
            <summary>
             An component type implementation of the 'vProductModelInstructions' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelInstructionsService.#ctor">
            <summary>
            Initializes a new instance of the VProductModelInstructionsService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductPhotoService">
            <summary>
            An component type implementation of the 'ProductPhoto' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductPhotoService.#ctor">
            <summary>
            Initializes a new instance of the ProductPhotoService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductModelIllustrationService">
            <summary>
            An component type implementation of the 'ProductModelIllustration' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductModelIllustrationService.#ctor">
            <summary>
            Initializes a new instance of the ProductModelIllustrationService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase">
            <summary>
             An object representation of the 'EmployeeAddress' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the EmployeeAddress.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.CreateEmployeeAddress(System.Int32,System.Int32,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> instance.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByAddressId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeeAddress_Address_AddressID key.
            	FK_EmployeeAddress_Address_AddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns a generic collection of EmployeeAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByAddressId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeeAddress_Address_AddressID key.
            	FK_EmployeeAddress_Address_AddressID Description: Foreign key constraint referencing Address.AddressID.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByEmployeeId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeeAddress_Employee_EmployeeID key.
            	FK_EmployeeAddress_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <returns>Returns a generic collection of EmployeeAddress objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByEmployeeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_EmployeeAddress_Employee_EmployeeID key.
            	FK_EmployeeAddress_Employee_EmployeeID Description: Foreign key constraint referencing Employee.EmployeeID.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Get(Nettiers.AdventureWorks.Entities.EmployeeAddressKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_EmployeeAddress_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_EmployeeAddress_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByEmployeeIdAddressId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_EmployeeAddress_EmployeeID_AddressID index.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetByEmployeeIdAddressId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_EmployeeAddress_EmployeeID_AddressID index.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{EmployeeAddress} of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>EmployeeAddress</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            public virtual method that Inserts a EmployeeAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeAddress object to Insert.</param>
            <remarks>After Inserting into the datasource, the EmployeeAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            EmployeeAddress entity = new EmployeeAddress();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	EmployeeAddressService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>EmployeeAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of EmployeeAddress.
             <code><![CDATA[
             TList<EmployeeAddress> list = new TList<EmployeeAddress>();
             EmployeeAddress entity = new EmployeeAddress();
             entity.StringProperty = "foo";
             EmployeeAddress entity2 = new EmployeeAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeAddressService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Update(Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            public virtual method that Updates a EmployeeAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeAddress object to Update.</param>
            <remarks>After Updateing into the datasource, the EmployeeAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            EmployeeAddress entity = EmployeeAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	EmployeeAddressService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>EmployeeAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of EmployeeAddress.
             <code><![CDATA[
             TList<EmployeeAddress> list = new TList<EmployeeAddress>();
             EmployeeAddress entity = new EmployeeAddress();
             entity.StringProperty = "foo";
             EmployeeAddress entity2 = new EmployeeAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeAddressService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Save(Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            public virtual method that Saves a EmployeeAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeAddress object to Save.</param>
            <remarks>After Saveing into the datasource, the EmployeeAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            EmployeeAddress entity = EmployeeAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	EmployeeAddressService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>EmployeeAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of EmployeeAddress.
             <code><![CDATA[
             TList<EmployeeAddress> list = new TList<EmployeeAddress>();
             EmployeeAddress entity = new EmployeeAddress();
             entity.StringProperty = "foo";
             EmployeeAddress entity2 = new EmployeeAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeAddressService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            public virtual method that Deletes a EmployeeAddress object into the datasource using a transaction.
            </summary>
            <param name="entity">EmployeeAddress object to Delete.</param>
            <remarks>After Deleteing into the datasource, the EmployeeAddress object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            EmployeeAddress entity = EmployeeAddressService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	EmployeeAddressService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>EmployeeAddress</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>EmployeeAddress</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of EmployeeAddress.
             <code><![CDATA[
             TList<EmployeeAddress> list = new TList<EmployeeAddress>();
             EmployeeAddress entity = new EmployeeAddress();
             entity.StringProperty = "foo";
             EmployeeAddress entity2 = new EmployeeAddress();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeAddressService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Delete(Nettiers.AdventureWorks.Entities.EmployeeAddressKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _employeeId, System.Int32 _addressId
            </summary>
            <param name="_employeeId">EmployeeAddress pk id.</param>
            <param name="_addressId">EmployeeAddress pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeeAddress Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoadByEmployeeIdAddressId(System.Int32,System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_employeeId">Primary key. Foreign key to Employee.EmployeeID.</param>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeeAddress Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">EmployeeAddress Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeAddress,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">EmployeeAddress Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeAddress,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">EmployeeAddress Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.EmployeeAddress)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.EmployeeAddress)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.EmployeeAddress"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">EmployeeAddress Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.EmployeeAddress,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the EmployeeAddress object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">EmployeeAddress Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>EmployeeAddress</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{EmployeeAddress} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.EmployeeAddress},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">EmployeeAddress Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.EmployeeAddressServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionService">
            <summary>
             An component type implementation of the 'vProductModelCatalogDescription' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductModelCatalogDescriptionService.#ctor">
            <summary>
            Initializes a new instance of the VProductModelCatalogDescriptionService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentService">
            <summary>
             An component type implementation of the 'vJobCandidateEmployment' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VJobCandidateEmploymentService.#ctor">
            <summary>
            Initializes a new instance of the VJobCandidateEmploymentService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderService">
            <summary>
            An component type implementation of the 'PurchaseOrderHeader' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase">
            <summary>
             An object representation of the 'PurchaseOrderHeader' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PurchaseOrderHeader.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.CreatePurchaseOrderHeader(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Decimal,System.Decimal,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> instance.
            </summary>
            <param name="_revisionNumber">Incremental number to track changes to the purchase order over time.</param>
            <param name="_status">Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete</param>
            <param name="_employeeId">Employee who created the purchase order. Foreign key to Employee.EmployeeID.</param>
            <param name="_vendorId">Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.</param>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <param name="_orderDate">Purchase order creation date.</param>
            <param name="_shipDate">Estimated shipment date from the vendor.</param>
            <param name="_subTotal">Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.</param>
            <param name="_taxAmt">Tax amount.</param>
            <param name="_freight">Shipping cost.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByShipMethodId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_PurchaseOrderHeader_ShipMethod_ShipMethodID key.
            	FK_PurchaseOrderHeader_ShipMethod_ShipMethodID Description: Foreign key constraint referencing ShipMethod.ShipMethodID.
            </summary>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <returns>Returns a generic collection of PurchaseOrderHeader objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByShipMethodId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_PurchaseOrderHeader_ShipMethod_ShipMethodID key.
            	FK_PurchaseOrderHeader_ShipMethod_ShipMethodID Description: Foreign key constraint referencing ShipMethod.ShipMethodID.
            </summary>
            <param name="_shipMethodId">Shipping method. Foreign key to ShipMethod.ShipMethodID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Get(Nettiers.AdventureWorks.Entities.PurchaseOrderHeaderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByEmployeeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_PurchaseOrderHeader_EmployeeID index.
            </summary>
            <param name="_employeeId">Employee who created the purchase order. Foreign key to Employee.EmployeeID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByEmployeeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_PurchaseOrderHeader_EmployeeID index.
            </summary>
            <param name="_employeeId">Employee who created the purchase order. Foreign key to Employee.EmployeeID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByVendorId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_PurchaseOrderHeader_VendorID index.
            </summary>
            <param name="_vendorId">Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByVendorId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_PurchaseOrderHeader_VendorID index.
            </summary>
            <param name="_vendorId">Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByPurchaseOrderId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_PurchaseOrderHeader_PurchaseOrderID index.
            </summary>
            <param name="_purchaseOrderId">Primary key.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetByPurchaseOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_PurchaseOrderHeader_PurchaseOrderID index.
            </summary>
            <param name="_purchaseOrderId">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PurchaseOrderHeader} of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PurchaseOrderHeader</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Insert(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            public virtual method that Inserts a PurchaseOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderHeader object to Insert.</param>
            <remarks>After Inserting into the datasource, the PurchaseOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PurchaseOrderHeader entity = new PurchaseOrderHeader();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PurchaseOrderHeaderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PurchaseOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PurchaseOrderHeader.
             <code><![CDATA[
             TList<PurchaseOrderHeader> list = new TList<PurchaseOrderHeader>();
             PurchaseOrderHeader entity = new PurchaseOrderHeader();
             entity.StringProperty = "foo";
             PurchaseOrderHeader entity2 = new PurchaseOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderHeaderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Update(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            public virtual method that Updates a PurchaseOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderHeader object to Update.</param>
            <remarks>After Updateing into the datasource, the PurchaseOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PurchaseOrderHeader entity = PurchaseOrderHeaderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PurchaseOrderHeaderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PurchaseOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PurchaseOrderHeader.
             <code><![CDATA[
             TList<PurchaseOrderHeader> list = new TList<PurchaseOrderHeader>();
             PurchaseOrderHeader entity = new PurchaseOrderHeader();
             entity.StringProperty = "foo";
             PurchaseOrderHeader entity2 = new PurchaseOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderHeaderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Save(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            public virtual method that Saves a PurchaseOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderHeader object to Save.</param>
            <remarks>After Saveing into the datasource, the PurchaseOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PurchaseOrderHeader entity = PurchaseOrderHeaderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PurchaseOrderHeaderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PurchaseOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PurchaseOrderHeader.
             <code><![CDATA[
             TList<PurchaseOrderHeader> list = new TList<PurchaseOrderHeader>();
             PurchaseOrderHeader entity = new PurchaseOrderHeader();
             entity.StringProperty = "foo";
             PurchaseOrderHeader entity2 = new PurchaseOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderHeaderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Delete(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            public virtual method that Deletes a PurchaseOrderHeader object into the datasource using a transaction.
            </summary>
            <param name="entity">PurchaseOrderHeader object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PurchaseOrderHeader object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PurchaseOrderHeader entity = PurchaseOrderHeaderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PurchaseOrderHeaderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PurchaseOrderHeader</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PurchaseOrderHeader</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PurchaseOrderHeader.
             <code><![CDATA[
             TList<PurchaseOrderHeader> list = new TList<PurchaseOrderHeader>();
             PurchaseOrderHeader entity = new PurchaseOrderHeader();
             entity.StringProperty = "foo";
             PurchaseOrderHeader entity2 = new PurchaseOrderHeader();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PurchaseOrderHeaderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Delete(Nettiers.AdventureWorks.Entities.PurchaseOrderHeaderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _purchaseOrderId
            </summary>
            <param name="_purchaseOrderId">PurchaseOrderHeader pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoadByEmployeeId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_employeeId">Employee who created the purchase order. Foreign key to Employee.EmployeeID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PurchaseOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoadByVendorId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_vendorId">Vendor with whom the purchase order is placed. Foreign key to Vendor.VendorID.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PurchaseOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoadByPurchaseOrderId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_purchaseOrderId">Primary key.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PurchaseOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PurchaseOrderHeader Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PurchaseOrderHeader Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PurchaseOrderHeader Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.PurchaseOrderHeader"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PurchaseOrderHeader Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.PurchaseOrderHeader,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PurchaseOrderHeader object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PurchaseOrderHeader Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PurchaseOrderHeader</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PurchaseOrderHeader} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.PurchaseOrderHeader},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PurchaseOrderHeader Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderHeaderService.#ctor">
            <summary>
            Initializes a new instance of the PurchaseOrderHeaderService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.PurchaseOrderDetailService">
            <summary>
            An component type implementation of the 'PurchaseOrderDetail' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.PurchaseOrderDetailService.#ctor">
            <summary>
            Initializes a new instance of the PurchaseOrderDetailService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductProductPhotoService">
            <summary>
            An component type implementation of the 'ProductProductPhoto' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductProductPhotoService.#ctor">
            <summary>
            Initializes a new instance of the ProductProductPhotoService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductDocumentService">
            <summary>
            An component type implementation of the 'ProductDocument' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductDocumentService.#ctor">
            <summary>
            Initializes a new instance of the ProductDocumentService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeeServiceBase">
            <summary>
             An object representation of the 'Employee' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Employee.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.CreateEmployee(System.String,System.Int32,System.String,System.Nullable{System.Int32},System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.Int16,System.Int16,System.Boolean,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> instance.
            </summary>
            <param name="_nationalIdNumber">Unique national identification number such as a social security number.</param>
            <param name="_contactId">Identifies the employee in the Contact table. Foreign key to Contact.ContactID.</param>
            <param name="_loginId">Network login.</param>
            <param name="_managerId">Manager to whom the employee is assigned. Foreign Key to Employee.M</param>
            <param name="_title">Work title such as Buyer or Sales Representative.</param>
            <param name="_birthDate">Date of birth.</param>
            <param name="_maritalStatus">M = Married, S = Single</param>
            <param name="_gender">M = Male, F = Female</param>
            <param name="_hireDate">Employee hired on this date.</param>
            <param name="_salariedFlag">Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.</param>
            <param name="_vacationHours">Number of available vacation hours.</param>
            <param name="_sickLeaveHours">Number of available sick leave hours.</param>
            <param name="_currentFlag">0 = Inactive, 1 = Active</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByContactId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Employee_Contact_ContactID key.
            	FK_Employee_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Identifies the employee in the Contact table. Foreign key to Contact.ContactID.</param>
            <returns>Returns a generic collection of Employee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByContactId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Employee_Contact_ContactID key.
            	FK_Employee_Contact_ContactID Description: Foreign key constraint referencing Contact.ContactID.
            </summary>
            <param name="_contactId">Identifies the employee in the Contact table. Foreign key to Contact.ContactID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Get(Nettiers.AdventureWorks.Entities.EmployeeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByLoginId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Employee_LoginID index.
            </summary>
            <param name="_loginId">Network login.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByLoginId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Employee_LoginID index.
            </summary>
            <param name="_loginId">Network login.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByNationalIdNumber(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Employee_NationalIDNumber index.
            </summary>
            <param name="_nationalIdNumber">Unique national identification number such as a social security number.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByNationalIdNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Employee_NationalIDNumber index.
            </summary>
            <param name="_nationalIdNumber">Unique national identification number such as a social security number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Employee_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Employee_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByManagerId(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Employee_ManagerID index.
            </summary>
            <param name="_managerId">Manager to whom the employee is assigned. Foreign Key to Employee.M</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByManagerId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Employee_ManagerID index.
            </summary>
            <param name="_managerId">Manager to whom the employee is assigned. Foreign Key to Employee.M</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByEmployeeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Employee_EmployeeID index.
            </summary>
            <param name="_employeeId">Primary key for Employee records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByEmployeeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Employee_EmployeeID index.
            </summary>
            <param name="_employeeId">Primary key for Employee records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Employee} of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Employee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Insert(Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            public virtual method that Inserts a Employee object into the datasource using a transaction.
            </summary>
            <param name="entity">Employee object to Insert.</param>
            <remarks>After Inserting into the datasource, the Employee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Employee entity = new Employee();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	EmployeeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Employee</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Employee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Employee.
             <code><![CDATA[
             TList<Employee> list = new TList<Employee>();
             Employee entity = new Employee();
             entity.StringProperty = "foo";
             Employee entity2 = new Employee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Update(Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            public virtual method that Updates a Employee object into the datasource using a transaction.
            </summary>
            <param name="entity">Employee object to Update.</param>
            <remarks>After Updateing into the datasource, the Employee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Employee entity = EmployeeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	EmployeeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Employee</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Employee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Employee.
             <code><![CDATA[
             TList<Employee> list = new TList<Employee>();
             Employee entity = new Employee();
             entity.StringProperty = "foo";
             Employee entity2 = new Employee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Save(Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            public virtual method that Saves a Employee object into the datasource using a transaction.
            </summary>
            <param name="entity">Employee object to Save.</param>
            <remarks>After Saveing into the datasource, the Employee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Employee entity = EmployeeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	EmployeeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Employee</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Employee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Employee.
             <code><![CDATA[
             TList<Employee> list = new TList<Employee>();
             Employee entity = new Employee();
             entity.StringProperty = "foo";
             Employee entity2 = new Employee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Delete(Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            public virtual method that Deletes a Employee object into the datasource using a transaction.
            </summary>
            <param name="entity">Employee object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Employee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Employee entity = EmployeeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	EmployeeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Employee</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Employee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Employee.
             <code><![CDATA[
             TList<Employee> list = new TList<Employee>();
             Employee entity = new Employee();
             entity.StringProperty = "foo";
             Employee entity2 = new Employee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	EmployeeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Delete(Nettiers.AdventureWorks.Entities.EmployeeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _employeeId
            </summary>
            <param name="_employeeId">Employee pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByAddressIdFromEmployeeAddress(System.Int32)">
            <summary>
            	Gets Employee objects from the datasource by AddressID in the
            	EmployeeAddress table. Table Employee is related to table Address
            	through the (M:N) relationship defined in the EmployeeAddress table.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <returns>Returns a typed collection of Employee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.GetByAddressIdFromEmployeeAddress(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Employee objects from the datasource by AddressID in the
            	EmployeeAddress table. Table Employee is related to table Address
            	through the (M:N) relationship defined in the EmployeeAddress table.
            </summary>
            <param name="_addressId">Primary key. Foreign key to Address.AddressID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Employee objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoadByLoginId(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_loginId">Network login.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Employee Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoadByNationalIdNumber(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_nationalIdNumber">Unique national identification number such as a social security number.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Employee Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Employee Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoadByManagerId(System.Nullable{System.Int32},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_managerId">Manager to whom the employee is assigned. Foreign Key to Employee.M</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Employee Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoadByEmployeeId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_employeeId">Primary key for Employee records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Employee Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Employee Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Employee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Employee,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Employee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Employee Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Employee,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Employee Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Employee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Employee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Employee)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Employee"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Employee Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Employee,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Employee object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Employee Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Employee</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Employee} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Employee},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Employee Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.EmployeeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.CountryRegionCurrencyService">
            <summary>
            An component type implementation of the 'CountryRegionCurrency' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.CountryRegionCurrencyService.#ctor">
            <summary>
            Initializes a new instance of the CountryRegionCurrencyService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,Nettiers.AdventureWorks.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase">
            <summary>
             An object representation of the 'vStateProvinceCountryRegion' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VStateProvinceCountryRegion.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VStateProvinceCountryRegion"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VStateProvinceCountryRegion"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.CreateVStateProvinceCountryRegion(System.Int32,System.String,System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VStateProvinceCountryRegion"/> instance.
            </summary>
            <param name="_stateProvinceId"></param>
            <param name="_stateProvinceCode"></param>
            <param name="_isOnlyStateProvinceFlag"></param>
            <param name="_stateProvinceName"></param>
            <param name="_territoryId"></param>
            <param name="_countryRegionCode"></param>
            <param name="_countryRegionName"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VStateProvinceCountryRegion} of <c>VStateProvinceCountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VStateProvinceCountryRegion"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VStateProvinceCountryRegion"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VStateProvinceCountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VStateProvinceCountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VStateProvinceCountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VStateProvinceCountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VStateProvinceCountryRegion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VStateProvinceCountryRegion</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionService">
            <summary>
             An component type implementation of the 'vStateProvinceCountryRegion' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VStateProvinceCountryRegionService.#ctor">
            <summary>
            Initializes a new instance of the VStateProvinceCountryRegionService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ShipMethodService">
            <summary>
            An component type implementation of the 'ShipMethod' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ShipMethodService.#ctor">
            <summary>
            Initializes a new instance of the ShipMethodService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductCategoryService">
            <summary>
            An component type implementation of the 'ProductCategory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductCategoryService.#ctor">
            <summary>
            Initializes a new instance of the ProductCategoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductService">
            <summary>
            An component type implementation of the 'Product' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductServiceBase">
            <summary>
             An object representation of the 'Product' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Product.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.CreateProduct(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Int16,System.Int16,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> instance.
            </summary>
            <param name="_name">Name of the product.</param>
            <param name="_productNumber">Unique product identification number.</param>
            <param name="_makeFlag">0 = Product is purchased, 1 = Product is manufactured in-house.</param>
            <param name="_finishedGoodsFlag">0 = Product is not a salable item. 1 = Product is salable.</param>
            <param name="_color">Product color.</param>
            <param name="_safetyStockLevel">Minimum inventory quantity. </param>
            <param name="_reorderPoint">Inventory level that triggers a purchase order or work order. </param>
            <param name="_standardCost">Standard cost of the product.</param>
            <param name="_listPrice">Selling price.</param>
            <param name="_size">Product size.</param>
            <param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
            <param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
            <param name="_weight">Product weight.</param>
            <param name="_daysToManufacture">Number of days required to manufacture the product.</param>
            <param name="_productLine">R = Road, M = Mountain, T = Touring, S = Standard</param>
            <param name="_safeNameClass">H = High, M = Medium, L = Low</param>
            <param name="_style">W = Womens, M = Mens, U = Universal</param>
            <param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
            <param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
            <param name="_sellStartDate">Date the product was available for sale.</param>
            <param name="_sellEndDate">Date the product was no longer available for sale.</param>
            <param name="_discontinuedDate">Date the product was discontinued.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductModelId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_ProductModel_ProductModelID key.
            	FK_Product_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductModelId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_ProductModel_ProductModelID key.
            	FK_Product_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
            </summary>
            <param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductSubcategoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_ProductSubcategory_ProductSubcategoryID key.
            	FK_Product_ProductSubcategory_ProductSubcategoryID Description: Foreign key constraint referencing ProductSubcategory.ProductSubcategoryID.
            </summary>
            <param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductSubcategoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_ProductSubcategory_ProductSubcategoryID key.
            	FK_Product_ProductSubcategory_ProductSubcategoryID Description: Foreign key constraint referencing ProductSubcategory.ProductSubcategoryID.
            </summary>
            <param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetBySizeUnitMeasureCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_UnitMeasure_SizeUnitMeasureCode key.
            	FK_Product_UnitMeasure_SizeUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
            </summary>
            <param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetBySizeUnitMeasureCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_UnitMeasure_SizeUnitMeasureCode key.
            	FK_Product_UnitMeasure_SizeUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
            </summary>
            <param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByWeightUnitMeasureCode(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_UnitMeasure_WeightUnitMeasureCode key.
            	FK_Product_UnitMeasure_WeightUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
            </summary>
            <param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
            <returns>Returns a generic collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByWeightUnitMeasureCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_Product_UnitMeasure_WeightUnitMeasureCode key.
            	FK_Product_UnitMeasure_WeightUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
            </summary>
            <param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Product_Name index.
            </summary>
            <param name="_name">Name of the product.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Product_Name index.
            </summary>
            <param name="_name">Name of the product.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductNumber(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Product_ProductNumber index.
            </summary>
            <param name="_productNumber">Unique product identification number.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductNumber(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Product_ProductNumber index.
            </summary>
            <param name="_productNumber">Unique product identification number.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Product_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Product_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Product_ProductID index.
            </summary>
            <param name="_productId">Primary key for Product records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Product_ProductID index.
            </summary>
            <param name="_productId">Primary key for Product records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Product} of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Product</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Insert(Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            public virtual method that Inserts a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Insert.</param>
            <remarks>After Inserting into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Product entity = new Product();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Update(Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            public virtual method that Updates a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Update.</param>
            <remarks>After Updateing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Save(Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            public virtual method that Saves a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Save.</param>
            <remarks>After Saveing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Delete(Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            public virtual method that Deletes a Product object into the datasource using a transaction.
            </summary>
            <param name="entity">Product object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Product object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Product entity = ProductService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Product</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Product</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Product.
             <code><![CDATA[
             TList<Product> list = new TList<Product>();
             Product entity = new Product();
             entity.StringProperty = "foo";
             Product entity2 = new Product();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productId
            </summary>
            <param name="_productId">Product pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByDocumentIdFromProductDocument(System.Int32)">
            <summary>
            	Gets Product objects from the datasource by DocumentID in the
            	ProductDocument table. Table Product is related to table Document
            	through the (M:N) relationship defined in the ProductDocument table.
            </summary>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByDocumentIdFromProductDocument(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by DocumentID in the
            	ProductDocument table. Table Product is related to table Document
            	through the (M:N) relationship defined in the ProductDocument table.
            </summary>
            <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByLocationIdFromProductInventory(System.Int16)">
            <summary>
            	Gets Product objects from the datasource by LocationID in the
            	ProductInventory table. Table Product is related to table Location
            	through the (M:N) relationship defined in the ProductInventory table.
            </summary>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByLocationIdFromProductInventory(System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by LocationID in the
            	ProductInventory table. Table Product is related to table Location
            	through the (M:N) relationship defined in the ProductInventory table.
            </summary>
            <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductPhotoIdFromProductProductPhoto(System.Int32)">
            <summary>
            	Gets Product objects from the datasource by ProductPhotoID in the
            	ProductProductPhoto table. Table Product is related to table ProductPhoto
            	through the (M:N) relationship defined in the ProductProductPhoto table.
            </summary>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByProductPhotoIdFromProductProductPhoto(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by ProductPhotoID in the
            	ProductProductPhoto table. Table Product is related to table ProductPhoto
            	through the (M:N) relationship defined in the ProductProductPhoto table.
            </summary>
            <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByVendorIdFromProductVendor(System.Int32)">
            <summary>
            	Gets Product objects from the datasource by VendorID in the
            	ProductVendor table. Table Product is related to table Vendor
            	through the (M:N) relationship defined in the ProductVendor table.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetByVendorIdFromProductVendor(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by VendorID in the
            	ProductVendor table. Table Product is related to table Vendor
            	through the (M:N) relationship defined in the ProductVendor table.
            </summary>
            <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetBySpecialOfferIdFromSpecialOfferProduct(System.Int32)">
            <summary>
            	Gets Product objects from the datasource by SpecialOfferID in the
            	SpecialOfferProduct table. Table Product is related to table SpecialOffer
            	through the (M:N) relationship defined in the SpecialOfferProduct table.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.GetBySpecialOfferIdFromSpecialOfferProduct(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Product objects from the datasource by SpecialOfferID in the
            	SpecialOfferProduct table. Table Product is related to table SpecialOffer
            	through the (M:N) relationship defined in the SpecialOfferProduct table.
            </summary>
            <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Product objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Name of the product.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoadByProductNumber(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productNumber">Unique product identification number.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoadByProductId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productId">Primary key for Product records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Product Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Product,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Product Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Product,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Product)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Product"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Product)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Product"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Product Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Product,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Product object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Product Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Product</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Product} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Product},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Product Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductService.#ctor">
            <summary>
            Initializes a new instance of the ProductService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProcessorEventArgs.#ctor(Nettiers.AdventureWorks.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveService">
            <summary>
            An component type implementation of the 'TransactionHistoryArchive' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.TransactionHistoryArchiveService.#ctor">
            <summary>
            Initializes a new instance of the TransactionHistoryArchiveService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.StoreContactService">
            <summary>
            An component type implementation of the 'StoreContact' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreContactService.#ctor">
            <summary>
            Initializes a new instance of the StoreContactService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesReasonService">
            <summary>
            An component type implementation of the 'SalesReason' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesReasonService.#ctor">
            <summary>
            Initializes a new instance of the SalesReasonService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.IllustrationService">
            <summary>
            An component type implementation of the 'Illustration' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.IllustrationService.#ctor">
            <summary>
            Initializes a new instance of the IllustrationService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ContactServiceBase">
            <summary>
             An object representation of the 'Contact' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Contact.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.CreateContact(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> instance.
            </summary>
            <param name="_nameStyle">0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.</param>
            <param name="_title">A courtesy title. For example, Mr. or Ms.</param>
            <param name="_firstName">First name of the person.</param>
            <param name="_middleName">Middle name or middle initial of the person.</param>
            <param name="_lastName">Last name of the person.</param>
            <param name="_suffix">Surname suffix. For example, Sr. or Jr.</param>
            <param name="_emailAddress">E-mail address for the person.</param>
            <param name="_emailPromotion">0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. </param>
            <param name="_phone">Phone number associated with the person.</param>
            <param name="_passwordHash">Password for the e-mail account.</param>
            <param name="_passwordSalt">Random value concatenated with the password string before the password is hashed.</param>
            <param name="_additionalContactInfo">Additional contact information about the person stored in xml format. </param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Get(Nettiers.AdventureWorks.Entities.ContactKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Contact_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_Contact_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByEmailAddress(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Contact_EmailAddress index.
            </summary>
            <param name="_emailAddress">E-mail address for the person.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByEmailAddress(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key IX_Contact_EmailAddress index.
            </summary>
            <param name="_emailAddress">E-mail address for the person.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByContactId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Contact_ContactID index.
            </summary>
            <param name="_contactId">Primary key for Contact records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByContactId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_Contact_ContactID index.
            </summary>
            <param name="_contactId">Primary key for Contact records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByAdditionalContactInfo(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_Contact_AddContact index.
            </summary>
            <param name="_additionalContactInfo">Additional contact information about the person stored in xml format. </param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByAdditionalContactInfo(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PXML_Contact_AddContact index.
            </summary>
            <param name="_additionalContactInfo">Additional contact information about the person stored in xml format. </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Contact} of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Contact</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Insert(Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            public virtual method that Inserts a Contact object into the datasource using a transaction.
            </summary>
            <param name="entity">Contact object to Insert.</param>
            <remarks>After Inserting into the datasource, the Contact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Contact entity = new Contact();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ContactService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Contact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Contact.
             <code><![CDATA[
             TList<Contact> list = new TList<Contact>();
             Contact entity = new Contact();
             entity.StringProperty = "foo";
             Contact entity2 = new Contact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Update(Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            public virtual method that Updates a Contact object into the datasource using a transaction.
            </summary>
            <param name="entity">Contact object to Update.</param>
            <remarks>After Updateing into the datasource, the Contact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Contact entity = ContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ContactService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Contact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Contact.
             <code><![CDATA[
             TList<Contact> list = new TList<Contact>();
             Contact entity = new Contact();
             entity.StringProperty = "foo";
             Contact entity2 = new Contact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Save(Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            public virtual method that Saves a Contact object into the datasource using a transaction.
            </summary>
            <param name="entity">Contact object to Save.</param>
            <remarks>After Saveing into the datasource, the Contact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Contact entity = ContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ContactService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Contact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Contact.
             <code><![CDATA[
             TList<Contact> list = new TList<Contact>();
             Contact entity = new Contact();
             entity.StringProperty = "foo";
             Contact entity2 = new Contact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            public virtual method that Deletes a Contact object into the datasource using a transaction.
            </summary>
            <param name="entity">Contact object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Contact object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Contact entity = ContactService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ContactService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Contact</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Contact</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Contact.
             <code><![CDATA[
             TList<Contact> list = new TList<Contact>();
             Contact entity = new Contact();
             entity.StringProperty = "foo";
             Contact entity2 = new Contact();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ContactService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Delete(Nettiers.AdventureWorks.Entities.ContactKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _contactId
            </summary>
            <param name="_contactId">Contact pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByCreditCardIdFromContactCreditCard(System.Int32)">
            <summary>
            	Gets Contact objects from the datasource by CreditCardID in the
            	ContactCreditCard table. Table Contact is related to table CreditCard
            	through the (M:N) relationship defined in the ContactCreditCard table.
            </summary>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <returns>Returns a typed collection of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByCreditCardIdFromContactCreditCard(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Contact objects from the datasource by CreditCardID in the
            	ContactCreditCard table. Table Contact is related to table CreditCard
            	through the (M:N) relationship defined in the ContactCreditCard table.
            </summary>
            <param name="_creditCardId">Credit card identification number. Foreign key to CreditCard.CreditCardID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByCustomerIdFromStoreContact(System.Int32)">
            <summary>
            	Gets Contact objects from the datasource by CustomerID in the
            	StoreContact table. Table Contact is related to table Store
            	through the (M:N) relationship defined in the StoreContact table.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <returns>Returns a typed collection of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByCustomerIdFromStoreContact(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Contact objects from the datasource by CustomerID in the
            	StoreContact table. Table Contact is related to table Store
            	through the (M:N) relationship defined in the StoreContact table.
            </summary>
            <param name="_customerId">Store identification number. Foreign key to Customer.CustomerID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByVendorIdFromVendorContact(System.Int32)">
            <summary>
            	Gets Contact objects from the datasource by VendorID in the
            	VendorContact table. Table Contact is related to table Vendor
            	through the (M:N) relationship defined in the VendorContact table.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <returns>Returns a typed collection of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.GetByVendorIdFromVendorContact(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Contact objects from the datasource by VendorID in the
            	VendorContact table. Table Contact is related to table Vendor
            	through the (M:N) relationship defined in the VendorContact table.
            </summary>
            <param name="_vendorId">Primary key.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Contact objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoadByEmailAddress(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_emailAddress">E-mail address for the person.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoadByContactId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_contactId">Primary key for Contact records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoadByAdditionalContactInfo(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_additionalContactInfo">Additional contact information about the person stored in xml format. </param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contact Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Contact Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Contact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Contact,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Contact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Contact Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Contact,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Contact Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Contact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.Contact)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Contact)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.Contact"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Contact Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.Contact,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Contact object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Contact Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Contact</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Contact} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.Contact},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Contact Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ContactServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.AwBuildVersionService">
            <summary>
            An component type implementation of the 'AWBuildVersion' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase">
            <summary>
             An object representation of the 'AWBuildVersion' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AwBuildVersion.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.CreateAwBuildVersion(System.String,System.DateTime,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> instance.
            </summary>
            <param name="_databaseVersion">Version number of the database in 9.yy.mm.dd.00 format.</param>
            <param name="_versionDate">Date and time the record was last updated.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Get(Nettiers.AdventureWorks.Entities.AwBuildVersionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetBySystemInformationId(System.Byte)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_AWBuildVersion_SystemInformationID index.
            </summary>
            <param name="_systemInformationId">Primary key for AWBuildVersion records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetBySystemInformationId(System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_AWBuildVersion_SystemInformationID index.
            </summary>
            <param name="_systemInformationId">Primary key for AWBuildVersion records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AwBuildVersion} of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AwBuildVersion</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Insert(Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            public virtual method that Inserts a AwBuildVersion object into the datasource using a transaction.
            </summary>
            <param name="entity">AwBuildVersion object to Insert.</param>
            <remarks>After Inserting into the datasource, the AwBuildVersion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AwBuildVersion entity = new AwBuildVersion();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AwBuildVersionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AwBuildVersion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AwBuildVersion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AwBuildVersion.
             <code><![CDATA[
             TList<AwBuildVersion> list = new TList<AwBuildVersion>();
             AwBuildVersion entity = new AwBuildVersion();
             entity.StringProperty = "foo";
             AwBuildVersion entity2 = new AwBuildVersion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AwBuildVersionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Update(Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            public virtual method that Updates a AwBuildVersion object into the datasource using a transaction.
            </summary>
            <param name="entity">AwBuildVersion object to Update.</param>
            <remarks>After Updateing into the datasource, the AwBuildVersion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AwBuildVersion entity = AwBuildVersionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AwBuildVersionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AwBuildVersion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AwBuildVersion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AwBuildVersion.
             <code><![CDATA[
             TList<AwBuildVersion> list = new TList<AwBuildVersion>();
             AwBuildVersion entity = new AwBuildVersion();
             entity.StringProperty = "foo";
             AwBuildVersion entity2 = new AwBuildVersion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AwBuildVersionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Save(Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            public virtual method that Saves a AwBuildVersion object into the datasource using a transaction.
            </summary>
            <param name="entity">AwBuildVersion object to Save.</param>
            <remarks>After Saveing into the datasource, the AwBuildVersion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AwBuildVersion entity = AwBuildVersionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AwBuildVersionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AwBuildVersion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AwBuildVersion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AwBuildVersion.
             <code><![CDATA[
             TList<AwBuildVersion> list = new TList<AwBuildVersion>();
             AwBuildVersion entity = new AwBuildVersion();
             entity.StringProperty = "foo";
             AwBuildVersion entity2 = new AwBuildVersion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AwBuildVersionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Delete(Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            public virtual method that Deletes a AwBuildVersion object into the datasource using a transaction.
            </summary>
            <param name="entity">AwBuildVersion object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AwBuildVersion object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AwBuildVersion entity = AwBuildVersionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AwBuildVersionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AwBuildVersion</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AwBuildVersion</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AwBuildVersion.
             <code><![CDATA[
             TList<AwBuildVersion> list = new TList<AwBuildVersion>();
             AwBuildVersion entity = new AwBuildVersion();
             entity.StringProperty = "foo";
             AwBuildVersion entity2 = new AwBuildVersion();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AwBuildVersionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Delete(Nettiers.AdventureWorks.Entities.AwBuildVersionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.Delete(System.Byte)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Byte _systemInformationId
            </summary>
            <param name="_systemInformationId">AwBuildVersion pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoadBySystemInformationId(System.Byte,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_systemInformationId">Primary key for AWBuildVersion records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AwBuildVersion Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AwBuildVersion Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AwBuildVersion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AwBuildVersion,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AwBuildVersion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AwBuildVersion Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AwBuildVersion,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AwBuildVersion Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AwBuildVersion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.AwBuildVersion)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.AwBuildVersion)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.AwBuildVersion"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AwBuildVersion Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.AwBuildVersion,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AwBuildVersion object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AwBuildVersion Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AwBuildVersion</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AwBuildVersion} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.AwBuildVersion},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AwBuildVersion Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.AwBuildVersionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AwBuildVersionService.#ctor">
            <summary>
            Initializes a new instance of the AwBuildVersionService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.AddressTypeService">
            <summary>
            An component type implementation of the 'AddressType' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.AddressTypeService.#ctor">
            <summary>
            Initializes a new instance of the AddressTypeService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase">
            <summary>
             An object representation of the 'vProductAndDescription' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VProductAndDescription.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VProductAndDescription"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VProductAndDescription"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.CreateVProductAndDescription(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VProductAndDescription"/> instance.
            </summary>
            <param name="_productId"></param>
            <param name="_name"></param>
            <param name="_productModel"></param>
            <param name="_cultureId"></param>
            <param name="_description"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VProductAndDescription} of <c>VProductAndDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VProductAndDescription"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VProductAndDescription"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductAndDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductAndDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VProductAndDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VProductAndDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VProductAndDescription</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VProductAndDescription</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VProductAndDescriptionService">
            <summary>
             An component type implementation of the 'vProductAndDescription' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VProductAndDescriptionService.#ctor">
            <summary>
            Initializes a new instance of the VProductAndDescriptionService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VEmployeeServiceBase">
            <summary>
             An object representation of the 'vEmployee' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the VEmployee.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.VEmployee"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.VEmployee"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.CreateVEmployee(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.VEmployee"/> instance.
            </summary>
            <param name="_employeeId"></param>
            <param name="_title"></param>
            <param name="_firstName"></param>
            <param name="_middleName"></param>
            <param name="_lastName"></param>
            <param name="_suffix"></param>
            <param name="_jobTitle"></param>
            <param name="_phone"></param>
            <param name="_emailAddress"></param>
            <param name="_emailPromotion"></param>
            <param name="_addressLine1"></param>
            <param name="_addressLine2"></param>
            <param name="_city"></param>
            <param name="_stateProvinceName"></param>
            <param name="_postalCode"></param>
            <param name="_countryRegionName"></param>
            <param name="_additionalContactInfo"></param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{VEmployee} of <c>VEmployee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.VEmployee"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.VEmployee"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>VEmployee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>VEmployee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>VEmployee</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>VEmployee</c> objects.</returns>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryService">
            <summary>
            An component type implementation of the 'SalesTerritoryHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesTerritoryHistoryService.#ctor">
            <summary>
            Initializes a new instance of the SalesTerritoryHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.LocationService">
            <summary>
            An component type implementation of the 'Location' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.LocationService.#ctor">
            <summary>
            Initializes a new instance of the LocationService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeeAddressService">
            <summary>
            An component type implementation of the 'EmployeeAddress' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeAddressService.#ctor">
            <summary>
            Initializes a new instance of the EmployeeAddressService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ContactService">
            <summary>
            An component type implementation of the 'Contact' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ContactService.#ctor">
            <summary>
            Initializes a new instance of the ContactService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryService">
            <summary>
             An component type implementation of the 'vEmployeeDepartmentHistory' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeDepartmentHistoryService.#ctor">
            <summary>
            Initializes a new instance of the VEmployeeDepartmentHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.UnitMeasureService">
            <summary>
            An component type implementation of the 'UnitMeasure' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.UnitMeasureService.#ctor">
            <summary>
            Initializes a new instance of the UnitMeasureService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.StoreService">
            <summary>
            An component type implementation of the 'Store' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.StoreService.#ctor">
            <summary>
            Initializes a new instance of the StoreService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryService">
            <summary>
            An component type implementation of the 'SalesPersonQuotaHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesPersonQuotaHistoryService.#ctor">
            <summary>
            Initializes a new instance of the SalesPersonQuotaHistoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductSubcategoryService">
            <summary>
            An component type implementation of the 'ProductSubcategory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase">
            <summary>
             An object representation of the 'ProductSubcategory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProductSubcategory.cs file instead.
             All custom implementations should be done in the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> instance .
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.CreateProductSubcategory(System.Int32,System.String,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> instance.
            </summary>
            <param name="_productCategoryId">Product category identification number. Foreign key to ProductCategory.ProductCategoryID.</param>
            <param name="_name">Subcategory description.</param>
            <param name="_modifiedDate">Date and time the record was last updated.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByProductCategoryId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductSubcategory_ProductCategory_ProductCategoryID key.
            	FK_ProductSubcategory_ProductCategory_ProductCategoryID Description: Foreign key constraint referencing ProductCategory.ProductCategoryID.
            </summary>
            <param name="_productCategoryId">Product category identification number. Foreign key to ProductCategory.ProductCategoryID.</param>
            <returns>Returns a generic collection of ProductSubcategory objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByProductCategoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the FK_ProductSubcategory_ProductCategory_ProductCategoryID key.
            	FK_ProductSubcategory_ProductCategory_ProductCategoryID Description: Foreign key constraint referencing ProductCategory.ProductCategoryID.
            </summary>
            <param name="_productCategoryId">Product category identification number. Foreign key to ProductCategory.ProductCategoryID.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Get(Nettiers.AdventureWorks.Entities.ProductSubcategoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductSubcategory_Name index.
            </summary>
            <param name="_name">Subcategory description.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductSubcategory_Name index.
            </summary>
            <param name="_name">Subcategory description.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByRowguid(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductSubcategory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByRowguid(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key AK_ProductSubcategory_rowguid index.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByProductSubcategoryId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductSubcategory_ProductSubcategoryID index.
            </summary>
            <param name="_productSubcategoryId">Primary key for ProductSubcategory records.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetByProductSubcategoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the datasource based on the primary key PK_ProductSubcategory_ProductSubcategoryID index.
            </summary>
            <param name="_productSubcategoryId">Primary key for ProductSubcategory records.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ProductSubcategory} of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,Nettiers.AdventureWorks.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Find(Nettiers.AdventureWorks.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Nettiers.AdventureWorks.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ProductSubcategory</c> objects.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            public virtual method that Inserts a ProductSubcategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductSubcategory object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProductSubcategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProductSubcategory entity = new ProductSubcategory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProductSubcategoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Insert(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductSubcategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProductSubcategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProductSubcategory.
             <code><![CDATA[
             TList<ProductSubcategory> list = new TList<ProductSubcategory>();
             ProductSubcategory entity = new ProductSubcategory();
             entity.StringProperty = "foo";
             ProductSubcategory entity2 = new ProductSubcategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductSubcategoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Update(Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            public virtual method that Updates a ProductSubcategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductSubcategory object to Update.</param>
            <remarks>After Updateing into the datasource, the ProductSubcategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProductSubcategory entity = ProductSubcategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProductSubcategoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Update(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductSubcategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProductSubcategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProductSubcategory.
             <code><![CDATA[
             TList<ProductSubcategory> list = new TList<ProductSubcategory>();
             ProductSubcategory entity = new ProductSubcategory();
             entity.StringProperty = "foo";
             ProductSubcategory entity2 = new ProductSubcategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductSubcategoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Save(Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            public virtual method that Saves a ProductSubcategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductSubcategory object to Save.</param>
            <remarks>After Saveing into the datasource, the ProductSubcategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ProductSubcategory entity = ProductSubcategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProductSubcategoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Save(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductSubcategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ProductSubcategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ProductSubcategory.
             <code><![CDATA[
             TList<ProductSubcategory> list = new TList<ProductSubcategory>();
             ProductSubcategory entity = new ProductSubcategory();
             entity.StringProperty = "foo";
             ProductSubcategory entity2 = new ProductSubcategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductSubcategoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            public virtual method that Deletes a ProductSubcategory object into the datasource using a transaction.
            </summary>
            <param name="entity">ProductSubcategory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProductSubcategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProductSubcategory entity = ProductSubcategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProductSubcategoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProductSubcategory</c> objects in a <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProductSubcategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProductSubcategory.
             <code><![CDATA[
             TList<ProductSubcategory> list = new TList<ProductSubcategory>();
             ProductSubcategory entity = new ProductSubcategory();
             entity.StringProperty = "foo";
             ProductSubcategory entity2 = new ProductSubcategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProductSubcategoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Delete(Nettiers.AdventureWorks.Entities.ProductSubcategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _productSubcategoryId
            </summary>
            <param name="_productSubcategoryId">ProductSubcategory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoadByName(System.String,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_name">Subcategory description.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductSubcategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoadByRowguid(System.Guid,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductSubcategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoadByProductSubcategoryId(System.Int32,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <param name="_productSubcategoryId">Primary key for ProductSubcategory records.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductSubcategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ProductSubcategory Object</param>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductSubcategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductSubcategory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductSubcategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ProductSubcategory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductSubcategory,System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ProductSubcategory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory})">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductSubcategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.ProductSubcategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepLoad(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory},System.Boolean,Nettiers.AdventureWorks.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Nettiers.AdventureWorks.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductSubcategory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Nettiers.AdventureWorks.Entities.ProductSubcategory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ProductSubcategory Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.ProductSubcategory,Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ProductSubcategory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ProductSubcategory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ProductSubcategory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory})">
            <summary>
            Deep Save the entire <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ProductSubcategory} Object</param>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.DeepSave(Nettiers.AdventureWorks.Entities.TList{Nettiers.AdventureWorks.Entities.ProductSubcategory},Nettiers.AdventureWorks.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Nettiers.AdventureWorks.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ProductSubcategory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Nettiers.AdventureWorks.Services.ProductSubcategoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.ProductSubcategoryService.#ctor">
            <summary>
            Initializes a new instance of the ProductSubcategoryService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.EmployeeService">
            <summary>
            An component type implementation of the 'Employee' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.EmployeeService.#ctor">
            <summary>
            Initializes a new instance of the EmployeeService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.DepartmentService">
            <summary>
            An component type implementation of the 'Department' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.DepartmentService.#ctor">
            <summary>
            Initializes a new instance of the DepartmentService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VVendorService">
            <summary>
             An component type implementation of the 'vVendor' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VVendorService.#ctor">
            <summary>
            Initializes a new instance of the VVendorService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.VEmployeeService">
            <summary>
             An component type implementation of the 'vEmployee' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.VEmployeeService.#ctor">
            <summary>
            Initializes a new instance of the VEmployeeService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesOrderHeaderService">
            <summary>
            An component type implementation of the 'SalesOrderHeader' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderHeaderService.#ctor">
            <summary>
            Initializes a new instance of the SalesOrderHeaderService class.
            </summary>
        </member>
        <member name="T:Nettiers.AdventureWorks.Services.SalesOrderDetailService">
            <summary>
            An component type implementation of the 'SalesOrderDetail' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Nettiers.AdventureWorks.Services.SalesOrderDetailService.#ctor">
            <summary>
            Initializes a new instance of the SalesOrderDetailService class.
            </summary>
        </member>
    </members>
</doc>
