
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Nettiers.AdventureWorks.Entities.Product.cs instead.
*/

#region Using directives

using System;
using System.Data;
using System.Collections;
using System.Diagnostics;
using System.Web.Services.Protocols;
using Nettiers.AdventureWorks.Entities;
using Nettiers.AdventureWorks.Data.Bases;

#endregion

namespace Nettiers.AdventureWorks.Data.WebServiceClient
{

	///<summary>
	/// This class is the webservice client implementation that exposes CRUD methods for Nettiers.AdventureWorks.Entities.Product objects.
	///</summary>
	public abstract partial class WsProductProviderBase : ProductProviderBase
	{
		#region Declarations	
	
		/// <summary>
		/// the Url of the webservice.
		/// </summary>
		private string url;
			
		#endregion Declarations
		
		#region Constructors
	
		/// <summary>
		/// Creates a new <see cref="WsProductProviderBase"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		public WsProductProviderBase()
		{		
		}
		
		/// <summary>
		/// Creates a new <see cref="WsProductProviderBase"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		/// <param name="url">The url to the nettiers webservice.</param>
		public WsProductProviderBase(string url)
		{
			this.Url = url;
		}
			
		#endregion Constructors
		
		#region Url
		///<summary>
		/// Current URL for webservice endpoint. 
		///</summary>
		public string Url
        {
        	get {return url;}
        	set {url = value;}
        }
		#endregion 
		
		#region Convertion utility
		
		/// <summary>
		/// Convert a collection from the ws proxy to a nettiers collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.TList<Product> Convert(WsProxy.Product[] items)
		{
			Nettiers.AdventureWorks.Entities.TList<Product> outItems = new Nettiers.AdventureWorks.Entities.TList<Product>();
			foreach(WsProxy.Product item in items)
			{
				outItems.Add(Convert(item));
			}
			return outItems;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.Product Convert(WsProxy.Product item)
		{	
			Nettiers.AdventureWorks.Entities.Product outItem = item == null ? null : new Nettiers.AdventureWorks.Entities.Product();
			Convert(outItem, item);					
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.Product Convert(Nettiers.AdventureWorks.Entities.Product outItem , WsProxy.Product item)
		{	
			if (item != null && outItem != null)
			{
				outItem.ProductId = item.ProductId;
				outItem.Name = item.Name;
				outItem.ProductNumber = item.ProductNumber;
				outItem.MakeFlag = item.MakeFlag;
				outItem.FinishedGoodsFlag = item.FinishedGoodsFlag;
				outItem.Color = item.Color;
				outItem.SafetyStockLevel = item.SafetyStockLevel;
				outItem.ReorderPoint = item.ReorderPoint;
				outItem.StandardCost = item.StandardCost;
				outItem.ListPrice = item.ListPrice;
				outItem.Size = item.Size;
				outItem.SizeUnitMeasureCode = item.SizeUnitMeasureCode;
				outItem.WeightUnitMeasureCode = item.WeightUnitMeasureCode;
				outItem.Weight = item.Weight;
				outItem.DaysToManufacture = item.DaysToManufacture;
				outItem.ProductLine = item.ProductLine;
				outItem.SafeNameClass = item.SafeNameClass;
				outItem.Style = item.Style;
				outItem.ProductSubcategoryId = item.ProductSubcategoryId;
				outItem.ProductModelId = item.ProductModelId;
				outItem.SellStartDate = item.SellStartDate;
				outItem.SellEndDate = item.SellEndDate;
				outItem.DiscontinuedDate = item.DiscontinuedDate;
				outItem.Rowguid = item.Rowguid;
				outItem.ModifiedDate = item.ModifiedDate;
				
				outItem.AcceptChanges();			
			}
							
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers entity to the ws proxy entity.
		/// </summary>
		public static WsProxy.Product Convert(Nettiers.AdventureWorks.Entities.Product item)
		{			
			WsProxy.Product outItem = new WsProxy.Product();			
			outItem.ProductId = item.ProductId;
			outItem.Name = item.Name;
			outItem.ProductNumber = item.ProductNumber;
			outItem.MakeFlag = item.MakeFlag;
			outItem.FinishedGoodsFlag = item.FinishedGoodsFlag;
			outItem.Color = item.Color;
			outItem.SafetyStockLevel = item.SafetyStockLevel;
			outItem.ReorderPoint = item.ReorderPoint;
			outItem.StandardCost = item.StandardCost;
			outItem.ListPrice = item.ListPrice;
			outItem.Size = item.Size;
			outItem.SizeUnitMeasureCode = item.SizeUnitMeasureCode;
			outItem.WeightUnitMeasureCode = item.WeightUnitMeasureCode;
			outItem.Weight = item.Weight;
			outItem.DaysToManufacture = item.DaysToManufacture;
			outItem.ProductLine = item.ProductLine;
			outItem.SafeNameClass = item.SafeNameClass;
			outItem.Style = item.Style;
			outItem.ProductSubcategoryId = item.ProductSubcategoryId;
			outItem.ProductModelId = item.ProductModelId;
			outItem.SellStartDate = item.SellStartDate;
			outItem.SellEndDate = item.SellEndDate;
			outItem.DiscontinuedDate = item.DiscontinuedDate;
			outItem.Rowguid = item.Rowguid;
			outItem.ModifiedDate = item.ModifiedDate;

							
			return outItem;
		}
		
		/// <summary>
		/// Convert a collection from  to a nettiers collection to a the ws proxy collection.
		/// </summary>
		public static WsProxy.Product[] Convert(Nettiers.AdventureWorks.Entities.TList<Product> items)
		{
			WsProxy.Product[] outItems = new WsProxy.Product[items.Count];
			int count = 0;
		
			foreach (Nettiers.AdventureWorks.Entities.Product item in items)
			{
				outItems[count++] = Convert(item);
			}
			return outItems;
		}

		
		#endregion
		
		#region Get from  Many To Many Relationship Functions
		#region GetByDocumentIdFromProductDocument
		
		/// <summary>
		///		Gets Product objects from the datasource by DocumentID in the
		///		ProductDocument table. Table Product is related to table Document
		///		through the (M:N) relationship defined in the ProductDocument table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Product objects.</returns>
		public override TList<Product> GetByDocumentIdFromProductDocument(TransactionManager transactionManager, System.Int32 _documentId, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.Product[] items = proxy.ProductProvider_GetByDocumentIdFromProductDocument(_documentId, start, pagelen, out count);
	
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetByDocumentIdFromProductDocument
		
		#region GetByLocationIdFromProductInventory
		
		/// <summary>
		///		Gets Product objects from the datasource by LocationID in the
		///		ProductInventory table. Table Product is related to table Location
		///		through the (M:N) relationship defined in the ProductInventory table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Product objects.</returns>
		public override TList<Product> GetByLocationIdFromProductInventory(TransactionManager transactionManager, System.Int16 _locationId, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.Product[] items = proxy.ProductProvider_GetByLocationIdFromProductInventory(_locationId, start, pagelen, out count);
	
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetByLocationIdFromProductInventory
		
		#region GetByProductPhotoIdFromProductProductPhoto
		
		/// <summary>
		///		Gets Product objects from the datasource by ProductPhotoID in the
		///		ProductProductPhoto table. Table Product is related to table ProductPhoto
		///		through the (M:N) relationship defined in the ProductProductPhoto table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Product objects.</returns>
		public override TList<Product> GetByProductPhotoIdFromProductProductPhoto(TransactionManager transactionManager, System.Int32 _productPhotoId, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.Product[] items = proxy.ProductProvider_GetByProductPhotoIdFromProductProductPhoto(_productPhotoId, start, pagelen, out count);
	
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetByProductPhotoIdFromProductProductPhoto
		
		#region GetByVendorIdFromProductVendor
		
		/// <summary>
		///		Gets Product objects from the datasource by VendorID in the
		///		ProductVendor table. Table Product is related to table Vendor
		///		through the (M:N) relationship defined in the ProductVendor table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Product objects.</returns>
		public override TList<Product> GetByVendorIdFromProductVendor(TransactionManager transactionManager, System.Int32 _vendorId, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.Product[] items = proxy.ProductProvider_GetByVendorIdFromProductVendor(_vendorId, start, pagelen, out count);
	
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetByVendorIdFromProductVendor
		
		#region GetBySpecialOfferIdFromSpecialOfferProduct
		
		/// <summary>
		///		Gets Product objects from the datasource by SpecialOfferID in the
		///		SpecialOfferProduct table. Table Product is related to table SpecialOffer
		///		through the (M:N) relationship defined in the SpecialOfferProduct table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Product objects.</returns>
		public override TList<Product> GetBySpecialOfferIdFromSpecialOfferProduct(TransactionManager transactionManager, System.Int32 _specialOfferId, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.Product[] items = proxy.ProductProvider_GetBySpecialOfferIdFromSpecialOfferProduct(_specialOfferId, start, pagelen, out count);
	
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetBySpecialOfferIdFromSpecialOfferProduct
		
		#endregion	
		
		
		#region Delete Methods
			
			/// <summary>
			/// 	Deletes a row from the DataSource.
			/// </summary>
			/// <param name="_productId">Primary key for Product records.. Primary Key.</param>	
            
			/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
			/// <remarks>Deletes based on primary key(s).</remarks>
			/// <returns>Returns true if operation suceeded.</returns>
			public override bool Delete(TransactionManager transactionManager, System.Int32 _productId)
			{
				try
				{
				// call the proxy
				WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
				proxy.Url = Url;
				
				bool result = proxy.ProductProvider_Delete(_productId);				
				return result;
				}
				catch(SoapException soex)
				{
					System.Diagnostics.Debug.WriteLine(soex);
					throw soex;
				}
				catch(Exception ex)
				{
					System.Diagnostics.Debug.WriteLine(ex);
					throw ex;
				}
			}
			
			#endregion Delete Methods
	
		
		#region Find Methods
		
		
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<Product> Find(TransactionManager transactionManager, string whereClause, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			WsProxy.Product[] items = proxy.ProductProvider_Find(whereClause, start, pagelen, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Find Methods
		
		
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>			
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<Product> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.Product[] items = proxy.ProductProvider_GetAll(start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetAll Methods
		
		#region GetPaged Methods
						
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<Product> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			try
			{
			whereClause = whereClause ?? string.Empty;
			orderBy = orderBy ?? string.Empty;
			
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			WsProxy.Product[] items = proxy.ProductProvider_GetPaged(whereClause, orderBy, start, pageLength, out count);
			
			// Create a collection and fill it with the dataset
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetPaged Methods
	
		
		#region Get By Foreign Key Functions
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_ProductModel_ProductModelID key.
		///		FK_Product_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<Product> GetByProductModelId(TransactionManager transactionManager, System.Int32? _productModelId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product[] items = proxy.ProductProvider_GetByProductModelId(_productModelId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_ProductSubcategory_ProductSubcategoryID key.
		///		FK_Product_ProductSubcategory_ProductSubcategoryID Description: Foreign key constraint referencing ProductSubcategory.ProductSubcategoryID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<Product> GetByProductSubcategoryId(TransactionManager transactionManager, System.Int32? _productSubcategoryId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product[] items = proxy.ProductProvider_GetByProductSubcategoryId(_productSubcategoryId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_UnitMeasure_SizeUnitMeasureCode key.
		///		FK_Product_UnitMeasure_SizeUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<Product> GetBySizeUnitMeasureCode(TransactionManager transactionManager, System.String _sizeUnitMeasureCode, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product[] items = proxy.ProductProvider_GetBySizeUnitMeasureCode(_sizeUnitMeasureCode, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_UnitMeasure_WeightUnitMeasureCode key.
		///		FK_Product_UnitMeasure_WeightUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<Product> GetByWeightUnitMeasureCode(TransactionManager transactionManager, System.String _weightUnitMeasureCode, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product[] items = proxy.ProductProvider_GetByWeightUnitMeasureCode(_weightUnitMeasureCode, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		#endregion
		
		
		#region Get By Index Functions
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_Product_Name index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_name">Name of the product.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.Product GetByName(TransactionManager transactionManager, System.String _name, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product items = proxy.ProductProvider_GetByName(_name, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_Product_ProductNumber index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_productNumber">Unique product identification number.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.Product GetByProductNumber(TransactionManager transactionManager, System.String _productNumber, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product items = proxy.ProductProvider_GetByProductNumber(_productNumber, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_Product_rowguid index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.Product GetByRowguid(TransactionManager transactionManager, System.Guid _rowguid, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product items = proxy.ProductProvider_GetByRowguid(_rowguid, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_Product_ProductID index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_productId">Primary key for Product records.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.Product GetByProductId(TransactionManager transactionManager, System.Int32 _productId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.Product items = proxy.ProductProvider_GetByProductId(_productId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Get By Index Functions
	
	
		#region Insert Methods
		/// <summary>
		/// 	Inserts a Nettiers.AdventureWorks.Entities.Product object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.Product object to insert.</param>		
		/// <remarks></remarks>		
		/// <returns>Returns true if operation is successful.</returns>
		public override bool Insert(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.Product entity)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			try
			{
				WsProxy.Product result = proxy.ProductProvider_Insert(Convert(entity));
				Convert(entity, result);
				return true;
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
	
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">NOTE: The transaction manager should be null for the web service client implementation.</param>
		/// <param name="entityList">The entities.</param>
		/// <remarks>
		/// After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Product object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		public override void BulkInsert(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.TList<Product> entityList)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			try
			{
				proxy.ProductProvider_BulkInsert(Convert(entityList));
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch (Exception ex)
			{	
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}

		#endregion Insert Methods
	
	
		#region Update Methods
						
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.Product object to update.</param>		
		/// <remarks></remarks>
		/// <returns>Returns true if operation is successful.</returns>
		public override bool Update(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.Product entity)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			try
			{
				WsProxy.Product result = proxy.ProductProvider_Update(Convert(entity));
				Convert(entity, result);
				entity.AcceptChanges();
				return true;
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Update Methods
			
		#region Custom Methods
		
		
		#endregion
					
	}//end class
} // end namespace
