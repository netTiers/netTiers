
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture.cs instead.
*/

#region Using directives

using System;
using System.Data;
using System.Collections;
using System.Diagnostics;
using System.Web.Services.Protocols;
using Nettiers.AdventureWorks.Entities;
using Nettiers.AdventureWorks.Data.Bases;

#endregion

namespace Nettiers.AdventureWorks.Data.WebServiceClient
{

	///<summary>
	/// This class is the webservice client implementation that exposes CRUD methods for Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.
	///</summary>
	public abstract partial class WsProductModelProductDescriptionCultureProviderBase : ProductModelProductDescriptionCultureProviderBase
	{
		#region Declarations	
	
		/// <summary>
		/// the Url of the webservice.
		/// </summary>
		private string url;
			
		#endregion Declarations
		
		#region Constructors
	
		/// <summary>
		/// Creates a new <see cref="WsProductModelProductDescriptionCultureProviderBase"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		public WsProductModelProductDescriptionCultureProviderBase()
		{		
		}
		
		/// <summary>
		/// Creates a new <see cref="WsProductModelProductDescriptionCultureProviderBase"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		/// <param name="url">The url to the nettiers webservice.</param>
		public WsProductModelProductDescriptionCultureProviderBase(string url)
		{
			this.Url = url;
		}
			
		#endregion Constructors
		
		#region Url
		///<summary>
		/// Current URL for webservice endpoint. 
		///</summary>
		public string Url
        {
        	get {return url;}
        	set {url = value;}
        }
		#endregion 
		
		#region Convertion utility
		
		/// <summary>
		/// Convert a collection from the ws proxy to a nettiers collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> Convert(WsProxy.ProductModelProductDescriptionCulture[] items)
		{
			Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> outItems = new Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture>();
			foreach(WsProxy.ProductModelProductDescriptionCulture item in items)
			{
				outItems.Add(Convert(item));
			}
			return outItems;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture Convert(WsProxy.ProductModelProductDescriptionCulture item)
		{	
			Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture outItem = item == null ? null : new Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture();
			Convert(outItem, item);					
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture Convert(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture outItem , WsProxy.ProductModelProductDescriptionCulture item)
		{	
			if (item != null && outItem != null)
			{
				outItem.ProductModelId = item.ProductModelId;
				outItem.ProductDescriptionId = item.ProductDescriptionId;
				outItem.CultureId = item.CultureId;
				outItem.ModifiedDate = item.ModifiedDate;
				
				outItem.OriginalProductModelId = item.ProductModelId;
				outItem.OriginalProductDescriptionId = item.ProductDescriptionId;
				outItem.OriginalCultureId = item.CultureId;
				outItem.AcceptChanges();			
			}
							
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers entity to the ws proxy entity.
		/// </summary>
		public static WsProxy.ProductModelProductDescriptionCulture Convert(Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture item)
		{			
			WsProxy.ProductModelProductDescriptionCulture outItem = new WsProxy.ProductModelProductDescriptionCulture();			
			outItem.ProductModelId = item.ProductModelId;
			outItem.ProductDescriptionId = item.ProductDescriptionId;
			outItem.CultureId = item.CultureId;
			outItem.ModifiedDate = item.ModifiedDate;

			outItem.OriginalProductModelId = item.OriginalProductModelId;
			outItem.OriginalProductDescriptionId = item.OriginalProductDescriptionId;
			outItem.OriginalCultureId = item.OriginalCultureId;
							
			return outItem;
		}
		
		/// <summary>
		/// Convert a collection from  to a nettiers collection to a the ws proxy collection.
		/// </summary>
		public static WsProxy.ProductModelProductDescriptionCulture[] Convert(Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> items)
		{
			WsProxy.ProductModelProductDescriptionCulture[] outItems = new WsProxy.ProductModelProductDescriptionCulture[items.Count];
			int count = 0;
		
			foreach (Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture item in items)
			{
				outItems[count++] = Convert(item);
			}
			return outItems;
		}

		
		#endregion
		
		#region Get from  Many To Many Relationship Functions
		#endregion	
		
		
		#region Delete Methods
			
			/// <summary>
			/// 	Deletes a row from the DataSource.
			/// </summary>
			/// <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.. Primary Key.</param>	
			/// <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.. Primary Key.</param>	
			/// <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.. Primary Key.</param>	
            
			/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
			/// <remarks>Deletes based on primary key(s).</remarks>
			/// <returns>Returns true if operation suceeded.</returns>
			public override bool Delete(TransactionManager transactionManager, System.Int32 _productModelId, System.Int32 _productDescriptionId, System.String _cultureId)
			{
				try
				{
				// call the proxy
				WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
				proxy.Url = Url;
				
				bool result = proxy.ProductModelProductDescriptionCultureProvider_Delete(_productModelId, _productDescriptionId, _cultureId);				
				return result;
				}
				catch(SoapException soex)
				{
					System.Diagnostics.Debug.WriteLine(soex);
					throw soex;
				}
				catch(Exception ex)
				{
					System.Diagnostics.Debug.WriteLine(ex);
					throw ex;
				}
			}
			
			#endregion Delete Methods
	
		
		#region Find Methods
		
		
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pagelen">Number of rows to return.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> Find(TransactionManager transactionManager, string whereClause, int start, int pagelen, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			WsProxy.ProductModelProductDescriptionCulture[] items = proxy.ProductModelProductDescriptionCultureProvider_Find(whereClause, start, pagelen, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Find Methods
		
		
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>			
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
				
			WsProxy.ProductModelProductDescriptionCulture[] items = proxy.ProductModelProductDescriptionCultureProvider_GetAll(start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetAll Methods
		
		#region GetPaged Methods
						
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			try
			{
			whereClause = whereClause ?? string.Empty;
			orderBy = orderBy ?? string.Empty;
			
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			WsProxy.ProductModelProductDescriptionCulture[] items = proxy.ProductModelProductDescriptionCultureProvider_GetPaged(whereClause, orderBy, start, pageLength, out count);
			
			// Create a collection and fill it with the dataset
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion GetPaged Methods
	
		
		#region Get By Foreign Key Functions
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ProductModelProductDescriptionCulture_Culture_CultureID key.
		///		FK_ProductModelProductDescriptionCulture_Culture_CultureID Description: Foreign key constraint referencing Culture.CultureID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> GetByCultureId(TransactionManager transactionManager, System.String _cultureId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.ProductModelProductDescriptionCulture[] items = proxy.ProductModelProductDescriptionCultureProvider_GetByCultureId(_cultureId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID key.
		///		FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID Description: Foreign key constraint referencing ProductDescription.ProductDescriptionID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> GetByProductDescriptionId(TransactionManager transactionManager, System.Int32 _productDescriptionId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.ProductModelProductDescriptionCulture[] items = proxy.ProductModelProductDescriptionCultureProvider_GetByProductDescriptionId(_productDescriptionId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID key.
		///		FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>		
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture objects.</returns>
		public override Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> GetByProductModelId(TransactionManager transactionManager, System.Int32 _productModelId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.ProductModelProductDescriptionCulture[] items = proxy.ProductModelProductDescriptionCultureProvider_GetByProductModelId(_productModelId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
			
		#endregion
		
		
		#region Get By Index Functions
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID index.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="_productModelId">Primary key. Foreign key to ProductModel.ProductModelID.</param>
		/// <param name="_productDescriptionId">Primary key. Foreign key to ProductDescription.ProductDescriptionID.</param>
		/// <param name="_cultureId">Culture identification number. Foreign key to Culture.CultureID.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="count">out parameter to get total records for query</param>	
		/// <remarks></remarks>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture"/> class.</returns>
		public override Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture GetByProductModelIdProductDescriptionIdCultureId(TransactionManager transactionManager, System.Int32 _productModelId, System.Int32 _productDescriptionId, System.String _cultureId, int start, int pageLength, out int count)
		{
			try
			{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			WsProxy.ProductModelProductDescriptionCulture items = proxy.ProductModelProductDescriptionCultureProvider_GetByProductModelIdProductDescriptionIdCultureId(_productModelId, _productDescriptionId, _cultureId, start, pageLength, out count);
			
			return Convert(items); 
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Get By Index Functions
	
	
		#region Insert Methods
		/// <summary>
		/// 	Inserts a Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object to insert.</param>		
		/// <remarks></remarks>		
		/// <returns>Returns true if operation is successful.</returns>
		public override bool Insert(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture entity)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			try
			{
				WsProxy.ProductModelProductDescriptionCulture result = proxy.ProductModelProductDescriptionCultureProvider_Insert(Convert(entity));
				Convert(entity, result);
				return true;
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
	
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">NOTE: The transaction manager should be null for the web service client implementation.</param>
		/// <param name="entityList">The entities.</param>
		/// <remarks>
		/// After inserting into the datasource, the Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		public override void BulkInsert(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.TList<ProductModelProductDescriptionCulture> entityList)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			try
			{
				proxy.ProductModelProductDescriptionCultureProvider_BulkInsert(Convert(entityList));
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch (Exception ex)
			{	
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}

		#endregion Insert Methods
	
	
		#region Update Methods
						
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture object to update.</param>		
		/// <remarks></remarks>
		/// <returns>Returns true if operation is successful.</returns>
		public override bool Update(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.ProductModelProductDescriptionCulture entity)
		{
			WsProxy.AdventureWorksServices proxy = new WsProxy.AdventureWorksServices();
			proxy.Url = Url;
			
			try
			{
				WsProxy.ProductModelProductDescriptionCulture result = proxy.ProductModelProductDescriptionCultureProvider_Update(Convert(entity));
				Convert(entity, result);
				entity.AcceptChanges();
				return true;
			}
			catch(SoapException soex)
			{
				System.Diagnostics.Debug.WriteLine(soex);
				throw soex;
			}
			catch(Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex);
				throw ex;
			}
		}
		
		#endregion Update Methods
			
		#region Custom Methods
		
		
		#endregion
					
	}//end class
} // end namespace
