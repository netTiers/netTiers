
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlProductProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using Nettiers.AdventureWorks.Entities;
using Nettiers.AdventureWorks.Data;
using Nettiers.AdventureWorks.Data.Bases;

#endregion

namespace Nettiers.AdventureWorks.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Product"/> entity.
	///</summary>
	public abstract partial class SqlProductProviderBase : ProductProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlProductProviderBase"/> instance.
		/// </summary>
		public SqlProductProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlProductProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlProductProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
	
		#region GetByDocumentIdFromProductDocument
		/// <summary>
		///		Gets Product objects from the datasource by DocumentID in the
		///		ProductDocument table. Table Product is related to table Document
		///		through the (M:N) relationship defined in the ProductDocument table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_documentId">Document identification number. Foreign key to Document.DocumentID.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns a <c>TList</c> of Product objects.</returns>
		public override TList<Product> GetByDocumentIdFromProductDocument(TransactionManager transactionManager, System.Int32 _documentId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByDocumentIdFromProductDocument", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@DocumentId", DbType.Int32, _documentId);
			
			IDataReader reader = null;
			// Create collection and fill
			TList<Product> rows = new TList<Product>();
			
			try
			{
				// Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDocumentIdFromProductDocument", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				// Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDocumentIdFromProductDocument", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByDocumentIdFromProductDocument
		
	
		#region GetByLocationIdFromProductInventory
		/// <summary>
		///		Gets Product objects from the datasource by LocationID in the
		///		ProductInventory table. Table Product is related to table Location
		///		through the (M:N) relationship defined in the ProductInventory table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_locationId">Inventory location identification number. Foreign key to Location.LocationID. </param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns a <c>TList</c> of Product objects.</returns>
		public override TList<Product> GetByLocationIdFromProductInventory(TransactionManager transactionManager, System.Int16 _locationId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByLocationIdFromProductInventory", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@LocationId", DbType.Int16, _locationId);
			
			IDataReader reader = null;
			// Create collection and fill
			TList<Product> rows = new TList<Product>();
			
			try
			{
				// Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLocationIdFromProductInventory", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				// Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLocationIdFromProductInventory", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByLocationIdFromProductInventory
		
	
		#region GetByProductPhotoIdFromProductProductPhoto
		/// <summary>
		///		Gets Product objects from the datasource by ProductPhotoID in the
		///		ProductProductPhoto table. Table Product is related to table ProductPhoto
		///		through the (M:N) relationship defined in the ProductProductPhoto table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productPhotoId">Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns a <c>TList</c> of Product objects.</returns>
		public override TList<Product> GetByProductPhotoIdFromProductProductPhoto(TransactionManager transactionManager, System.Int32 _productPhotoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByProductPhotoIdFromProductProductPhoto", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@ProductPhotoId", DbType.Int32, _productPhotoId);
			
			IDataReader reader = null;
			// Create collection and fill
			TList<Product> rows = new TList<Product>();
			
			try
			{
				// Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByProductPhotoIdFromProductProductPhoto", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				// Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByProductPhotoIdFromProductProductPhoto", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByProductPhotoIdFromProductProductPhoto
		
	
		#region GetByVendorIdFromProductVendor
		/// <summary>
		///		Gets Product objects from the datasource by VendorID in the
		///		ProductVendor table. Table Product is related to table Vendor
		///		through the (M:N) relationship defined in the ProductVendor table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_vendorId">Primary key. Foreign key to Vendor.VendorID.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns a <c>TList</c> of Product objects.</returns>
		public override TList<Product> GetByVendorIdFromProductVendor(TransactionManager transactionManager, System.Int32 _vendorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByVendorIdFromProductVendor", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@VendorId", DbType.Int32, _vendorId);
			
			IDataReader reader = null;
			// Create collection and fill
			TList<Product> rows = new TList<Product>();
			
			try
			{
				// Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByVendorIdFromProductVendor", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				// Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByVendorIdFromProductVendor", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByVendorIdFromProductVendor
		
	
		#region GetBySpecialOfferIdFromSpecialOfferProduct
		/// <summary>
		///		Gets Product objects from the datasource by SpecialOfferID in the
		///		SpecialOfferProduct table. Table Product is related to table SpecialOffer
		///		through the (M:N) relationship defined in the SpecialOfferProduct table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_specialOfferId">Primary key for SpecialOfferProduct records.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns a <c>TList</c> of Product objects.</returns>
		public override TList<Product> GetBySpecialOfferIdFromSpecialOfferProduct(TransactionManager transactionManager, System.Int32 _specialOfferId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetBySpecialOfferIdFromSpecialOfferProduct", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@SpecialOfferId", DbType.Int32, _specialOfferId);
			
			IDataReader reader = null;
			// Create collection and fill
			TList<Product> rows = new TList<Product>();
			
			try
			{
				// Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySpecialOfferIdFromSpecialOfferProduct", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				// Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySpecialOfferIdFromSpecialOfferProduct", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetBySpecialOfferIdFromSpecialOfferProduct
		
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_productId">Primary key for Product records.. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _productId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@ProductId", DbType.Int32, _productId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Product)
					,_productId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override TList<Product> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<Product>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@ProductId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Name", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MakeFlag", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FinishedGoodsFlag", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Color", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SafetyStockLevel", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReorderPoint", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StandardCost", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ListPrice", DbType.Currency, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Size", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SizeUnitMeasureCode", DbType.StringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WeightUnitMeasureCode", DbType.StringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Weight", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaysToManufacture", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductLine", DbType.StringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SafeNameClass", DbType.StringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Style", DbType.StringFixedLength, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductSubcategoryId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProductModelId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SellStartDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SellEndDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiscontinuedDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Rowguid", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModifiedDate", DbType.DateTime, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("productid ") || clause.Trim().StartsWith("productid="))
				{
					database.SetParameterValue(commandWrapper, "@ProductId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("name ") || clause.Trim().StartsWith("name="))
				{
					database.SetParameterValue(commandWrapper, "@Name", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productnumber ") || clause.Trim().StartsWith("productnumber="))
				{
					database.SetParameterValue(commandWrapper, "@ProductNumber", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makeflag ") || clause.Trim().StartsWith("makeflag="))
				{
					database.SetParameterValue(commandWrapper, "@MakeFlag", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("finishedgoodsflag ") || clause.Trim().StartsWith("finishedgoodsflag="))
				{
					database.SetParameterValue(commandWrapper, "@FinishedGoodsFlag", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("color ") || clause.Trim().StartsWith("color="))
				{
					database.SetParameterValue(commandWrapper, "@Color", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("safetystocklevel ") || clause.Trim().StartsWith("safetystocklevel="))
				{
					database.SetParameterValue(commandWrapper, "@SafetyStockLevel", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("reorderpoint ") || clause.Trim().StartsWith("reorderpoint="))
				{
					database.SetParameterValue(commandWrapper, "@ReorderPoint", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("standardcost ") || clause.Trim().StartsWith("standardcost="))
				{
					database.SetParameterValue(commandWrapper, "@StandardCost", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("listprice ") || clause.Trim().StartsWith("listprice="))
				{
					database.SetParameterValue(commandWrapper, "@ListPrice", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("size ") || clause.Trim().StartsWith("size="))
				{
					database.SetParameterValue(commandWrapper, "@Size", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sizeunitmeasurecode ") || clause.Trim().StartsWith("sizeunitmeasurecode="))
				{
					database.SetParameterValue(commandWrapper, "@SizeUnitMeasureCode", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("weightunitmeasurecode ") || clause.Trim().StartsWith("weightunitmeasurecode="))
				{
					database.SetParameterValue(commandWrapper, "@WeightUnitMeasureCode", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("weight ") || clause.Trim().StartsWith("weight="))
				{
					database.SetParameterValue(commandWrapper, "@Weight", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("daystomanufacture ") || clause.Trim().StartsWith("daystomanufacture="))
				{
					database.SetParameterValue(commandWrapper, "@DaysToManufacture", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productline ") || clause.Trim().StartsWith("productline="))
				{
					database.SetParameterValue(commandWrapper, "@ProductLine", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("class ") || clause.Trim().StartsWith("class="))
				{
					database.SetParameterValue(commandWrapper, "@SafeNameClass", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("style ") || clause.Trim().StartsWith("style="))
				{
					database.SetParameterValue(commandWrapper, "@Style", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productsubcategoryid ") || clause.Trim().StartsWith("productsubcategoryid="))
				{
					database.SetParameterValue(commandWrapper, "@ProductSubcategoryId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("productmodelid ") || clause.Trim().StartsWith("productmodelid="))
				{
					database.SetParameterValue(commandWrapper, "@ProductModelId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sellstartdate ") || clause.Trim().StartsWith("sellstartdate="))
				{
					database.SetParameterValue(commandWrapper, "@SellStartDate", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sellenddate ") || clause.Trim().StartsWith("sellenddate="))
				{
					database.SetParameterValue(commandWrapper, "@SellEndDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("discontinueddate ") || clause.Trim().StartsWith("discontinueddate="))
				{
					database.SetParameterValue(commandWrapper, "@DiscontinuedDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("rowguid ") || clause.Trim().StartsWith("rowguid="))
				{
					database.SetParameterValue(commandWrapper, "@Rowguid", new Guid(
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("modifieddate ") || clause.Trim().StartsWith("modifieddate="))
				{
					database.SetParameterValue(commandWrapper, "@ModifiedDate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<Product> rows = new TList<Product>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override TList<Product> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_Find_Dynamic", typeof(ProductColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<Product> rows = new TList<Product>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Product> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<Product> rows = new TList<Product>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
		public override TList<Product> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<Product> rows = new TList<Product>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByProductModelId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_ProductModel_ProductModelID key.
		///		FK_Product_ProductModel_ProductModelID Description: Foreign key constraint referencing ProductModel.ProductModelID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productModelId">Product is a member of this product model. Foreign key to ProductModel.ProductModelID.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Product> GetByProductModelId(TransactionManager transactionManager, System.Int32? _productModelId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByProductModelId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProductModelId", DbType.Int32, _productModelId);
			
			IDataReader reader = null;
			TList<Product> rows = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByProductModelId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByProductModelId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByProductSubcategoryId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_ProductSubcategory_ProductSubcategoryID key.
		///		FK_Product_ProductSubcategory_ProductSubcategoryID Description: Foreign key constraint referencing ProductSubcategory.ProductSubcategoryID.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productSubcategoryId">Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. </param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Product> GetByProductSubcategoryId(TransactionManager transactionManager, System.Int32? _productSubcategoryId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByProductSubcategoryId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProductSubcategoryId", DbType.Int32, _productSubcategoryId);
			
			IDataReader reader = null;
			TList<Product> rows = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByProductSubcategoryId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByProductSubcategoryId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySizeUnitMeasureCode
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_UnitMeasure_SizeUnitMeasureCode key.
		///		FK_Product_UnitMeasure_SizeUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_sizeUnitMeasureCode">Unit of measure for Size column.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Product> GetBySizeUnitMeasureCode(TransactionManager transactionManager, System.String _sizeUnitMeasureCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetBySizeUnitMeasureCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SizeUnitMeasureCode", DbType.StringFixedLength, _sizeUnitMeasureCode);
			
			IDataReader reader = null;
			TList<Product> rows = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySizeUnitMeasureCode", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySizeUnitMeasureCode", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByWeightUnitMeasureCode
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_Product_UnitMeasure_WeightUnitMeasureCode key.
		///		FK_Product_UnitMeasure_WeightUnitMeasureCode Description: Foreign key constraint referencing UnitMeasure.UnitMeasureCode.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_weightUnitMeasureCode">Unit of measure for Weight column.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Nettiers.AdventureWorks.Entities.Product objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Product> GetByWeightUnitMeasureCode(TransactionManager transactionManager, System.String _weightUnitMeasureCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByWeightUnitMeasureCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@WeightUnitMeasureCode", DbType.StringFixedLength, _weightUnitMeasureCode);
			
			IDataReader reader = null;
			TList<Product> rows = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByWeightUnitMeasureCode", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByWeightUnitMeasureCode", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByName
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_Product_Name index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_name">Name of the product.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override Nettiers.AdventureWorks.Entities.Product GetByName(TransactionManager transactionManager, System.String _name, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByName", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Name", DbType.String, _name);
			
			IDataReader reader = null;
			TList<Product> tmp = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByName", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByName", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByProductNumber
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_Product_ProductNumber index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productNumber">Unique product identification number.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override Nettiers.AdventureWorks.Entities.Product GetByProductNumber(TransactionManager transactionManager, System.String _productNumber, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByProductNumber", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProductNumber", DbType.String, _productNumber);
			
			IDataReader reader = null;
			TList<Product> tmp = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByProductNumber", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByProductNumber", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByRowguid
					
		/// <summary>
		/// 	Gets rows from the datasource based on the AK_Product_rowguid index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_rowguid">ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override Nettiers.AdventureWorks.Entities.Product GetByRowguid(TransactionManager transactionManager, System.Guid _rowguid, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByRowguid", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Rowguid", DbType.Guid, _rowguid);
			
			IDataReader reader = null;
			TList<Product> tmp = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByRowguid", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByRowguid", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByProductId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_Product_ProductID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_productId">Primary key for Product records.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="Nettiers.AdventureWorks.Entities.Product"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override Nettiers.AdventureWorks.Entities.Product GetByProductId(TransactionManager transactionManager, System.Int32 _productId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_GetByProductId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ProductId", DbType.Int32, _productId);
			
			IDataReader reader = null;
			TList<Product> tmp = new TList<Product>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByProductId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByProductId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Product object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<Nettiers.AdventureWorks.Entities.Product> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "Product";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ProductID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("Name", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("ProductNumber", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("MakeFlag", typeof(System.Boolean));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("FinishedGoodsFlag", typeof(System.Boolean));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("Color", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("SafetyStockLevel", typeof(System.Int16));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("ReorderPoint", typeof(System.Int16));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("StandardCost", typeof(System.Decimal));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("ListPrice", typeof(System.Decimal));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("Size", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("SizeUnitMeasureCode", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("WeightUnitMeasureCode", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("Weight", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("DaysToManufacture", typeof(System.Int32));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("ProductLine", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("Class", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("Style", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ProductSubcategoryID", typeof(System.Int32));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("ProductModelID", typeof(System.Int32));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("SellStartDate", typeof(System.DateTime));
			col20.AllowDBNull = false;		
			DataColumn col21 = dataTable.Columns.Add("SellEndDate", typeof(System.DateTime));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("DiscontinuedDate", typeof(System.DateTime));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("rowguid", typeof(System.Guid));
			col23.AllowDBNull = false;		
			DataColumn col24 = dataTable.Columns.Add("ModifiedDate", typeof(System.DateTime));
			col24.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("ProductID", "ProductID");
			bulkCopy.ColumnMappings.Add("Name", "Name");
			bulkCopy.ColumnMappings.Add("ProductNumber", "ProductNumber");
			bulkCopy.ColumnMappings.Add("MakeFlag", "MakeFlag");
			bulkCopy.ColumnMappings.Add("FinishedGoodsFlag", "FinishedGoodsFlag");
			bulkCopy.ColumnMappings.Add("Color", "Color");
			bulkCopy.ColumnMappings.Add("SafetyStockLevel", "SafetyStockLevel");
			bulkCopy.ColumnMappings.Add("ReorderPoint", "ReorderPoint");
			bulkCopy.ColumnMappings.Add("StandardCost", "StandardCost");
			bulkCopy.ColumnMappings.Add("ListPrice", "ListPrice");
			bulkCopy.ColumnMappings.Add("Size", "Size");
			bulkCopy.ColumnMappings.Add("SizeUnitMeasureCode", "SizeUnitMeasureCode");
			bulkCopy.ColumnMappings.Add("WeightUnitMeasureCode", "WeightUnitMeasureCode");
			bulkCopy.ColumnMappings.Add("Weight", "Weight");
			bulkCopy.ColumnMappings.Add("DaysToManufacture", "DaysToManufacture");
			bulkCopy.ColumnMappings.Add("ProductLine", "ProductLine");
			bulkCopy.ColumnMappings.Add("Class", "Class");
			bulkCopy.ColumnMappings.Add("Style", "Style");
			bulkCopy.ColumnMappings.Add("ProductSubcategoryID", "ProductSubcategoryID");
			bulkCopy.ColumnMappings.Add("ProductModelID", "ProductModelID");
			bulkCopy.ColumnMappings.Add("SellStartDate", "SellStartDate");
			bulkCopy.ColumnMappings.Add("SellEndDate", "SellEndDate");
			bulkCopy.ColumnMappings.Add("DiscontinuedDate", "DiscontinuedDate");
			bulkCopy.ColumnMappings.Add("rowguid", "rowguid");
			bulkCopy.ColumnMappings.Add("ModifiedDate", "ModifiedDate");
			
			foreach(Nettiers.AdventureWorks.Entities.Product entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ProductID"] = entity.ProductId;
							
				
					row["Name"] = entity.Name;
							
				
					row["ProductNumber"] = entity.ProductNumber;
							
				
					row["MakeFlag"] = entity.MakeFlag;
							
				
					row["FinishedGoodsFlag"] = entity.FinishedGoodsFlag;
							
				
					row["Color"] = entity.Color;
							
				
					row["SafetyStockLevel"] = entity.SafetyStockLevel;
							
				
					row["ReorderPoint"] = entity.ReorderPoint;
							
				
					row["StandardCost"] = entity.StandardCost;
							
				
					row["ListPrice"] = entity.ListPrice;
							
				
					row["Size"] = entity.Size;
							
				
					row["SizeUnitMeasureCode"] = entity.SizeUnitMeasureCode;
							
				
					row["WeightUnitMeasureCode"] = entity.WeightUnitMeasureCode;
							
				
					row["Weight"] = entity.Weight.HasValue ? (object) entity.Weight  : System.DBNull.Value;
							
				
					row["DaysToManufacture"] = entity.DaysToManufacture;
							
				
					row["ProductLine"] = entity.ProductLine;
							
				
					row["Class"] = entity.SafeNameClass;
							
				
					row["Style"] = entity.Style;
							
				
					row["ProductSubcategoryID"] = entity.ProductSubcategoryId.HasValue ? (object) entity.ProductSubcategoryId  : System.DBNull.Value;
							
				
					row["ProductModelID"] = entity.ProductModelId.HasValue ? (object) entity.ProductModelId  : System.DBNull.Value;
							
				
					row["SellStartDate"] = entity.SellStartDate;
							
				
					row["SellEndDate"] = entity.SellEndDate.HasValue ? (object) entity.SellEndDate  : System.DBNull.Value;
							
				
					row["DiscontinuedDate"] = entity.DiscontinuedDate.HasValue ? (object) entity.DiscontinuedDate  : System.DBNull.Value;
							
				
					row["rowguid"] = entity.Rowguid;
							
				
					row["ModifiedDate"] = entity.ModifiedDate;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(Nettiers.AdventureWorks.Entities.Product entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a Nettiers.AdventureWorks.Entities.Product object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.Product object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the Nettiers.AdventureWorks.Entities.Product object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.Product entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@ProductId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@Name", DbType.String, entity.Name );
			database.AddInParameter(commandWrapper, "@ProductNumber", DbType.String, entity.ProductNumber );
			database.AddInParameter(commandWrapper, "@MakeFlag", DbType.Boolean, entity.MakeFlag );
			database.AddInParameter(commandWrapper, "@FinishedGoodsFlag", DbType.Boolean, entity.FinishedGoodsFlag );
			database.AddInParameter(commandWrapper, "@Color", DbType.String, entity.Color );
			database.AddInParameter(commandWrapper, "@SafetyStockLevel", DbType.Int16, entity.SafetyStockLevel );
			database.AddInParameter(commandWrapper, "@ReorderPoint", DbType.Int16, entity.ReorderPoint );
			database.AddInParameter(commandWrapper, "@StandardCost", DbType.Currency, entity.StandardCost );
			database.AddInParameter(commandWrapper, "@ListPrice", DbType.Currency, entity.ListPrice );
			database.AddInParameter(commandWrapper, "@Size", DbType.String, entity.Size );
			database.AddInParameter(commandWrapper, "@SizeUnitMeasureCode", DbType.StringFixedLength, entity.SizeUnitMeasureCode );
			database.AddInParameter(commandWrapper, "@WeightUnitMeasureCode", DbType.StringFixedLength, entity.WeightUnitMeasureCode );
			database.AddInParameter(commandWrapper, "@Weight", DbType.Decimal, (entity.Weight.HasValue ? (object) entity.Weight  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DaysToManufacture", DbType.Int32, entity.DaysToManufacture );
			database.AddInParameter(commandWrapper, "@ProductLine", DbType.StringFixedLength, entity.ProductLine );
			database.AddInParameter(commandWrapper, "@SafeNameClass", DbType.StringFixedLength, entity.SafeNameClass );
			database.AddInParameter(commandWrapper, "@Style", DbType.StringFixedLength, entity.Style );
			database.AddInParameter(commandWrapper, "@ProductSubcategoryId", DbType.Int32, (entity.ProductSubcategoryId.HasValue ? (object) entity.ProductSubcategoryId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProductModelId", DbType.Int32, (entity.ProductModelId.HasValue ? (object) entity.ProductModelId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SellStartDate", DbType.DateTime, entity.SellStartDate );
			database.AddInParameter(commandWrapper, "@SellEndDate", DbType.DateTime, (entity.SellEndDate.HasValue ? (object) entity.SellEndDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DiscontinuedDate", DbType.DateTime, (entity.DiscontinuedDate.HasValue ? (object) entity.DiscontinuedDate  : System.DBNull.Value));
			database.AddOutParameter(commandWrapper, "@Rowguid", DbType.Guid, 16);
			database.AddInParameter(commandWrapper, "@ModifiedDate", DbType.DateTime, entity.ModifiedDate );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _productId = database.GetParameterValue(commandWrapper, "@ProductId");
			entity.ProductId = (System.Int32)_productId;
			object _rowguid = database.GetParameterValue(commandWrapper, "@Rowguid");
			entity.Rowguid = (System.Guid)_rowguid;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">Nettiers.AdventureWorks.Entities.Product object to update.</param>
		/// <remarks>
		///		After updating the datasource, the Nettiers.AdventureWorks.Entities.Product object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, Nettiers.AdventureWorks.Entities.Product entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "Production.usp_adwTiers_Product_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@ProductId", DbType.Int32, entity.ProductId );
			database.AddInParameter(commandWrapper, "@Name", DbType.String, entity.Name );
			database.AddInParameter(commandWrapper, "@ProductNumber", DbType.String, entity.ProductNumber );
			database.AddInParameter(commandWrapper, "@MakeFlag", DbType.Boolean, entity.MakeFlag );
			database.AddInParameter(commandWrapper, "@FinishedGoodsFlag", DbType.Boolean, entity.FinishedGoodsFlag );
			database.AddInParameter(commandWrapper, "@Color", DbType.String, entity.Color );
			database.AddInParameter(commandWrapper, "@SafetyStockLevel", DbType.Int16, entity.SafetyStockLevel );
			database.AddInParameter(commandWrapper, "@ReorderPoint", DbType.Int16, entity.ReorderPoint );
			database.AddInParameter(commandWrapper, "@StandardCost", DbType.Currency, entity.StandardCost );
			database.AddInParameter(commandWrapper, "@ListPrice", DbType.Currency, entity.ListPrice );
			database.AddInParameter(commandWrapper, "@Size", DbType.String, entity.Size );
			database.AddInParameter(commandWrapper, "@SizeUnitMeasureCode", DbType.StringFixedLength, entity.SizeUnitMeasureCode );
			database.AddInParameter(commandWrapper, "@WeightUnitMeasureCode", DbType.StringFixedLength, entity.WeightUnitMeasureCode );
			database.AddInParameter(commandWrapper, "@Weight", DbType.Decimal, (entity.Weight.HasValue ? (object) entity.Weight : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DaysToManufacture", DbType.Int32, entity.DaysToManufacture );
			database.AddInParameter(commandWrapper, "@ProductLine", DbType.StringFixedLength, entity.ProductLine );
			database.AddInParameter(commandWrapper, "@SafeNameClass", DbType.StringFixedLength, entity.SafeNameClass );
			database.AddInParameter(commandWrapper, "@Style", DbType.StringFixedLength, entity.Style );
			database.AddInParameter(commandWrapper, "@ProductSubcategoryId", DbType.Int32, (entity.ProductSubcategoryId.HasValue ? (object) entity.ProductSubcategoryId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProductModelId", DbType.Int32, (entity.ProductModelId.HasValue ? (object) entity.ProductModelId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SellStartDate", DbType.DateTime, entity.SellStartDate );
			database.AddInParameter(commandWrapper, "@SellEndDate", DbType.DateTime, (entity.SellEndDate.HasValue ? (object) entity.SellEndDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DiscontinuedDate", DbType.DateTime, (entity.DiscontinuedDate.HasValue ? (object) entity.DiscontinuedDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Rowguid", DbType.Guid, entity.Rowguid );
			database.AddInParameter(commandWrapper, "@ModifiedDate", DbType.DateTime, entity.ModifiedDate );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
