<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database includeDrop="true">AdventureWorks</database>
<procedures>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesTerritory table
-- Table Comment: Sales territory lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TerritoryID],
					[Name],
					[CountryRegionCode],
					[Group],
					[SalesYTD],
					[SalesLastYear],
					[CostYTD],
					[CostLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesTerritory table passing page index and page count parameters
-- Table Comment: Sales territory lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TerritoryID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CountryRegionCode]'
				SET @SQL = @SQL + ', [Group]'
				SET @SQL = @SQL + ', [SalesYTD]'
				SET @SQL = @SQL + ', [SalesLastYear]'
				SET @SQL = @SQL + ', [CostYTD]'
				SET @SQL = @SQL + ', [CostLastYear]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesTerritory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CountryRegionCode],'
				SET @SQL = @SQL + ' [Group],'
				SET @SQL = @SQL + ' [SalesYTD],'
				SET @SQL = @SQL + ' [SalesLastYear],'
				SET @SQL = @SQL + ' [CostYTD],'
				SET @SQL = @SQL + ' [CostLastYear],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesTerritory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesTerritory table
-- Table Comment: Sales territory lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Group" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SalesYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@SalesLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@CostYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@CostLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SalesTerritory]
					(
					[Name]
					,[CountryRegionCode]
					,[Group]
					,[SalesYTD]
					,[SalesLastYear]
					,[CostYTD]
					,[CostLastYear]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Name
					,@CountryRegionCode
					,@Group
					,@SalesYtd
					,@SalesLastYear
					,@CostYtd
					,@CostLastYear
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @TerritoryId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesTerritory table
-- Table Comment: Sales territory lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Group" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SalesYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@SalesLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@CostYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@CostLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesTerritory]
				SET
					[Name] = @Name
					,[CountryRegionCode] = @CountryRegionCode
					,[Group] = @Group
					,[SalesYTD] = @SalesYtd
					,[SalesLastYear] = @SalesLastYear
					,[CostYTD] = @CostYtd
					,[CostLastYear] = @CostLastYear
					,[ModifiedDate] = @ModifiedDate
				WHERE
[TerritoryID] = @TerritoryId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesTerritory table
-- Table Comment: Sales territory lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesTerritory] WITH (ROWLOCK) 
				WHERE
					[TerritoryID] = @TerritoryId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTerritory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TerritoryID],
					[Name],
					[CountryRegionCode],
					[Group],
					[SalesYTD],
					[SalesLastYear],
					[CostYTD],
					[CostLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritory]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTerritory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TerritoryID],
					[Name],
					[CountryRegionCode],
					[Group],
					[SalesYTD],
					[SalesLastYear],
					[CostYTD],
					[CostLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritory]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTerritory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TerritoryID],
					[Name],
					[CountryRegionCode],
					[Group],
					[SalesYTD],
					[SalesLastYear],
					[CostYTD],
					[CostLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritory]
				WHERE
					[TerritoryID] = @TerritoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesTerritory table passing nullable parameters
-- Table Comment: Sales territory lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Group" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SalesYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@SalesLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@CostYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@CostLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TerritoryID]
	, [Name]
	, [CountryRegionCode]
	, [Group]
	, [SalesYTD]
	, [SalesLastYear]
	, [CostYTD]
	, [CostLastYear]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesTerritory]
    WHERE 
	 ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([CountryRegionCode] = @CountryRegionCode OR @CountryRegionCode IS NULL)
	AND ([Group] = @Group OR @Group IS NULL)
	AND ([SalesYTD] = @SalesYtd OR @SalesYtd IS NULL)
	AND ([SalesLastYear] = @SalesLastYear OR @SalesLastYear IS NULL)
	AND ([CostYTD] = @CostYtd OR @CostYtd IS NULL)
	AND ([CostLastYear] = @CostLastYear OR @CostLastYear IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TerritoryID]
	, [Name]
	, [CountryRegionCode]
	, [Group]
	, [SalesYTD]
	, [SalesLastYear]
	, [CostYTD]
	, [CostLastYear]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesTerritory]
    WHERE 
	 ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([CountryRegionCode] = @CountryRegionCode AND @CountryRegionCode is not null)
	OR ([Group] = @Group AND @Group is not null)
	OR ([SalesYTD] = @SalesYtd AND @SalesYtd is not null)
	OR ([SalesLastYear] = @SalesLastYear AND @SalesLastYear is not null)
	OR ([CostYTD] = @CostYtd AND @CostYtd is not null)
	OR ([CostLastYear] = @CostLastYear AND @CostLastYear is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesTerritory table using a dynamically generated query.
-- Table Comment: Sales territory lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [TerritoryID]
					, [Name]
					, [CountryRegionCode]
					, [Group]
					, [SalesYTD]
					, [SalesLastYear]
					, [CostYTD]
					, [CostLastYear]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SalesTerritory] {0}
				)
				SELECT
				       [TerritoryID],
				       [Name],
				       [CountryRegionCode],
				       [Group],
				       [SalesYTD],
				       [SalesLastYear],
				       [CostYTD],
				       [CostLastYear],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesTerritory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Location_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Location table
-- Table Comment: Product inventory and manufacturing locations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[LocationID],
					[Name],
					[CostRate],
					[Availability],
					[ModifiedDate]
				FROM
					[Production].[Location]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Location_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Location table passing page index and page count parameters
-- Table Comment: Product inventory and manufacturing locations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[LocationID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [LocationID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CostRate]'
				SET @SQL = @SQL + ', [Availability]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[Location]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [LocationID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CostRate],'
				SET @SQL = @SQL + ' [Availability],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[Location]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_Location_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Location table
-- Table Comment: Product inventory and manufacturing locations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LocationId" type="smallint" direction="Output" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CostRate" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@Availability" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[Location]
					(
					[Name]
					,[CostRate]
					,[Availability]
					,[ModifiedDate]
					)
				VALUES
					(
					@Name
					,@CostRate
					,@Availability
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @LocationId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Location_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Location table
-- Table Comment: Product inventory and manufacturing locations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CostRate" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@Availability" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[Location]
				SET
					[Name] = @Name
					,[CostRate] = @CostRate
					,[Availability] = @Availability
					,[ModifiedDate] = @ModifiedDate
				WHERE
[LocationID] = @LocationId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Location_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Location table
-- Table Comment: Product inventory and manufacturing locations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[Location] WITH (ROWLOCK) 
				WHERE
					[LocationID] = @LocationId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Location_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Location table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[LocationID],
					[Name],
					[CostRate],
					[Availability],
					[ModifiedDate]
				FROM
					[Production].[Location]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Location_GetByLocationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Location table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[LocationID],
					[Name],
					[CostRate],
					[Availability],
					[ModifiedDate]
				FROM
					[Production].[Location]
				WHERE
					[LocationID] = @LocationId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Location_GetByProductIdFromProductInventory" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Location].[LocationID]
       ,Production.[Location].[Name]
       ,Production.[Location].[CostRate]
       ,Production.[Location].[Availability]
       ,Production.[Location].[ModifiedDate]
  FROM Production.[Location]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductInventory] 
                WHERE Production.[ProductInventory].[ProductID] = @ProductId
                  AND Production.[ProductInventory].[LocationID] = Production.[Location].[LocationID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Location_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Location table passing nullable parameters
-- Table Comment: Product inventory and manufacturing locations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CostRate" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault="null"/>
				<parameter name="@Availability" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [LocationID]
	, [Name]
	, [CostRate]
	, [Availability]
	, [ModifiedDate]
    FROM
	[Production].[Location]
    WHERE 
	 ([LocationID] = @LocationId OR @LocationId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([CostRate] = @CostRate OR @CostRate IS NULL)
	AND ([Availability] = @Availability OR @Availability IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [LocationID]
	, [Name]
	, [CostRate]
	, [Availability]
	, [ModifiedDate]
    FROM
	[Production].[Location]
    WHERE 
	 ([LocationID] = @LocationId AND @LocationId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([CostRate] = @CostRate AND @CostRate is not null)
	OR ([Availability] = @Availability AND @Availability is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_Location_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Location table using a dynamically generated query.
-- Table Comment: Product inventory and manufacturing locations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [LocationID]
					, [Name]
					, [CostRate]
					, [Availability]
					, [ModifiedDate]
					FROM [Production].[Location] {0}
				)
				SELECT
				       [LocationID],
				       [Name],
				       [CostRate],
				       [Availability],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[Location] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesReason table
-- Table Comment: Lookup table of customer purchase reasons.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesReasonID],
					[Name],
					[ReasonType],
					[ModifiedDate]
				FROM
					[Sales].[SalesReason]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesReason table passing page index and page count parameters
-- Table Comment: Lookup table of customer purchase reasons.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesReasonID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesReasonID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ReasonType]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesReasonID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ReasonType],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesReason table
-- Table Comment: Lookup table of customer purchase reasons.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesReasonId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ReasonType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[SalesReason]
					(
					[Name]
					,[ReasonType]
					,[ModifiedDate]
					)
				VALUES
					(
					@Name
					,@ReasonType
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @SalesReasonId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesReason table
-- Table Comment: Lookup table of customer purchase reasons.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ReasonType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesReason]
				SET
					[Name] = @Name
					,[ReasonType] = @ReasonType
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesReasonID] = @SalesReasonId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesReason table
-- Table Comment: Lookup table of customer purchase reasons.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesReason] WITH (ROWLOCK) 
				WHERE
					[SalesReasonID] = @SalesReasonId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_GetBySalesReasonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesReason table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesReasonID],
					[Name],
					[ReasonType],
					[ModifiedDate]
				FROM
					[Sales].[SalesReason]
				WHERE
					[SalesReasonID] = @SalesReasonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_GetBySalesOrderIdFromSalesOrderHeaderSalesReason" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Sales.[SalesReason].[SalesReasonID]
       ,Sales.[SalesReason].[Name]
       ,Sales.[SalesReason].[ReasonType]
       ,Sales.[SalesReason].[ModifiedDate]
  FROM Sales.[SalesReason]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[SalesOrderHeaderSalesReason] 
                WHERE Sales.[SalesOrderHeaderSalesReason].[SalesOrderID] = @SalesOrderId
                  AND Sales.[SalesOrderHeaderSalesReason].[SalesReasonID] = Sales.[SalesReason].[SalesReasonID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesReason table passing nullable parameters
-- Table Comment: Lookup table of customer purchase reasons.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ReasonType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesReasonID]
	, [Name]
	, [ReasonType]
	, [ModifiedDate]
    FROM
	[Sales].[SalesReason]
    WHERE 
	 ([SalesReasonID] = @SalesReasonId OR @SalesReasonId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ReasonType] = @ReasonType OR @ReasonType IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesReasonID]
	, [Name]
	, [ReasonType]
	, [ModifiedDate]
    FROM
	[Sales].[SalesReason]
    WHERE 
	 ([SalesReasonID] = @SalesReasonId AND @SalesReasonId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ReasonType] = @ReasonType AND @ReasonType is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesReason_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesReason table using a dynamically generated query.
-- Table Comment: Lookup table of customer purchase reasons.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesReasonID]
					, [Name]
					, [ReasonType]
					, [ModifiedDate]
					FROM [Sales].[SalesReason] {0}
				)
				SELECT
				       [SalesReasonID],
				       [Name],
				       [ReasonType],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesReason] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesPersonQuotaHistory table
-- Table Comment: Sales performance tracking.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesPersonID],
					[QuotaDate],
					[SalesQuota],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPersonQuotaHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesPersonQuotaHistory table passing page index and page count parameters
-- Table Comment: Sales performance tracking.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesPersonID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [QuotaDate]'
				SET @SQL = @SQL + ', [SalesQuota]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesPersonQuotaHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [QuotaDate],'
				SET @SQL = @SQL + ' [SalesQuota],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesPersonQuotaHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesPersonQuotaHistory table
-- Table Comment: Sales performance tracking.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuotaDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SalesQuota" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SalesPersonQuotaHistory]
					(
					[SalesPersonID]
					,[QuotaDate]
					,[SalesQuota]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@SalesPersonId
					,@QuotaDate
					,@SalesQuota
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesPersonQuotaHistory table
-- Table Comment: Sales performance tracking.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalSalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuotaDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalQuotaDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SalesQuota" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesPersonQuotaHistory]
				SET
					[SalesPersonID] = @SalesPersonId
					,[QuotaDate] = @QuotaDate
					,[SalesQuota] = @SalesQuota
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesPersonID] = @OriginalSalesPersonId 
AND [QuotaDate] = @OriginalQuotaDate 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesPersonQuotaHistory table
-- Table Comment: Sales performance tracking.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuotaDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesPersonQuotaHistory] WITH (ROWLOCK) 
				WHERE
					[SalesPersonID] = @SalesPersonId
					AND [QuotaDate] = @QuotaDate
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesPersonQuotaHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesPersonID],
					[QuotaDate],
					[SalesQuota],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPersonQuotaHistory]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesPersonQuotaHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesPersonID],
					[QuotaDate],
					[SalesQuota],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPersonQuotaHistory]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_GetBySalesPersonIdQuotaDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesPersonQuotaHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuotaDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesPersonID],
					[QuotaDate],
					[SalesQuota],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPersonQuotaHistory]
				WHERE
					[SalesPersonID] = @SalesPersonId
					AND [QuotaDate] = @QuotaDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesPersonQuotaHistory table passing nullable parameters
-- Table Comment: Sales performance tracking.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@QuotaDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@SalesQuota" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesPersonID]
	, [QuotaDate]
	, [SalesQuota]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesPersonQuotaHistory]
    WHERE 
	 ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([QuotaDate] = @QuotaDate OR @QuotaDate IS NULL)
	AND ([SalesQuota] = @SalesQuota OR @SalesQuota IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesPersonID]
	, [QuotaDate]
	, [SalesQuota]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesPersonQuotaHistory]
    WHERE 
	 ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([QuotaDate] = @QuotaDate AND @QuotaDate is not null)
	OR ([SalesQuota] = @SalesQuota AND @SalesQuota is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesPersonQuotaHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesPersonQuotaHistory table using a dynamically generated query.
-- Table Comment: Sales performance tracking.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesPersonID]
					, [QuotaDate]
					, [SalesQuota]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SalesPersonQuotaHistory] {0}
				)
				SELECT
				       [SalesPersonID],
				       [QuotaDate],
				       [SalesQuota],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesPersonQuotaHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesOrderHeader table
-- Table Comment: General sales order information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesOrderHeader table passing page index and page count parameters
-- Table Comment: General sales order information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesOrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesOrderID]'
				SET @SQL = @SQL + ', [RevisionNumber]'
				SET @SQL = @SQL + ', [OrderDate]'
				SET @SQL = @SQL + ', [DueDate]'
				SET @SQL = @SQL + ', [ShipDate]'
				SET @SQL = @SQL + ', [Status]'
				SET @SQL = @SQL + ', [OnlineOrderFlag]'
				SET @SQL = @SQL + ', [SalesOrderNumber]'
				SET @SQL = @SQL + ', [PurchaseOrderNumber]'
				SET @SQL = @SQL + ', [AccountNumber]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [BillToAddressID]'
				SET @SQL = @SQL + ', [ShipToAddressID]'
				SET @SQL = @SQL + ', [ShipMethodID]'
				SET @SQL = @SQL + ', [CreditCardID]'
				SET @SQL = @SQL + ', [CreditCardApprovalCode]'
				SET @SQL = @SQL + ', [CurrencyRateID]'
				SET @SQL = @SQL + ', [SubTotal]'
				SET @SQL = @SQL + ', [TaxAmt]'
				SET @SQL = @SQL + ', [Freight]'
				SET @SQL = @SQL + ', [TotalDue]'
				SET @SQL = @SQL + ', [Comment]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesOrderHeader]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesOrderID],'
				SET @SQL = @SQL + ' [RevisionNumber],'
				SET @SQL = @SQL + ' [OrderDate],'
				SET @SQL = @SQL + ' [DueDate],'
				SET @SQL = @SQL + ' [ShipDate],'
				SET @SQL = @SQL + ' [Status],'
				SET @SQL = @SQL + ' [OnlineOrderFlag],'
				SET @SQL = @SQL + ' [SalesOrderNumber],'
				SET @SQL = @SQL + ' [PurchaseOrderNumber],'
				SET @SQL = @SQL + ' [AccountNumber],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [BillToAddressID],'
				SET @SQL = @SQL + ' [ShipToAddressID],'
				SET @SQL = @SQL + ' [ShipMethodID],'
				SET @SQL = @SQL + ' [CreditCardID],'
				SET @SQL = @SQL + ' [CreditCardApprovalCode],'
				SET @SQL = @SQL + ' [CurrencyRateID],'
				SET @SQL = @SQL + ' [SubTotal],'
				SET @SQL = @SQL + ' [TaxAmt],'
				SET @SQL = @SQL + ' [Freight],'
				SET @SQL = @SQL + ' [TotalDue],'
				SET @SQL = @SQL + ' [Comment],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesOrderHeader]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesOrderHeader table
-- Table Comment: General sales order information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RevisionNumber" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShipDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@OnlineOrderFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesOrderNumber" type="nvarchar" direction="Output" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@PurchaseOrderNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@AccountNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BillToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShipToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardApprovalCode" type="varchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SubTotal" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TaxAmt" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TotalDue" type="money" direction="Output" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Comment" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SalesOrderHeader]
					(
					[RevisionNumber]
					,[OrderDate]
					,[DueDate]
					,[ShipDate]
					,[Status]
					,[OnlineOrderFlag]
					,[PurchaseOrderNumber]
					,[AccountNumber]
					,[CustomerID]
					,[ContactID]
					,[SalesPersonID]
					,[TerritoryID]
					,[BillToAddressID]
					,[ShipToAddressID]
					,[ShipMethodID]
					,[CreditCardID]
					,[CreditCardApprovalCode]
					,[CurrencyRateID]
					,[SubTotal]
					,[TaxAmt]
					,[Freight]
					,[Comment]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@RevisionNumber
					,@OrderDate
					,@DueDate
					,@ShipDate
					,@Status
					,@OnlineOrderFlag
					,@PurchaseOrderNumber
					,@AccountNumber
					,@CustomerId
					,@ContactId
					,@SalesPersonId
					,@TerritoryId
					,@BillToAddressId
					,@ShipToAddressId
					,@ShipMethodId
					,@CreditCardId
					,@CreditCardApprovalCode
					,@CurrencyRateId
					,@SubTotal
					,@TaxAmt
					,@Freight
					,@Comment
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @SalesOrderId = SCOPE_IDENTITY()
									
				-- Select computed columns into output parameters
				SELECT
 @SalesOrderNumber = [SalesOrderNumber]
, @TotalDue = [TotalDue]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
[SalesOrderID] = @SalesOrderId 
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesOrderHeader table
-- Table Comment: General sales order information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RevisionNumber" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShipDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@OnlineOrderFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesOrderNumber" type="nvarchar" direction="Output" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@PurchaseOrderNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@AccountNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@BillToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShipToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardApprovalCode" type="varchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SubTotal" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TaxAmt" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TotalDue" type="money" direction="Output" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Comment" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesOrderHeader]
				SET
					[RevisionNumber] = @RevisionNumber
					,[OrderDate] = @OrderDate
					,[DueDate] = @DueDate
					,[ShipDate] = @ShipDate
					,[Status] = @Status
					,[OnlineOrderFlag] = @OnlineOrderFlag
					,[PurchaseOrderNumber] = @PurchaseOrderNumber
					,[AccountNumber] = @AccountNumber
					,[CustomerID] = @CustomerId
					,[ContactID] = @ContactId
					,[SalesPersonID] = @SalesPersonId
					,[TerritoryID] = @TerritoryId
					,[BillToAddressID] = @BillToAddressId
					,[ShipToAddressID] = @ShipToAddressId
					,[ShipMethodID] = @ShipMethodId
					,[CreditCardID] = @CreditCardId
					,[CreditCardApprovalCode] = @CreditCardApprovalCode
					,[CurrencyRateID] = @CurrencyRateId
					,[SubTotal] = @SubTotal
					,[TaxAmt] = @TaxAmt
					,[Freight] = @Freight
					,[Comment] = @Comment
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesOrderID] = @SalesOrderId 
				
				
				-- Select computed columns into output parameters
				SELECT
 @SalesOrderNumber = [SalesOrderNumber]
, @TotalDue = [TotalDue]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
[SalesOrderID] = @SalesOrderId 
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesOrderHeader table
-- Table Comment: General sales order information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesOrderHeader] WITH (ROWLOCK) 
				WHERE
					[SalesOrderID] = @SalesOrderId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByBillToAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[BillToAddressID] = @BillToAddressId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByShipToAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[ShipToAddressID] = @ShipToAddressId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[ContactID] = @ContactId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByCreditCardId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[CreditCardID] = @CreditCardId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByCurrencyRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[CurrencyRateID] = @CurrencyRateId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[TerritoryID] = @TerritoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByShipMethodId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[ShipMethodID] = @ShipMethodId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetBySalesOrderNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[SalesOrderNumber] = @SalesOrderNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[SalesPersonID] = @SalesPersonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetBySalesOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[RevisionNumber],
					[OrderDate],
					[DueDate],
					[ShipDate],
					[Status],
					[OnlineOrderFlag],
					[SalesOrderNumber],
					[PurchaseOrderNumber],
					[AccountNumber],
					[CustomerID],
					[ContactID],
					[SalesPersonID],
					[TerritoryID],
					[BillToAddressID],
					[ShipToAddressID],
					[ShipMethodID],
					[CreditCardID],
					[CreditCardApprovalCode],
					[CurrencyRateID],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[Comment],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeader]
				WHERE
					[SalesOrderID] = @SalesOrderId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_GetBySalesReasonIdFromSalesOrderHeaderSalesReason" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Sales.[SalesOrderHeader].[SalesOrderID]
       ,Sales.[SalesOrderHeader].[RevisionNumber]
       ,Sales.[SalesOrderHeader].[OrderDate]
       ,Sales.[SalesOrderHeader].[DueDate]
       ,Sales.[SalesOrderHeader].[ShipDate]
       ,Sales.[SalesOrderHeader].[Status]
       ,Sales.[SalesOrderHeader].[OnlineOrderFlag]
       ,Sales.[SalesOrderHeader].[SalesOrderNumber]
       ,Sales.[SalesOrderHeader].[PurchaseOrderNumber]
       ,Sales.[SalesOrderHeader].[AccountNumber]
       ,Sales.[SalesOrderHeader].[CustomerID]
       ,Sales.[SalesOrderHeader].[ContactID]
       ,Sales.[SalesOrderHeader].[SalesPersonID]
       ,Sales.[SalesOrderHeader].[TerritoryID]
       ,Sales.[SalesOrderHeader].[BillToAddressID]
       ,Sales.[SalesOrderHeader].[ShipToAddressID]
       ,Sales.[SalesOrderHeader].[ShipMethodID]
       ,Sales.[SalesOrderHeader].[CreditCardID]
       ,Sales.[SalesOrderHeader].[CreditCardApprovalCode]
       ,Sales.[SalesOrderHeader].[CurrencyRateID]
       ,Sales.[SalesOrderHeader].[SubTotal]
       ,Sales.[SalesOrderHeader].[TaxAmt]
       ,Sales.[SalesOrderHeader].[Freight]
       ,Sales.[SalesOrderHeader].[TotalDue]
       ,Sales.[SalesOrderHeader].[Comment]
       ,Sales.[SalesOrderHeader].[rowguid]
       ,Sales.[SalesOrderHeader].[ModifiedDate]
  FROM Sales.[SalesOrderHeader]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[SalesOrderHeaderSalesReason] 
                WHERE Sales.[SalesOrderHeaderSalesReason].[SalesReasonID] = @SalesReasonId
                  AND Sales.[SalesOrderHeaderSalesReason].[SalesOrderID] = Sales.[SalesOrderHeader].[SalesOrderID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesOrderHeader table passing nullable parameters
-- Table Comment: General sales order information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RevisionNumber" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ShipDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@OnlineOrderFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesOrderNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@PurchaseOrderNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@AccountNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@BillToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShipToAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreditCardApprovalCode" type="varchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SubTotal" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@TaxAmt" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@TotalDue" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Comment" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesOrderID]
	, [RevisionNumber]
	, [OrderDate]
	, [DueDate]
	, [ShipDate]
	, [Status]
	, [OnlineOrderFlag]
	, [SalesOrderNumber]
	, [PurchaseOrderNumber]
	, [AccountNumber]
	, [CustomerID]
	, [ContactID]
	, [SalesPersonID]
	, [TerritoryID]
	, [BillToAddressID]
	, [ShipToAddressID]
	, [ShipMethodID]
	, [CreditCardID]
	, [CreditCardApprovalCode]
	, [CurrencyRateID]
	, [SubTotal]
	, [TaxAmt]
	, [Freight]
	, [TotalDue]
	, [Comment]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesOrderHeader]
    WHERE 
	 ([SalesOrderID] = @SalesOrderId OR @SalesOrderId IS NULL)
	AND ([RevisionNumber] = @RevisionNumber OR @RevisionNumber IS NULL)
	AND ([OrderDate] = @OrderDate OR @OrderDate IS NULL)
	AND ([DueDate] = @DueDate OR @DueDate IS NULL)
	AND ([ShipDate] = @ShipDate OR @ShipDate IS NULL)
	AND ([Status] = @Status OR @Status IS NULL)
	AND ([OnlineOrderFlag] = @OnlineOrderFlag OR @OnlineOrderFlag IS NULL)
	AND ([SalesOrderNumber] = @SalesOrderNumber OR @SalesOrderNumber IS NULL)
	AND ([PurchaseOrderNumber] = @PurchaseOrderNumber OR @PurchaseOrderNumber IS NULL)
	AND ([AccountNumber] = @AccountNumber OR @AccountNumber IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ContactID] = @ContactId OR @ContactId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
	AND ([BillToAddressID] = @BillToAddressId OR @BillToAddressId IS NULL)
	AND ([ShipToAddressID] = @ShipToAddressId OR @ShipToAddressId IS NULL)
	AND ([ShipMethodID] = @ShipMethodId OR @ShipMethodId IS NULL)
	AND ([CreditCardID] = @CreditCardId OR @CreditCardId IS NULL)
	AND ([CreditCardApprovalCode] = @CreditCardApprovalCode OR @CreditCardApprovalCode IS NULL)
	AND ([CurrencyRateID] = @CurrencyRateId OR @CurrencyRateId IS NULL)
	AND ([SubTotal] = @SubTotal OR @SubTotal IS NULL)
	AND ([TaxAmt] = @TaxAmt OR @TaxAmt IS NULL)
	AND ([Freight] = @Freight OR @Freight IS NULL)
	AND ([TotalDue] = @TotalDue OR @TotalDue IS NULL)
	AND ([Comment] = @Comment OR @Comment IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesOrderID]
	, [RevisionNumber]
	, [OrderDate]
	, [DueDate]
	, [ShipDate]
	, [Status]
	, [OnlineOrderFlag]
	, [SalesOrderNumber]
	, [PurchaseOrderNumber]
	, [AccountNumber]
	, [CustomerID]
	, [ContactID]
	, [SalesPersonID]
	, [TerritoryID]
	, [BillToAddressID]
	, [ShipToAddressID]
	, [ShipMethodID]
	, [CreditCardID]
	, [CreditCardApprovalCode]
	, [CurrencyRateID]
	, [SubTotal]
	, [TaxAmt]
	, [Freight]
	, [TotalDue]
	, [Comment]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesOrderHeader]
    WHERE 
	 ([SalesOrderID] = @SalesOrderId AND @SalesOrderId is not null)
	OR ([RevisionNumber] = @RevisionNumber AND @RevisionNumber is not null)
	OR ([OrderDate] = @OrderDate AND @OrderDate is not null)
	OR ([DueDate] = @DueDate AND @DueDate is not null)
	OR ([ShipDate] = @ShipDate AND @ShipDate is not null)
	OR ([Status] = @Status AND @Status is not null)
	OR ([OnlineOrderFlag] = @OnlineOrderFlag AND @OnlineOrderFlag is not null)
	OR ([SalesOrderNumber] = @SalesOrderNumber AND @SalesOrderNumber is not null)
	OR ([PurchaseOrderNumber] = @PurchaseOrderNumber AND @PurchaseOrderNumber is not null)
	OR ([AccountNumber] = @AccountNumber AND @AccountNumber is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ContactID] = @ContactId AND @ContactId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	OR ([BillToAddressID] = @BillToAddressId AND @BillToAddressId is not null)
	OR ([ShipToAddressID] = @ShipToAddressId AND @ShipToAddressId is not null)
	OR ([ShipMethodID] = @ShipMethodId AND @ShipMethodId is not null)
	OR ([CreditCardID] = @CreditCardId AND @CreditCardId is not null)
	OR ([CreditCardApprovalCode] = @CreditCardApprovalCode AND @CreditCardApprovalCode is not null)
	OR ([CurrencyRateID] = @CurrencyRateId AND @CurrencyRateId is not null)
	OR ([SubTotal] = @SubTotal AND @SubTotal is not null)
	OR ([TaxAmt] = @TaxAmt AND @TaxAmt is not null)
	OR ([Freight] = @Freight AND @Freight is not null)
	OR ([TotalDue] = @TotalDue AND @TotalDue is not null)
	OR ([Comment] = @Comment AND @Comment is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeader_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesOrderHeader table using a dynamically generated query.
-- Table Comment: General sales order information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesOrderID]
					, [RevisionNumber]
					, [OrderDate]
					, [DueDate]
					, [ShipDate]
					, [Status]
					, [OnlineOrderFlag]
					, [SalesOrderNumber]
					, [PurchaseOrderNumber]
					, [AccountNumber]
					, [CustomerID]
					, [ContactID]
					, [SalesPersonID]
					, [TerritoryID]
					, [BillToAddressID]
					, [ShipToAddressID]
					, [ShipMethodID]
					, [CreditCardID]
					, [CreditCardApprovalCode]
					, [CurrencyRateID]
					, [SubTotal]
					, [TaxAmt]
					, [Freight]
					, [TotalDue]
					, [Comment]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SalesOrderHeader] {0}
				)
				SELECT
				       [SalesOrderID],
				       [RevisionNumber],
				       [OrderDate],
				       [DueDate],
				       [ShipDate],
				       [Status],
				       [OnlineOrderFlag],
				       [SalesOrderNumber],
				       [PurchaseOrderNumber],
				       [AccountNumber],
				       [CustomerID],
				       [ContactID],
				       [SalesPersonID],
				       [TerritoryID],
				       [BillToAddressID],
				       [ShipToAddressID],
				       [ShipMethodID],
				       [CreditCardID],
				       [CreditCardApprovalCode],
				       [CurrencyRateID],
				       [SubTotal],
				       [TaxAmt],
				       [Freight],
				       [TotalDue],
				       [Comment],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesOrderHeader] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesOrderHeaderSalesReason table
-- Table Comment: Cross-reference table mapping sales orders to sales reason codes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesOrderID],
					[SalesReasonID],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeaderSalesReason]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesOrderHeaderSalesReason table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping sales orders to sales reason codes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesOrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesOrderID]'
				SET @SQL = @SQL + ', [SalesReasonID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesOrderHeaderSalesReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesOrderID],'
				SET @SQL = @SQL + ' [SalesReasonID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesOrderHeaderSalesReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesOrderHeaderSalesReason table
-- Table Comment: Cross-reference table mapping sales orders to sales reason codes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[SalesOrderHeaderSalesReason]
					(
					[SalesOrderID]
					,[SalesReasonID]
					,[ModifiedDate]
					)
				VALUES
					(
					@SalesOrderId
					,@SalesReasonId
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesOrderHeaderSalesReason table
-- Table Comment: Cross-reference table mapping sales orders to sales reason codes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalSalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalSalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesOrderHeaderSalesReason]
				SET
					[SalesOrderID] = @SalesOrderId
					,[SalesReasonID] = @SalesReasonId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesOrderID] = @OriginalSalesOrderId 
AND [SalesReasonID] = @OriginalSalesReasonId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesOrderHeaderSalesReason table
-- Table Comment: Cross-reference table mapping sales orders to sales reason codes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesOrderHeaderSalesReason] WITH (ROWLOCK) 
				WHERE
					[SalesOrderID] = @SalesOrderId
					AND [SalesReasonID] = @SalesReasonId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_GetBySalesOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeaderSalesReason table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[SalesReasonID],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeaderSalesReason]
				WHERE
					[SalesOrderID] = @SalesOrderId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_GetBySalesReasonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeaderSalesReason table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[SalesReasonID],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeaderSalesReason]
				WHERE
					[SalesReasonID] = @SalesReasonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_GetBySalesOrderIdSalesReasonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderHeaderSalesReason table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[SalesReasonID],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderHeaderSalesReason]
				WHERE
					[SalesOrderID] = @SalesOrderId
					AND [SalesReasonID] = @SalesReasonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesOrderHeaderSalesReason table passing nullable parameters
-- Table Comment: Cross-reference table mapping sales orders to sales reason codes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesReasonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesOrderID]
	, [SalesReasonID]
	, [ModifiedDate]
    FROM
	[Sales].[SalesOrderHeaderSalesReason]
    WHERE 
	 ([SalesOrderID] = @SalesOrderId OR @SalesOrderId IS NULL)
	AND ([SalesReasonID] = @SalesReasonId OR @SalesReasonId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesOrderID]
	, [SalesReasonID]
	, [ModifiedDate]
    FROM
	[Sales].[SalesOrderHeaderSalesReason]
    WHERE 
	 ([SalesOrderID] = @SalesOrderId AND @SalesOrderId is not null)
	OR ([SalesReasonID] = @SalesReasonId AND @SalesReasonId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderHeaderSalesReason_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesOrderHeaderSalesReason table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping sales orders to sales reason codes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesOrderID]
					, [SalesReasonID]
					, [ModifiedDate]
					FROM [Sales].[SalesOrderHeaderSalesReason] {0}
				)
				SELECT
				       [SalesOrderID],
				       [SalesReasonID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesOrderHeaderSalesReason] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductModel_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductModel table
-- Table Comment: Product model classification.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductModelID],
					[Name],
					[CatalogDescription],
					[Instructions],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductModel]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductModel table passing page index and page count parameters
-- Table Comment: Product model classification.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductModelID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductModelID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CatalogDescription]'
				SET @SQL = @SQL + ', [Instructions]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductModel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductModelID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CatalogDescription],'
				SET @SQL = @SQL + ' [Instructions],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductModel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductModel_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductModel table
-- Table Comment: Product model classification.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CatalogDescription" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Instructions" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Production].[ProductModel]
					(
					[Name]
					,[CatalogDescription]
					,[Instructions]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Name
					,@CatalogDescription
					,@Instructions
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @ProductModelId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductModel table
-- Table Comment: Product model classification.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CatalogDescription" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Instructions" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductModel]
				SET
					[Name] = @Name
					,[CatalogDescription] = @CatalogDescription
					,[Instructions] = @Instructions
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductModelID] = @ProductModelId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductModel table
-- Table Comment: Product model classification.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductModel] WITH (ROWLOCK) 
				WHERE
					[ProductModelID] = @ProductModelId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductModelID],
					[Name],
					[CatalogDescription],
					[Instructions],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductModel]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductModelID],
					[Name],
					[CatalogDescription],
					[Instructions],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductModel]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByProductModelId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductModelID],
					[Name],
					[CatalogDescription],
					[Instructions],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductModel]
				WHERE
					[ProductModelID] = @ProductModelId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByCatalogDescription" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CatalogDescription" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductModelID],
					[Name],
					[CatalogDescription],
					[Instructions],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductModel]
				WHERE
					[CatalogDescription] = @CatalogDescription
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByInstructions" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModel table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Instructions" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductModelID],
					[Name],
					[CatalogDescription],
					[Instructions],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductModel]
				WHERE
					[Instructions] = @Instructions
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByIllustrationIdFromProductModelIllustration" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[ProductModel].[ProductModelID]
       ,Production.[ProductModel].[Name]
       ,Production.[ProductModel].[CatalogDescription]
       ,Production.[ProductModel].[Instructions]
       ,Production.[ProductModel].[rowguid]
       ,Production.[ProductModel].[ModifiedDate]
  FROM Production.[ProductModel]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelIllustration] 
                WHERE Production.[ProductModelIllustration].[IllustrationID] = @IllustrationId
                  AND Production.[ProductModelIllustration].[ProductModelID] = Production.[ProductModel].[ProductModelID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByCultureIdFromProductModelProductDescriptionCulture" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[ProductModel].[ProductModelID]
       ,Production.[ProductModel].[Name]
       ,Production.[ProductModel].[CatalogDescription]
       ,Production.[ProductModel].[Instructions]
       ,Production.[ProductModel].[rowguid]
       ,Production.[ProductModel].[ModifiedDate]
  FROM Production.[ProductModel]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelProductDescriptionCulture] 
                WHERE Production.[ProductModelProductDescriptionCulture].[CultureID] = @CultureId
                  AND Production.[ProductModelProductDescriptionCulture].[ProductModelID] = Production.[ProductModel].[ProductModelID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_GetByProductDescriptionIdFromProductModelProductDescriptionCulture" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[ProductModel].[ProductModelID]
       ,Production.[ProductModel].[Name]
       ,Production.[ProductModel].[CatalogDescription]
       ,Production.[ProductModel].[Instructions]
       ,Production.[ProductModel].[rowguid]
       ,Production.[ProductModel].[ModifiedDate]
  FROM Production.[ProductModel]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelProductDescriptionCulture] 
                WHERE Production.[ProductModelProductDescriptionCulture].[ProductDescriptionID] = @ProductDescriptionId
                  AND Production.[ProductModelProductDescriptionCulture].[ProductModelID] = Production.[ProductModel].[ProductModelID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModel_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductModel table passing nullable parameters
-- Table Comment: Product model classification.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CatalogDescription" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Instructions" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductModelID]
	, [Name]
	, [CatalogDescription]
	, [Instructions]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductModel]
    WHERE 
	 ([ProductModelID] = @ProductModelId OR @ProductModelId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductModelID]
	, [Name]
	, [CatalogDescription]
	, [Instructions]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductModel]
    WHERE 
	 ([ProductModelID] = @ProductModelId AND @ProductModelId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductModel_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductModel table using a dynamically generated query.
-- Table Comment: Product model classification.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductModelID]
					, [Name]
					, [CatalogDescription]
					, [Instructions]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[ProductModel] {0}
				)
				SELECT
				       [ProductModelID],
				       [Name],
				       [CatalogDescription],
				       [Instructions],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductModel] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesTaxRate table
-- Table Comment: Tax rate lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesTaxRateID],
					[StateProvinceID],
					[TaxType],
					[TaxRate],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTaxRate]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesTaxRate table passing page index and page count parameters
-- Table Comment: Tax rate lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesTaxRateID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesTaxRateID]'
				SET @SQL = @SQL + ', [StateProvinceID]'
				SET @SQL = @SQL + ', [TaxType]'
				SET @SQL = @SQL + ', [TaxRate]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesTaxRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesTaxRateID],'
				SET @SQL = @SQL + ' [StateProvinceID],'
				SET @SQL = @SQL + ' [TaxType],'
				SET @SQL = @SQL + ' [TaxRate],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesTaxRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesTaxRate table
-- Table Comment: Tax rate lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesTaxRateId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxType" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxRate" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SalesTaxRate]
					(
					[StateProvinceID]
					,[TaxType]
					,[TaxRate]
					,[Name]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@StateProvinceId
					,@TaxType
					,@TaxRate
					,@Name
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @SalesTaxRateId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesTaxRate table
-- Table Comment: Tax rate lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesTaxRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxType" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxRate" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesTaxRate]
				SET
					[StateProvinceID] = @StateProvinceId
					,[TaxType] = @TaxType
					,[TaxRate] = @TaxRate
					,[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesTaxRateID] = @SalesTaxRateId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesTaxRate table
-- Table Comment: Tax rate lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesTaxRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesTaxRate] WITH (ROWLOCK) 
				WHERE
					[SalesTaxRateID] = @SalesTaxRateId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_GetByStateProvinceId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTaxRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesTaxRateID],
					[StateProvinceID],
					[TaxType],
					[TaxRate],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTaxRate]
				WHERE
					[StateProvinceID] = @StateProvinceId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTaxRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesTaxRateID],
					[StateProvinceID],
					[TaxType],
					[TaxRate],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTaxRate]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_GetByStateProvinceIdTaxType" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTaxRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TaxType" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesTaxRateID],
					[StateProvinceID],
					[TaxType],
					[TaxRate],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTaxRate]
				WHERE
					[StateProvinceID] = @StateProvinceId
					AND [TaxType] = @TaxType
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_GetBySalesTaxRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTaxRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesTaxRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesTaxRateID],
					[StateProvinceID],
					[TaxType],
					[TaxRate],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTaxRate]
				WHERE
					[SalesTaxRateID] = @SalesTaxRateId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesTaxRate table passing nullable parameters
-- Table Comment: Tax rate lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesTaxRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TaxType" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@TaxRate" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesTaxRateID]
	, [StateProvinceID]
	, [TaxType]
	, [TaxRate]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesTaxRate]
    WHERE 
	 ([SalesTaxRateID] = @SalesTaxRateId OR @SalesTaxRateId IS NULL)
	AND ([StateProvinceID] = @StateProvinceId OR @StateProvinceId IS NULL)
	AND ([TaxType] = @TaxType OR @TaxType IS NULL)
	AND ([TaxRate] = @TaxRate OR @TaxRate IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesTaxRateID]
	, [StateProvinceID]
	, [TaxType]
	, [TaxRate]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesTaxRate]
    WHERE 
	 ([SalesTaxRateID] = @SalesTaxRateId AND @SalesTaxRateId is not null)
	OR ([StateProvinceID] = @StateProvinceId AND @StateProvinceId is not null)
	OR ([TaxType] = @TaxType AND @TaxType is not null)
	OR ([TaxRate] = @TaxRate AND @TaxRate is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesTaxRate_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesTaxRate table using a dynamically generated query.
-- Table Comment: Tax rate lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesTaxRateID]
					, [StateProvinceID]
					, [TaxType]
					, [TaxRate]
					, [Name]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SalesTaxRate] {0}
				)
				SELECT
				       [SalesTaxRateID],
				       [StateProvinceID],
				       [TaxType],
				       [TaxRate],
				       [Name],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesTaxRate] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesPerson table
-- Table Comment: Sales representative current information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[SalesQuota],
					[Bonus],
					[CommissionPct],
					[SalesYTD],
					[SalesLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPerson]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesPerson table passing page index and page count parameters
-- Table Comment: Sales representative current information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesPersonID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [SalesQuota]'
				SET @SQL = @SQL + ', [Bonus]'
				SET @SQL = @SQL + ', [CommissionPct]'
				SET @SQL = @SQL + ', [SalesYTD]'
				SET @SQL = @SQL + ', [SalesLastYear]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [SalesQuota],'
				SET @SQL = @SQL + ' [Bonus],'
				SET @SQL = @SQL + ' [CommissionPct],'
				SET @SQL = @SQL + ' [SalesYTD],'
				SET @SQL = @SQL + ' [SalesLastYear],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesPerson table
-- Table Comment: Sales representative current information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesQuota" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Bonus" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@CommissionPct" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@SalesYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@SalesLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SalesPerson]
					(
					[SalesPersonID]
					,[TerritoryID]
					,[SalesQuota]
					,[Bonus]
					,[CommissionPct]
					,[SalesYTD]
					,[SalesLastYear]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@SalesPersonId
					,@TerritoryId
					,@SalesQuota
					,@Bonus
					,@CommissionPct
					,@SalesYtd
					,@SalesLastYear
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesPerson table
-- Table Comment: Sales representative current information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalSalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesQuota" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Bonus" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@CommissionPct" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@SalesYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@SalesLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesPerson]
				SET
					[SalesPersonID] = @SalesPersonId
					,[TerritoryID] = @TerritoryId
					,[SalesQuota] = @SalesQuota
					,[Bonus] = @Bonus
					,[CommissionPct] = @CommissionPct
					,[SalesYTD] = @SalesYtd
					,[SalesLastYear] = @SalesLastYear
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesPersonID] = @OriginalSalesPersonId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesPerson table
-- Table Comment: Sales representative current information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesPerson] WITH (ROWLOCK) 
				WHERE
					[SalesPersonID] = @SalesPersonId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesPerson table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[SalesQuota],
					[Bonus],
					[CommissionPct],
					[SalesYTD],
					[SalesLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPerson]
				WHERE
					[TerritoryID] = @TerritoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesPerson table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[SalesQuota],
					[Bonus],
					[CommissionPct],
					[SalesYTD],
					[SalesLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPerson]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesPerson table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[SalesQuota],
					[Bonus],
					[CommissionPct],
					[SalesYTD],
					[SalesLastYear],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesPerson]
				WHERE
					[SalesPersonID] = @SalesPersonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesPerson table passing nullable parameters
-- Table Comment: Sales representative current information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesQuota" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Bonus" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@CommissionPct" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault="null"/>
				<parameter name="@SalesYtd" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@SalesLastYear" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesPersonID]
	, [TerritoryID]
	, [SalesQuota]
	, [Bonus]
	, [CommissionPct]
	, [SalesYTD]
	, [SalesLastYear]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesPerson]
    WHERE 
	 ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
	AND ([SalesQuota] = @SalesQuota OR @SalesQuota IS NULL)
	AND ([Bonus] = @Bonus OR @Bonus IS NULL)
	AND ([CommissionPct] = @CommissionPct OR @CommissionPct IS NULL)
	AND ([SalesYTD] = @SalesYtd OR @SalesYtd IS NULL)
	AND ([SalesLastYear] = @SalesLastYear OR @SalesLastYear IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesPersonID]
	, [TerritoryID]
	, [SalesQuota]
	, [Bonus]
	, [CommissionPct]
	, [SalesYTD]
	, [SalesLastYear]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesPerson]
    WHERE 
	 ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	OR ([SalesQuota] = @SalesQuota AND @SalesQuota is not null)
	OR ([Bonus] = @Bonus AND @Bonus is not null)
	OR ([CommissionPct] = @CommissionPct AND @CommissionPct is not null)
	OR ([SalesYTD] = @SalesYtd AND @SalesYtd is not null)
	OR ([SalesLastYear] = @SalesLastYear AND @SalesLastYear is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesPerson_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesPerson table using a dynamically generated query.
-- Table Comment: Sales representative current information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesPersonID]
					, [TerritoryID]
					, [SalesQuota]
					, [Bonus]
					, [CommissionPct]
					, [SalesYTD]
					, [SalesLastYear]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SalesPerson] {0}
				)
				SELECT
				       [SalesPersonID],
				       [TerritoryID],
				       [SalesQuota],
				       [Bonus],
				       [CommissionPct],
				       [SalesYTD],
				       [SalesLastYear],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesPerson] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductCategory table
-- Table Comment: High-level product categorization.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductCategory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductCategory table passing page index and page count parameters
-- Table Comment: High-level product categorization.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductCategoryID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductCategoryID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductCategoryID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductCategory table
-- Table Comment: High-level product categorization.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductCategoryId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Production].[ProductCategory]
					(
					[Name]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Name
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @ProductCategoryId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductCategory table
-- Table Comment: High-level product categorization.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductCategory]
				SET
					[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductCategoryID] = @ProductCategoryId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductCategory table
-- Table Comment: High-level product categorization.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductCategory] WITH (ROWLOCK) 
				WHERE
					[ProductCategoryID] = @ProductCategoryId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductCategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductCategory]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductCategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductCategory]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_GetByProductCategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductCategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductCategory]
				WHERE
					[ProductCategoryID] = @ProductCategoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductCategory table passing nullable parameters
-- Table Comment: High-level product categorization.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductCategoryID]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductCategory]
    WHERE 
	 ([ProductCategoryID] = @ProductCategoryId OR @ProductCategoryId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductCategoryID]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductCategory]
    WHERE 
	 ([ProductCategoryID] = @ProductCategoryId AND @ProductCategoryId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductCategory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductCategory table using a dynamically generated query.
-- Table Comment: High-level product categorization.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductCategoryID]
					, [Name]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[ProductCategory] {0}
				)
				SELECT
				       [ProductCategoryID],
				       [Name],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductCategory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductSubcategory table
-- Table Comment: Product subcategories. See ProductCategory table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductSubcategoryID],
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductSubcategory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductSubcategory table passing page index and page count parameters
-- Table Comment: Product subcategories. See ProductCategory table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductSubcategoryID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductSubcategoryID]'
				SET @SQL = @SQL + ', [ProductCategoryID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductSubcategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductSubcategoryID],'
				SET @SQL = @SQL + ' [ProductCategoryID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductSubcategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductSubcategory table
-- Table Comment: Product subcategories. See ProductCategory table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductSubcategoryId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Production].[ProductSubcategory]
					(
					[ProductCategoryID]
					,[Name]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@ProductCategoryId
					,@Name
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @ProductSubcategoryId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductSubcategory table
-- Table Comment: Product subcategories. See ProductCategory table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductSubcategory]
				SET
					[ProductCategoryID] = @ProductCategoryId
					,[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductSubcategoryID] = @ProductSubcategoryId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductSubcategory table
-- Table Comment: Product subcategories. See ProductCategory table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductSubcategory] WITH (ROWLOCK) 
				WHERE
					[ProductSubcategoryID] = @ProductSubcategoryId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_GetByProductCategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductSubcategory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductSubcategoryID],
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductSubcategory]
				WHERE
					[ProductCategoryID] = @ProductCategoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductSubcategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductSubcategoryID],
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductSubcategory]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductSubcategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductSubcategoryID],
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductSubcategory]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_GetByProductSubcategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductSubcategory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductSubcategoryID],
					[ProductCategoryID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductSubcategory]
				WHERE
					[ProductSubcategoryID] = @ProductSubcategoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductSubcategory table passing nullable parameters
-- Table Comment: Product subcategories. See ProductCategory table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductCategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductSubcategoryID]
	, [ProductCategoryID]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductSubcategory]
    WHERE 
	 ([ProductSubcategoryID] = @ProductSubcategoryId OR @ProductSubcategoryId IS NULL)
	AND ([ProductCategoryID] = @ProductCategoryId OR @ProductCategoryId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductSubcategoryID]
	, [ProductCategoryID]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductSubcategory]
    WHERE 
	 ([ProductSubcategoryID] = @ProductSubcategoryId AND @ProductSubcategoryId is not null)
	OR ([ProductCategoryID] = @ProductCategoryId AND @ProductCategoryId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductSubcategory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductSubcategory table using a dynamically generated query.
-- Table Comment: Product subcategories. See ProductCategory table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductSubcategoryID]
					, [ProductCategoryID]
					, [Name]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[ProductSubcategory] {0}
				)
				SELECT
				       [ProductSubcategoryID],
				       [ProductCategoryID],
				       [Name],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductSubcategory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Product_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Product table
-- Table Comment: Products sold or used in the manfacturing of sold products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Product_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Product table passing page index and page count parameters
-- Table Comment: Products sold or used in the manfacturing of sold products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ProductNumber]'
				SET @SQL = @SQL + ', [MakeFlag]'
				SET @SQL = @SQL + ', [FinishedGoodsFlag]'
				SET @SQL = @SQL + ', [Color]'
				SET @SQL = @SQL + ', [SafetyStockLevel]'
				SET @SQL = @SQL + ', [ReorderPoint]'
				SET @SQL = @SQL + ', [StandardCost]'
				SET @SQL = @SQL + ', [ListPrice]'
				SET @SQL = @SQL + ', [Size]'
				SET @SQL = @SQL + ', [SizeUnitMeasureCode]'
				SET @SQL = @SQL + ', [WeightUnitMeasureCode]'
				SET @SQL = @SQL + ', [Weight]'
				SET @SQL = @SQL + ', [DaysToManufacture]'
				SET @SQL = @SQL + ', [ProductLine]'
				SET @SQL = @SQL + ', [Class]'
				SET @SQL = @SQL + ', [Style]'
				SET @SQL = @SQL + ', [ProductSubcategoryID]'
				SET @SQL = @SQL + ', [ProductModelID]'
				SET @SQL = @SQL + ', [SellStartDate]'
				SET @SQL = @SQL + ', [SellEndDate]'
				SET @SQL = @SQL + ', [DiscontinuedDate]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ProductNumber],'
				SET @SQL = @SQL + ' [MakeFlag],'
				SET @SQL = @SQL + ' [FinishedGoodsFlag],'
				SET @SQL = @SQL + ' [Color],'
				SET @SQL = @SQL + ' [SafetyStockLevel],'
				SET @SQL = @SQL + ' [ReorderPoint],'
				SET @SQL = @SQL + ' [StandardCost],'
				SET @SQL = @SQL + ' [ListPrice],'
				SET @SQL = @SQL + ' [Size],'
				SET @SQL = @SQL + ' [SizeUnitMeasureCode],'
				SET @SQL = @SQL + ' [WeightUnitMeasureCode],'
				SET @SQL = @SQL + ' [Weight],'
				SET @SQL = @SQL + ' [DaysToManufacture],'
				SET @SQL = @SQL + ' [ProductLine],'
				SET @SQL = @SQL + ' [Class],'
				SET @SQL = @SQL + ' [Style],'
				SET @SQL = @SQL + ' [ProductSubcategoryID],'
				SET @SQL = @SQL + ' [ProductModelID],'
				SET @SQL = @SQL + ' [SellStartDate],'
				SET @SQL = @SQL + ' [SellEndDate],'
				SET @SQL = @SQL + ' [DiscontinuedDate],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_Product_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Product table
-- Table Comment: Products sold or used in the manfacturing of sold products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ProductNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@MakeFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FinishedGoodsFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Color" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@SafetyStockLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ReorderPoint" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@StandardCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ListPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Size" type="nvarchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@SizeUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WeightUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Weight" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@DaysToManufacture" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductLine" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@SafeNameClass" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@Style" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SellEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DiscontinuedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Production].[Product]
					(
					[Name]
					,[ProductNumber]
					,[MakeFlag]
					,[FinishedGoodsFlag]
					,[Color]
					,[SafetyStockLevel]
					,[ReorderPoint]
					,[StandardCost]
					,[ListPrice]
					,[Size]
					,[SizeUnitMeasureCode]
					,[WeightUnitMeasureCode]
					,[Weight]
					,[DaysToManufacture]
					,[ProductLine]
					,[Class]
					,[Style]
					,[ProductSubcategoryID]
					,[ProductModelID]
					,[SellStartDate]
					,[SellEndDate]
					,[DiscontinuedDate]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Name
					,@ProductNumber
					,@MakeFlag
					,@FinishedGoodsFlag
					,@Color
					,@SafetyStockLevel
					,@ReorderPoint
					,@StandardCost
					,@ListPrice
					,@Size
					,@SizeUnitMeasureCode
					,@WeightUnitMeasureCode
					,@Weight
					,@DaysToManufacture
					,@ProductLine
					,@SafeNameClass
					,@Style
					,@ProductSubcategoryId
					,@ProductModelId
					,@SellStartDate
					,@SellEndDate
					,@DiscontinuedDate
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @ProductId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Product table
-- Table Comment: Products sold or used in the manfacturing of sold products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ProductNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@MakeFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@FinishedGoodsFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Color" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@SafetyStockLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ReorderPoint" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@StandardCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ListPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Size" type="nvarchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@SizeUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@WeightUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Weight" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@DaysToManufacture" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductLine" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@SafeNameClass" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@Style" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault=""/>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SellStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SellEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DiscontinuedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[Product]
				SET
					[Name] = @Name
					,[ProductNumber] = @ProductNumber
					,[MakeFlag] = @MakeFlag
					,[FinishedGoodsFlag] = @FinishedGoodsFlag
					,[Color] = @Color
					,[SafetyStockLevel] = @SafetyStockLevel
					,[ReorderPoint] = @ReorderPoint
					,[StandardCost] = @StandardCost
					,[ListPrice] = @ListPrice
					,[Size] = @Size
					,[SizeUnitMeasureCode] = @SizeUnitMeasureCode
					,[WeightUnitMeasureCode] = @WeightUnitMeasureCode
					,[Weight] = @Weight
					,[DaysToManufacture] = @DaysToManufacture
					,[ProductLine] = @ProductLine
					,[Class] = @SafeNameClass
					,[Style] = @Style
					,[ProductSubcategoryID] = @ProductSubcategoryId
					,[ProductModelID] = @ProductModelId
					,[SellStartDate] = @SellStartDate
					,[SellEndDate] = @SellEndDate
					,[DiscontinuedDate] = @DiscontinuedDate
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductID] = @ProductId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Product table
-- Table Comment: Products sold or used in the manfacturing of sold products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[Product] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByProductModelId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[ProductModelID] = @ProductModelId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByProductSubcategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[ProductSubcategoryID] = @ProductSubcategoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetBySizeUnitMeasureCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SizeUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[SizeUnitMeasureCode] = @SizeUnitMeasureCode
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByWeightUnitMeasureCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WeightUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[WeightUnitMeasureCode] = @WeightUnitMeasureCode
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByProductNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[ProductNumber] = @ProductNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[Name],
					[ProductNumber],
					[MakeFlag],
					[FinishedGoodsFlag],
					[Color],
					[SafetyStockLevel],
					[ReorderPoint],
					[StandardCost],
					[ListPrice],
					[Size],
					[SizeUnitMeasureCode],
					[WeightUnitMeasureCode],
					[Weight],
					[DaysToManufacture],
					[ProductLine],
					[Class],
					[Style],
					[ProductSubcategoryID],
					[ProductModelID],
					[SellStartDate],
					[SellEndDate],
					[DiscontinuedDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[Product]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByDocumentIdFromProductDocument" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Product].[ProductID]
       ,Production.[Product].[Name]
       ,Production.[Product].[ProductNumber]
       ,Production.[Product].[MakeFlag]
       ,Production.[Product].[FinishedGoodsFlag]
       ,Production.[Product].[Color]
       ,Production.[Product].[SafetyStockLevel]
       ,Production.[Product].[ReorderPoint]
       ,Production.[Product].[StandardCost]
       ,Production.[Product].[ListPrice]
       ,Production.[Product].[Size]
       ,Production.[Product].[SizeUnitMeasureCode]
       ,Production.[Product].[WeightUnitMeasureCode]
       ,Production.[Product].[Weight]
       ,Production.[Product].[DaysToManufacture]
       ,Production.[Product].[ProductLine]
       ,Production.[Product].[Class]
       ,Production.[Product].[Style]
       ,Production.[Product].[ProductSubcategoryID]
       ,Production.[Product].[ProductModelID]
       ,Production.[Product].[SellStartDate]
       ,Production.[Product].[SellEndDate]
       ,Production.[Product].[DiscontinuedDate]
       ,Production.[Product].[rowguid]
       ,Production.[Product].[ModifiedDate]
  FROM Production.[Product]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductDocument] 
                WHERE Production.[ProductDocument].[DocumentID] = @DocumentId
                  AND Production.[ProductDocument].[ProductID] = Production.[Product].[ProductID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByLocationIdFromProductInventory" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Product].[ProductID]
       ,Production.[Product].[Name]
       ,Production.[Product].[ProductNumber]
       ,Production.[Product].[MakeFlag]
       ,Production.[Product].[FinishedGoodsFlag]
       ,Production.[Product].[Color]
       ,Production.[Product].[SafetyStockLevel]
       ,Production.[Product].[ReorderPoint]
       ,Production.[Product].[StandardCost]
       ,Production.[Product].[ListPrice]
       ,Production.[Product].[Size]
       ,Production.[Product].[SizeUnitMeasureCode]
       ,Production.[Product].[WeightUnitMeasureCode]
       ,Production.[Product].[Weight]
       ,Production.[Product].[DaysToManufacture]
       ,Production.[Product].[ProductLine]
       ,Production.[Product].[Class]
       ,Production.[Product].[Style]
       ,Production.[Product].[ProductSubcategoryID]
       ,Production.[Product].[ProductModelID]
       ,Production.[Product].[SellStartDate]
       ,Production.[Product].[SellEndDate]
       ,Production.[Product].[DiscontinuedDate]
       ,Production.[Product].[rowguid]
       ,Production.[Product].[ModifiedDate]
  FROM Production.[Product]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductInventory] 
                WHERE Production.[ProductInventory].[LocationID] = @LocationId
                  AND Production.[ProductInventory].[ProductID] = Production.[Product].[ProductID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByProductPhotoIdFromProductProductPhoto" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Product].[ProductID]
       ,Production.[Product].[Name]
       ,Production.[Product].[ProductNumber]
       ,Production.[Product].[MakeFlag]
       ,Production.[Product].[FinishedGoodsFlag]
       ,Production.[Product].[Color]
       ,Production.[Product].[SafetyStockLevel]
       ,Production.[Product].[ReorderPoint]
       ,Production.[Product].[StandardCost]
       ,Production.[Product].[ListPrice]
       ,Production.[Product].[Size]
       ,Production.[Product].[SizeUnitMeasureCode]
       ,Production.[Product].[WeightUnitMeasureCode]
       ,Production.[Product].[Weight]
       ,Production.[Product].[DaysToManufacture]
       ,Production.[Product].[ProductLine]
       ,Production.[Product].[Class]
       ,Production.[Product].[Style]
       ,Production.[Product].[ProductSubcategoryID]
       ,Production.[Product].[ProductModelID]
       ,Production.[Product].[SellStartDate]
       ,Production.[Product].[SellEndDate]
       ,Production.[Product].[DiscontinuedDate]
       ,Production.[Product].[rowguid]
       ,Production.[Product].[ModifiedDate]
  FROM Production.[Product]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductProductPhoto] 
                WHERE Production.[ProductProductPhoto].[ProductPhotoID] = @ProductPhotoId
                  AND Production.[ProductProductPhoto].[ProductID] = Production.[Product].[ProductID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetByVendorIdFromProductVendor" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Product].[ProductID]
       ,Production.[Product].[Name]
       ,Production.[Product].[ProductNumber]
       ,Production.[Product].[MakeFlag]
       ,Production.[Product].[FinishedGoodsFlag]
       ,Production.[Product].[Color]
       ,Production.[Product].[SafetyStockLevel]
       ,Production.[Product].[ReorderPoint]
       ,Production.[Product].[StandardCost]
       ,Production.[Product].[ListPrice]
       ,Production.[Product].[Size]
       ,Production.[Product].[SizeUnitMeasureCode]
       ,Production.[Product].[WeightUnitMeasureCode]
       ,Production.[Product].[Weight]
       ,Production.[Product].[DaysToManufacture]
       ,Production.[Product].[ProductLine]
       ,Production.[Product].[Class]
       ,Production.[Product].[Style]
       ,Production.[Product].[ProductSubcategoryID]
       ,Production.[Product].[ProductModelID]
       ,Production.[Product].[SellStartDate]
       ,Production.[Product].[SellEndDate]
       ,Production.[Product].[DiscontinuedDate]
       ,Production.[Product].[rowguid]
       ,Production.[Product].[ModifiedDate]
  FROM Production.[Product]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[ProductVendor] 
                WHERE Purchasing.[ProductVendor].[VendorID] = @VendorId
                  AND Purchasing.[ProductVendor].[ProductID] = Production.[Product].[ProductID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_GetBySpecialOfferIdFromSpecialOfferProduct" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Product].[ProductID]
       ,Production.[Product].[Name]
       ,Production.[Product].[ProductNumber]
       ,Production.[Product].[MakeFlag]
       ,Production.[Product].[FinishedGoodsFlag]
       ,Production.[Product].[Color]
       ,Production.[Product].[SafetyStockLevel]
       ,Production.[Product].[ReorderPoint]
       ,Production.[Product].[StandardCost]
       ,Production.[Product].[ListPrice]
       ,Production.[Product].[Size]
       ,Production.[Product].[SizeUnitMeasureCode]
       ,Production.[Product].[WeightUnitMeasureCode]
       ,Production.[Product].[Weight]
       ,Production.[Product].[DaysToManufacture]
       ,Production.[Product].[ProductLine]
       ,Production.[Product].[Class]
       ,Production.[Product].[Style]
       ,Production.[Product].[ProductSubcategoryID]
       ,Production.[Product].[ProductModelID]
       ,Production.[Product].[SellStartDate]
       ,Production.[Product].[SellEndDate]
       ,Production.[Product].[DiscontinuedDate]
       ,Production.[Product].[rowguid]
       ,Production.[Product].[ModifiedDate]
  FROM Production.[Product]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[SpecialOfferProduct] 
                WHERE Sales.[SpecialOfferProduct].[SpecialOfferID] = @SpecialOfferId
                  AND Sales.[SpecialOfferProduct].[ProductID] = Production.[Product].[ProductID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Product_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Product table passing nullable parameters
-- Table Comment: Products sold or used in the manfacturing of sold products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ProductNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@MakeFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@FinishedGoodsFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Color" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@SafetyStockLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReorderPoint" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@StandardCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ListPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Size" type="nvarchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@SizeUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@WeightUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Weight" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="null"/>
				<parameter name="@DaysToManufacture" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductLine" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault="null"/>
				<parameter name="@SafeNameClass" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault="null"/>
				<parameter name="@Style" type="nchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault="null"/>
				<parameter name="@ProductSubcategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SellStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@SellEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@DiscontinuedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [Name]
	, [ProductNumber]
	, [MakeFlag]
	, [FinishedGoodsFlag]
	, [Color]
	, [SafetyStockLevel]
	, [ReorderPoint]
	, [StandardCost]
	, [ListPrice]
	, [Size]
	, [SizeUnitMeasureCode]
	, [WeightUnitMeasureCode]
	, [Weight]
	, [DaysToManufacture]
	, [ProductLine]
	, [Class]
	, [Style]
	, [ProductSubcategoryID]
	, [ProductModelID]
	, [SellStartDate]
	, [SellEndDate]
	, [DiscontinuedDate]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[Product]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ProductNumber] = @ProductNumber OR @ProductNumber IS NULL)
	AND ([MakeFlag] = @MakeFlag OR @MakeFlag IS NULL)
	AND ([FinishedGoodsFlag] = @FinishedGoodsFlag OR @FinishedGoodsFlag IS NULL)
	AND ([Color] = @Color OR @Color IS NULL)
	AND ([SafetyStockLevel] = @SafetyStockLevel OR @SafetyStockLevel IS NULL)
	AND ([ReorderPoint] = @ReorderPoint OR @ReorderPoint IS NULL)
	AND ([StandardCost] = @StandardCost OR @StandardCost IS NULL)
	AND ([ListPrice] = @ListPrice OR @ListPrice IS NULL)
	AND ([Size] = @Size OR @Size IS NULL)
	AND ([SizeUnitMeasureCode] = @SizeUnitMeasureCode OR @SizeUnitMeasureCode IS NULL)
	AND ([WeightUnitMeasureCode] = @WeightUnitMeasureCode OR @WeightUnitMeasureCode IS NULL)
	AND ([Weight] = @Weight OR @Weight IS NULL)
	AND ([DaysToManufacture] = @DaysToManufacture OR @DaysToManufacture IS NULL)
	AND ([ProductLine] = @ProductLine OR @ProductLine IS NULL)
	AND ([Class] = @SafeNameClass OR @SafeNameClass IS NULL)
	AND ([Style] = @Style OR @Style IS NULL)
	AND ([ProductSubcategoryID] = @ProductSubcategoryId OR @ProductSubcategoryId IS NULL)
	AND ([ProductModelID] = @ProductModelId OR @ProductModelId IS NULL)
	AND ([SellStartDate] = @SellStartDate OR @SellStartDate IS NULL)
	AND ([SellEndDate] = @SellEndDate OR @SellEndDate IS NULL)
	AND ([DiscontinuedDate] = @DiscontinuedDate OR @DiscontinuedDate IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [Name]
	, [ProductNumber]
	, [MakeFlag]
	, [FinishedGoodsFlag]
	, [Color]
	, [SafetyStockLevel]
	, [ReorderPoint]
	, [StandardCost]
	, [ListPrice]
	, [Size]
	, [SizeUnitMeasureCode]
	, [WeightUnitMeasureCode]
	, [Weight]
	, [DaysToManufacture]
	, [ProductLine]
	, [Class]
	, [Style]
	, [ProductSubcategoryID]
	, [ProductModelID]
	, [SellStartDate]
	, [SellEndDate]
	, [DiscontinuedDate]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[Product]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ProductNumber] = @ProductNumber AND @ProductNumber is not null)
	OR ([MakeFlag] = @MakeFlag AND @MakeFlag is not null)
	OR ([FinishedGoodsFlag] = @FinishedGoodsFlag AND @FinishedGoodsFlag is not null)
	OR ([Color] = @Color AND @Color is not null)
	OR ([SafetyStockLevel] = @SafetyStockLevel AND @SafetyStockLevel is not null)
	OR ([ReorderPoint] = @ReorderPoint AND @ReorderPoint is not null)
	OR ([StandardCost] = @StandardCost AND @StandardCost is not null)
	OR ([ListPrice] = @ListPrice AND @ListPrice is not null)
	OR ([Size] = @Size AND @Size is not null)
	OR ([SizeUnitMeasureCode] = @SizeUnitMeasureCode AND @SizeUnitMeasureCode is not null)
	OR ([WeightUnitMeasureCode] = @WeightUnitMeasureCode AND @WeightUnitMeasureCode is not null)
	OR ([Weight] = @Weight AND @Weight is not null)
	OR ([DaysToManufacture] = @DaysToManufacture AND @DaysToManufacture is not null)
	OR ([ProductLine] = @ProductLine AND @ProductLine is not null)
	OR ([Class] = @SafeNameClass AND @SafeNameClass is not null)
	OR ([Style] = @Style AND @Style is not null)
	OR ([ProductSubcategoryID] = @ProductSubcategoryId AND @ProductSubcategoryId is not null)
	OR ([ProductModelID] = @ProductModelId AND @ProductModelId is not null)
	OR ([SellStartDate] = @SellStartDate AND @SellStartDate is not null)
	OR ([SellEndDate] = @SellEndDate AND @SellEndDate is not null)
	OR ([DiscontinuedDate] = @DiscontinuedDate AND @DiscontinuedDate is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_Product_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Product table using a dynamically generated query.
-- Table Comment: Products sold or used in the manfacturing of sold products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [Name]
					, [ProductNumber]
					, [MakeFlag]
					, [FinishedGoodsFlag]
					, [Color]
					, [SafetyStockLevel]
					, [ReorderPoint]
					, [StandardCost]
					, [ListPrice]
					, [Size]
					, [SizeUnitMeasureCode]
					, [WeightUnitMeasureCode]
					, [Weight]
					, [DaysToManufacture]
					, [ProductLine]
					, [Class]
					, [Style]
					, [ProductSubcategoryID]
					, [ProductModelID]
					, [SellStartDate]
					, [SellEndDate]
					, [DiscontinuedDate]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[Product] {0}
				)
				SELECT
				       [ProductID],
				       [Name],
				       [ProductNumber],
				       [MakeFlag],
				       [FinishedGoodsFlag],
				       [Color],
				       [SafetyStockLevel],
				       [ReorderPoint],
				       [StandardCost],
				       [ListPrice],
				       [Size],
				       [SizeUnitMeasureCode],
				       [WeightUnitMeasureCode],
				       [Weight],
				       [DaysToManufacture],
				       [ProductLine],
				       [Class],
				       [Style],
				       [ProductSubcategoryID],
				       [ProductModelID],
				       [SellStartDate],
				       [SellEndDate],
				       [DiscontinuedDate],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[Product] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesTerritoryHistory table
-- Table Comment: Sales representative transfers to other sales territories.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[StartDate],
					[EndDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritoryHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesTerritoryHistory table passing page index and page count parameters
-- Table Comment: Sales representative transfers to other sales territories.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesPersonID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesTerritoryHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesTerritoryHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesTerritoryHistory table
-- Table Comment: Sales representative transfers to other sales territories.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SalesTerritoryHistory]
					(
					[SalesPersonID]
					,[TerritoryID]
					,[StartDate]
					,[EndDate]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@SalesPersonId
					,@TerritoryId
					,@StartDate
					,@EndDate
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesTerritoryHistory table
-- Table Comment: Sales representative transfers to other sales territories.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalSalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalTerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesTerritoryHistory]
				SET
					[SalesPersonID] = @SalesPersonId
					,[TerritoryID] = @TerritoryId
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesPersonID] = @OriginalSalesPersonId 
AND [StartDate] = @OriginalStartDate 
AND [TerritoryID] = @OriginalTerritoryId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesTerritoryHistory table
-- Table Comment: Sales representative transfers to other sales territories.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesTerritoryHistory] WITH (ROWLOCK) 
				WHERE
					[SalesPersonID] = @SalesPersonId
					AND [StartDate] = @StartDate
					AND [TerritoryID] = @TerritoryId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTerritoryHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[StartDate],
					[EndDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritoryHistory]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTerritoryHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[StartDate],
					[EndDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritoryHistory]
				WHERE
					[TerritoryID] = @TerritoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTerritoryHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[StartDate],
					[EndDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritoryHistory]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_GetBySalesPersonIdStartDateTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesTerritoryHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesPersonID],
					[TerritoryID],
					[StartDate],
					[EndDate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesTerritoryHistory]
				WHERE
					[SalesPersonID] = @SalesPersonId
					AND [StartDate] = @StartDate
					AND [TerritoryID] = @TerritoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesTerritoryHistory table passing nullable parameters
-- Table Comment: Sales representative transfers to other sales territories.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesPersonID]
	, [TerritoryID]
	, [StartDate]
	, [EndDate]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesTerritoryHistory]
    WHERE 
	 ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesPersonID]
	, [TerritoryID]
	, [StartDate]
	, [EndDate]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesTerritoryHistory]
    WHERE 
	 ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesTerritoryHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesTerritoryHistory table using a dynamically generated query.
-- Table Comment: Sales representative transfers to other sales territories.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesPersonID]
					, [TerritoryID]
					, [StartDate]
					, [EndDate]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SalesTerritoryHistory] {0}
				)
				SELECT
				       [SalesPersonID],
				       [TerritoryID],
				       [StartDate],
				       [EndDate],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesTerritoryHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the PurchaseOrderDetail table
-- Table Comment: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[PurchaseOrderID],
					[PurchaseOrderDetailID],
					[DueDate],
					[OrderQty],
					[ProductID],
					[UnitPrice],
					[LineTotal],
					[ReceivedQty],
					[RejectedQty],
					[StockedQty],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderDetail]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the PurchaseOrderDetail table passing page index and page count parameters
-- Table Comment: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[PurchaseOrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [PurchaseOrderID]'
				SET @SQL = @SQL + ', [PurchaseOrderDetailID]'
				SET @SQL = @SQL + ', [DueDate]'
				SET @SQL = @SQL + ', [OrderQty]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [UnitPrice]'
				SET @SQL = @SQL + ', [LineTotal]'
				SET @SQL = @SQL + ', [ReceivedQty]'
				SET @SQL = @SQL + ', [RejectedQty]'
				SET @SQL = @SQL + ', [StockedQty]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Purchasing].[PurchaseOrderDetail]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [PurchaseOrderID],'
				SET @SQL = @SQL + ' [PurchaseOrderDetailID],'
				SET @SQL = @SQL + ' [DueDate],'
				SET @SQL = @SQL + ' [OrderQty],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [UnitPrice],'
				SET @SQL = @SQL + ' [LineTotal],'
				SET @SQL = @SQL + ' [ReceivedQty],'
				SET @SQL = @SQL + ' [RejectedQty],'
				SET @SQL = @SQL + ' [StockedQty],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[PurchaseOrderDetail]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the PurchaseOrderDetail table
-- Table Comment: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PurchaseOrderDetailId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OrderQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LineTotal" type="money" direction="Output" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ReceivedQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@RejectedQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@StockedQty" type="decimal" direction="Output" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Purchasing].[PurchaseOrderDetail]
					(
					[PurchaseOrderID]
					,[DueDate]
					,[OrderQty]
					,[ProductID]
					,[UnitPrice]
					,[ReceivedQty]
					,[RejectedQty]
					,[ModifiedDate]
					)
				VALUES
					(
					@PurchaseOrderId
					,@DueDate
					,@OrderQty
					,@ProductId
					,@UnitPrice
					,@ReceivedQty
					,@RejectedQty
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @PurchaseOrderDetailId = SCOPE_IDENTITY()
									
				-- Select computed columns into output parameters
				SELECT
 @LineTotal = [LineTotal]
, @StockedQty = [StockedQty]
				FROM
					[Purchasing].[PurchaseOrderDetail]
				WHERE
[PurchaseOrderID] = @PurchaseOrderId 
AND [PurchaseOrderDetailID] = @PurchaseOrderDetailId 
							
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the PurchaseOrderDetail table
-- Table Comment: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalPurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PurchaseOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OrderQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LineTotal" type="money" direction="Output" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ReceivedQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@RejectedQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@StockedQty" type="decimal" direction="Output" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Purchasing].[PurchaseOrderDetail]
				SET
					[PurchaseOrderID] = @PurchaseOrderId
					,[DueDate] = @DueDate
					,[OrderQty] = @OrderQty
					,[ProductID] = @ProductId
					,[UnitPrice] = @UnitPrice
					,[ReceivedQty] = @ReceivedQty
					,[RejectedQty] = @RejectedQty
					,[ModifiedDate] = @ModifiedDate
				WHERE
[PurchaseOrderID] = @OriginalPurchaseOrderId 
AND [PurchaseOrderDetailID] = @PurchaseOrderDetailId 
				
				
				-- Select computed columns into output parameters
				SELECT
 @LineTotal = [LineTotal]
, @StockedQty = [StockedQty]
				FROM
					[Purchasing].[PurchaseOrderDetail]
				WHERE
[PurchaseOrderID] = @PurchaseOrderId 
AND [PurchaseOrderDetailID] = @PurchaseOrderDetailId 
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the PurchaseOrderDetail table
-- Table Comment: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PurchaseOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Purchasing].[PurchaseOrderDetail] WITH (ROWLOCK) 
				WHERE
					[PurchaseOrderID] = @PurchaseOrderId
					AND [PurchaseOrderDetailID] = @PurchaseOrderDetailId
					
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_GetByPurchaseOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the PurchaseOrderDetail table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[PurchaseOrderID],
					[PurchaseOrderDetailID],
					[DueDate],
					[OrderQty],
					[ProductID],
					[UnitPrice],
					[LineTotal],
					[ReceivedQty],
					[RejectedQty],
					[StockedQty],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderDetail]
				WHERE
					[PurchaseOrderID] = @PurchaseOrderId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the PurchaseOrderDetail table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[PurchaseOrderID],
					[PurchaseOrderDetailID],
					[DueDate],
					[OrderQty],
					[ProductID],
					[UnitPrice],
					[LineTotal],
					[ReceivedQty],
					[RejectedQty],
					[StockedQty],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderDetail]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_GetByPurchaseOrderIdPurchaseOrderDetailId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the PurchaseOrderDetail table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PurchaseOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[PurchaseOrderID],
					[PurchaseOrderDetailID],
					[DueDate],
					[OrderQty],
					[ProductID],
					[UnitPrice],
					[LineTotal],
					[ReceivedQty],
					[RejectedQty],
					[StockedQty],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderDetail]
				WHERE
					[PurchaseOrderID] = @PurchaseOrderId
					AND [PurchaseOrderDetailID] = @PurchaseOrderDetailId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the PurchaseOrderDetail table passing nullable parameters
-- Table Comment: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PurchaseOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@OrderQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@LineTotal" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ReceivedQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="null"/>
				<parameter name="@RejectedQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="null"/>
				<parameter name="@StockedQty" type="decimal" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [PurchaseOrderID]
	, [PurchaseOrderDetailID]
	, [DueDate]
	, [OrderQty]
	, [ProductID]
	, [UnitPrice]
	, [LineTotal]
	, [ReceivedQty]
	, [RejectedQty]
	, [StockedQty]
	, [ModifiedDate]
    FROM
	[Purchasing].[PurchaseOrderDetail]
    WHERE 
	 ([PurchaseOrderID] = @PurchaseOrderId OR @PurchaseOrderId IS NULL)
	AND ([PurchaseOrderDetailID] = @PurchaseOrderDetailId OR @PurchaseOrderDetailId IS NULL)
	AND ([DueDate] = @DueDate OR @DueDate IS NULL)
	AND ([OrderQty] = @OrderQty OR @OrderQty IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([UnitPrice] = @UnitPrice OR @UnitPrice IS NULL)
	AND ([LineTotal] = @LineTotal OR @LineTotal IS NULL)
	AND ([ReceivedQty] = @ReceivedQty OR @ReceivedQty IS NULL)
	AND ([RejectedQty] = @RejectedQty OR @RejectedQty IS NULL)
	AND ([StockedQty] = @StockedQty OR @StockedQty IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [PurchaseOrderID]
	, [PurchaseOrderDetailID]
	, [DueDate]
	, [OrderQty]
	, [ProductID]
	, [UnitPrice]
	, [LineTotal]
	, [ReceivedQty]
	, [RejectedQty]
	, [StockedQty]
	, [ModifiedDate]
    FROM
	[Purchasing].[PurchaseOrderDetail]
    WHERE 
	 ([PurchaseOrderID] = @PurchaseOrderId AND @PurchaseOrderId is not null)
	OR ([PurchaseOrderDetailID] = @PurchaseOrderDetailId AND @PurchaseOrderDetailId is not null)
	OR ([DueDate] = @DueDate AND @DueDate is not null)
	OR ([OrderQty] = @OrderQty AND @OrderQty is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([UnitPrice] = @UnitPrice AND @UnitPrice is not null)
	OR ([LineTotal] = @LineTotal AND @LineTotal is not null)
	OR ([ReceivedQty] = @ReceivedQty AND @ReceivedQty is not null)
	OR ([RejectedQty] = @RejectedQty AND @RejectedQty is not null)
	OR ([StockedQty] = @StockedQty AND @StockedQty is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderDetail_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the PurchaseOrderDetail table using a dynamically generated query.
-- Table Comment: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [PurchaseOrderID]
					, [PurchaseOrderDetailID]
					, [DueDate]
					, [OrderQty]
					, [ProductID]
					, [UnitPrice]
					, [LineTotal]
					, [ReceivedQty]
					, [RejectedQty]
					, [StockedQty]
					, [ModifiedDate]
					FROM [Purchasing].[PurchaseOrderDetail] {0}
				)
				SELECT
				       [PurchaseOrderID],
				       [PurchaseOrderDetailID],
				       [DueDate],
				       [OrderQty],
				       [ProductID],
				       [UnitPrice],
				       [LineTotal],
				       [ReceivedQty],
				       [RejectedQty],
				       [StockedQty],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[PurchaseOrderDetail] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SalesOrderDetail table
-- Table Comment: Individual products associated with a specific sales order. See SalesOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesOrderID],
					[SalesOrderDetailID],
					[CarrierTrackingNumber],
					[OrderQty],
					[ProductID],
					[SpecialOfferID],
					[UnitPrice],
					[UnitPriceDiscount],
					[LineTotal],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderDetail]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesOrderDetail table passing page index and page count parameters
-- Table Comment: Individual products associated with a specific sales order. See SalesOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesOrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesOrderID]'
				SET @SQL = @SQL + ', [SalesOrderDetailID]'
				SET @SQL = @SQL + ', [CarrierTrackingNumber]'
				SET @SQL = @SQL + ', [OrderQty]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [SpecialOfferID]'
				SET @SQL = @SQL + ', [UnitPrice]'
				SET @SQL = @SQL + ', [UnitPriceDiscount]'
				SET @SQL = @SQL + ', [LineTotal]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SalesOrderDetail]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesOrderID],'
				SET @SQL = @SQL + ' [SalesOrderDetailID],'
				SET @SQL = @SQL + ' [CarrierTrackingNumber],'
				SET @SQL = @SQL + ' [OrderQty],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [SpecialOfferID],'
				SET @SQL = @SQL + ' [UnitPrice],'
				SET @SQL = @SQL + ' [UnitPriceDiscount],'
				SET @SQL = @SQL + ' [LineTotal],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SalesOrderDetail]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SalesOrderDetail table
-- Table Comment: Individual products associated with a specific sales order. See SalesOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesOrderDetailId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CarrierTrackingNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@OrderQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@UnitPriceDiscount" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LineTotal" type="numeric" direction="Output" size="17" precision="38" scale="6" param="(38, 6)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SalesOrderDetail]
					(
					[SalesOrderID]
					,[CarrierTrackingNumber]
					,[OrderQty]
					,[ProductID]
					,[SpecialOfferID]
					,[UnitPrice]
					,[UnitPriceDiscount]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@SalesOrderId
					,@CarrierTrackingNumber
					,@OrderQty
					,@ProductId
					,@SpecialOfferId
					,@UnitPrice
					,@UnitPriceDiscount
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @SalesOrderDetailId = SCOPE_IDENTITY()
									
				-- Select computed columns into output parameters
				SELECT
 @LineTotal = [LineTotal]
				FROM
					[Sales].[SalesOrderDetail]
				WHERE
[SalesOrderID] = @SalesOrderId 
AND [SalesOrderDetailID] = @SalesOrderDetailId 
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SalesOrderDetail table
-- Table Comment: Individual products associated with a specific sales order. See SalesOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalSalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CarrierTrackingNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@OrderQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@UnitPriceDiscount" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LineTotal" type="numeric" direction="Output" size="17" precision="38" scale="6" param="(38, 6)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SalesOrderDetail]
				SET
					[SalesOrderID] = @SalesOrderId
					,[CarrierTrackingNumber] = @CarrierTrackingNumber
					,[OrderQty] = @OrderQty
					,[ProductID] = @ProductId
					,[SpecialOfferID] = @SpecialOfferId
					,[UnitPrice] = @UnitPrice
					,[UnitPriceDiscount] = @UnitPriceDiscount
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SalesOrderID] = @OriginalSalesOrderId 
AND [SalesOrderDetailID] = @SalesOrderDetailId 
				
				
				-- Select computed columns into output parameters
				SELECT
 @LineTotal = [LineTotal]
				FROM
					[Sales].[SalesOrderDetail]
				WHERE
[SalesOrderID] = @SalesOrderId 
AND [SalesOrderDetailID] = @SalesOrderDetailId 
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SalesOrderDetail table
-- Table Comment: Individual products associated with a specific sales order. See SalesOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SalesOrderDetail] WITH (ROWLOCK) 
				WHERE
					[SalesOrderID] = @SalesOrderId
					AND [SalesOrderDetailID] = @SalesOrderDetailId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_GetBySalesOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderDetail table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[SalesOrderDetailID],
					[CarrierTrackingNumber],
					[OrderQty],
					[ProductID],
					[SpecialOfferID],
					[UnitPrice],
					[UnitPriceDiscount],
					[LineTotal],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderDetail]
				WHERE
					[SalesOrderID] = @SalesOrderId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_GetBySpecialOfferIdProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderDetail table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SalesOrderID],
					[SalesOrderDetailID],
					[CarrierTrackingNumber],
					[OrderQty],
					[ProductID],
					[SpecialOfferID],
					[UnitPrice],
					[UnitPriceDiscount],
					[LineTotal],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderDetail]
				WHERE
					[SpecialOfferID] = @SpecialOfferId
					AND [ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderDetail table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[SalesOrderDetailID],
					[CarrierTrackingNumber],
					[OrderQty],
					[ProductID],
					[SpecialOfferID],
					[UnitPrice],
					[UnitPriceDiscount],
					[LineTotal],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderDetail]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderDetail table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[SalesOrderDetailID],
					[CarrierTrackingNumber],
					[OrderQty],
					[ProductID],
					[SpecialOfferID],
					[UnitPrice],
					[UnitPriceDiscount],
					[LineTotal],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderDetail]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_GetBySalesOrderIdSalesOrderDetailId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SalesOrderDetail table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SalesOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SalesOrderID],
					[SalesOrderDetailID],
					[CarrierTrackingNumber],
					[OrderQty],
					[ProductID],
					[SpecialOfferID],
					[UnitPrice],
					[UnitPriceDiscount],
					[LineTotal],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SalesOrderDetail]
				WHERE
					[SalesOrderID] = @SalesOrderId
					AND [SalesOrderDetailID] = @SalesOrderDetailId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SalesOrderDetail table passing nullable parameters
-- Table Comment: Individual products associated with a specific sales order. See SalesOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SalesOrderDetailId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CarrierTrackingNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@OrderQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@UnitPriceDiscount" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@LineTotal" type="numeric" direction="Input" size="17" precision="38" scale="6" param="(38, 6)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SalesOrderID]
	, [SalesOrderDetailID]
	, [CarrierTrackingNumber]
	, [OrderQty]
	, [ProductID]
	, [SpecialOfferID]
	, [UnitPrice]
	, [UnitPriceDiscount]
	, [LineTotal]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesOrderDetail]
    WHERE 
	 ([SalesOrderID] = @SalesOrderId OR @SalesOrderId IS NULL)
	AND ([SalesOrderDetailID] = @SalesOrderDetailId OR @SalesOrderDetailId IS NULL)
	AND ([CarrierTrackingNumber] = @CarrierTrackingNumber OR @CarrierTrackingNumber IS NULL)
	AND ([OrderQty] = @OrderQty OR @OrderQty IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([SpecialOfferID] = @SpecialOfferId OR @SpecialOfferId IS NULL)
	AND ([UnitPrice] = @UnitPrice OR @UnitPrice IS NULL)
	AND ([UnitPriceDiscount] = @UnitPriceDiscount OR @UnitPriceDiscount IS NULL)
	AND ([LineTotal] = @LineTotal OR @LineTotal IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SalesOrderID]
	, [SalesOrderDetailID]
	, [CarrierTrackingNumber]
	, [OrderQty]
	, [ProductID]
	, [SpecialOfferID]
	, [UnitPrice]
	, [UnitPriceDiscount]
	, [LineTotal]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SalesOrderDetail]
    WHERE 
	 ([SalesOrderID] = @SalesOrderId AND @SalesOrderId is not null)
	OR ([SalesOrderDetailID] = @SalesOrderDetailId AND @SalesOrderDetailId is not null)
	OR ([CarrierTrackingNumber] = @CarrierTrackingNumber AND @CarrierTrackingNumber is not null)
	OR ([OrderQty] = @OrderQty AND @OrderQty is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([SpecialOfferID] = @SpecialOfferId AND @SpecialOfferId is not null)
	OR ([UnitPrice] = @UnitPrice AND @UnitPrice is not null)
	OR ([UnitPriceDiscount] = @UnitPriceDiscount AND @UnitPriceDiscount is not null)
	OR ([LineTotal] = @LineTotal AND @LineTotal is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SalesOrderDetail_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SalesOrderDetail table using a dynamically generated query.
-- Table Comment: Individual products associated with a specific sales order. See SalesOrderHeader.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SalesOrderID]
					, [SalesOrderDetailID]
					, [CarrierTrackingNumber]
					, [OrderQty]
					, [ProductID]
					, [SpecialOfferID]
					, [UnitPrice]
					, [UnitPriceDiscount]
					, [LineTotal]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SalesOrderDetail] {0}
				)
				SELECT
				       [SalesOrderID],
				       [SalesOrderDetailID],
				       [CarrierTrackingNumber],
				       [OrderQty],
				       [ProductID],
				       [SpecialOfferID],
				       [UnitPrice],
				       [UnitPriceDiscount],
				       [LineTotal],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SalesOrderDetail] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductProductPhoto table
-- Table Comment: Cross-reference table mapping products and product photos.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[ProductPhotoID],
					[Primary],
					[ModifiedDate]
				FROM
					[Production].[ProductProductPhoto]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductProductPhoto table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping products and product photos.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductPhotoID]'
				SET @SQL = @SQL + ', [Primary]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductProductPhoto]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductPhotoID],'
				SET @SQL = @SQL + ' [Primary],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductProductPhoto]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductProductPhoto table
-- Table Comment: Cross-reference table mapping products and product photos.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Primary" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductProductPhoto]
					(
					[ProductID]
					,[ProductPhotoID]
					,[Primary]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@ProductPhotoId
					,@Primary
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductProductPhoto table
-- Table Comment: Cross-reference table mapping products and product photos.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Primary" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductProductPhoto]
				SET
					[ProductID] = @ProductId
					,[ProductPhotoID] = @ProductPhotoId
					,[Primary] = @Primary
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductID] = @OriginalProductId 
AND [ProductPhotoID] = @OriginalProductPhotoId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductProductPhoto table
-- Table Comment: Cross-reference table mapping products and product photos.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductProductPhoto] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					AND [ProductPhotoID] = @ProductPhotoId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductProductPhoto table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[ProductPhotoID],
					[Primary],
					[ModifiedDate]
				FROM
					[Production].[ProductProductPhoto]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_GetByProductPhotoId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductProductPhoto table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[ProductPhotoID],
					[Primary],
					[ModifiedDate]
				FROM
					[Production].[ProductProductPhoto]
				WHERE
					[ProductPhotoID] = @ProductPhotoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_GetByProductIdProductPhotoId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductProductPhoto table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[ProductPhotoID],
					[Primary],
					[ModifiedDate]
				FROM
					[Production].[ProductProductPhoto]
				WHERE
					[ProductID] = @ProductId
					AND [ProductPhotoID] = @ProductPhotoId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductProductPhoto table passing nullable parameters
-- Table Comment: Cross-reference table mapping products and product photos.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Primary" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [ProductPhotoID]
	, [Primary]
	, [ModifiedDate]
    FROM
	[Production].[ProductProductPhoto]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([ProductPhotoID] = @ProductPhotoId OR @ProductPhotoId IS NULL)
	AND ([Primary] = @Primary OR @Primary IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [ProductPhotoID]
	, [Primary]
	, [ModifiedDate]
    FROM
	[Production].[ProductProductPhoto]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([ProductPhotoID] = @ProductPhotoId AND @ProductPhotoId is not null)
	OR ([Primary] = @Primary AND @Primary is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductProductPhoto_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductProductPhoto table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping products and product photos.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [ProductPhotoID]
					, [Primary]
					, [ModifiedDate]
					FROM [Production].[ProductProductPhoto] {0}
				)
				SELECT
				       [ProductID],
				       [ProductPhotoID],
				       [Primary],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductProductPhoto] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductReview_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductReview table
-- Table Comment: Customer reviews of products they have purchased.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductReviewID],
					[ProductID],
					[ReviewerName],
					[ReviewDate],
					[EmailAddress],
					[Rating],
					[Comments],
					[ModifiedDate]
				FROM
					[Production].[ProductReview]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductReview_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductReview table passing page index and page count parameters
-- Table Comment: Customer reviews of products they have purchased.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductReviewID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductReviewID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ReviewerName]'
				SET @SQL = @SQL + ', [ReviewDate]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [Rating]'
				SET @SQL = @SQL + ', [Comments]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductReview]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductReviewID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ReviewerName],'
				SET @SQL = @SQL + ' [ReviewDate],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [Rating],'
				SET @SQL = @SQL + ' [Comments],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductReview]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductReview_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductReview table
-- Table Comment: Customer reviews of products they have purchased.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductReviewId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReviewerName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ReviewDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EmailAddress" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rating" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Comments" type="nvarchar" direction="Input" size="3850" precision="0" scale="0" param="(3850)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductReview]
					(
					[ProductID]
					,[ReviewerName]
					,[ReviewDate]
					,[EmailAddress]
					,[Rating]
					,[Comments]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@ReviewerName
					,@ReviewDate
					,@EmailAddress
					,@Rating
					,@Comments
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @ProductReviewId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductReview_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductReview table
-- Table Comment: Customer reviews of products they have purchased.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductReviewId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReviewerName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ReviewDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EmailAddress" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rating" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Comments" type="nvarchar" direction="Input" size="3850" precision="0" scale="0" param="(3850)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductReview]
				SET
					[ProductID] = @ProductId
					,[ReviewerName] = @ReviewerName
					,[ReviewDate] = @ReviewDate
					,[EmailAddress] = @EmailAddress
					,[Rating] = @Rating
					,[Comments] = @Comments
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductReviewID] = @ProductReviewId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductReview_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductReview table
-- Table Comment: Customer reviews of products they have purchased.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductReviewId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductReview] WITH (ROWLOCK) 
				WHERE
					[ProductReviewID] = @ProductReviewId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductReview_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductReview table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductReviewID],
					[ProductID],
					[ReviewerName],
					[ReviewDate],
					[EmailAddress],
					[Rating],
					[Comments],
					[ModifiedDate]
				FROM
					[Production].[ProductReview]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductReview_GetByProductIdReviewerName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductReview table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReviewerName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductReviewID],
					[ProductID],
					[ReviewerName],
					[ReviewDate],
					[EmailAddress],
					[Rating],
					[Comments],
					[ModifiedDate]
				FROM
					[Production].[ProductReview]
				WHERE
					[ProductID] = @ProductId
					AND [ReviewerName] = @ReviewerName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductReview_GetByProductReviewId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductReview table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductReviewId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductReviewID],
					[ProductID],
					[ReviewerName],
					[ReviewDate],
					[EmailAddress],
					[Rating],
					[Comments],
					[ModifiedDate]
				FROM
					[Production].[ProductReview]
				WHERE
					[ProductReviewID] = @ProductReviewId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductReview_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductReview table passing nullable parameters
-- Table Comment: Customer reviews of products they have purchased.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductReviewId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReviewerName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ReviewDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EmailAddress" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Rating" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Comments" type="nvarchar" direction="Input" size="3850" precision="0" scale="0" param="(3850)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductReviewID]
	, [ProductID]
	, [ReviewerName]
	, [ReviewDate]
	, [EmailAddress]
	, [Rating]
	, [Comments]
	, [ModifiedDate]
    FROM
	[Production].[ProductReview]
    WHERE 
	 ([ProductReviewID] = @ProductReviewId OR @ProductReviewId IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([ReviewerName] = @ReviewerName OR @ReviewerName IS NULL)
	AND ([ReviewDate] = @ReviewDate OR @ReviewDate IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([Rating] = @Rating OR @Rating IS NULL)
	AND ([Comments] = @Comments OR @Comments IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductReviewID]
	, [ProductID]
	, [ReviewerName]
	, [ReviewDate]
	, [EmailAddress]
	, [Rating]
	, [Comments]
	, [ModifiedDate]
    FROM
	[Production].[ProductReview]
    WHERE 
	 ([ProductReviewID] = @ProductReviewId AND @ProductReviewId is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([ReviewerName] = @ReviewerName AND @ReviewerName is not null)
	OR ([ReviewDate] = @ReviewDate AND @ReviewDate is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([Rating] = @Rating AND @Rating is not null)
	OR ([Comments] = @Comments AND @Comments is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductReview_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductReview table using a dynamically generated query.
-- Table Comment: Customer reviews of products they have purchased.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductReviewID]
					, [ProductID]
					, [ReviewerName]
					, [ReviewDate]
					, [EmailAddress]
					, [Rating]
					, [Comments]
					, [ModifiedDate]
					FROM [Production].[ProductReview] {0}
				)
				SELECT
				       [ProductReviewID],
				       [ProductID],
				       [ReviewerName],
				       [ReviewDate],
				       [EmailAddress],
				       [Rating],
				       [Comments],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductReview] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the PurchaseOrderHeader table
-- Table Comment: General purchase order information. See PurchaseOrderDetail.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[PurchaseOrderID],
					[RevisionNumber],
					[Status],
					[EmployeeID],
					[VendorID],
					[ShipMethodID],
					[OrderDate],
					[ShipDate],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderHeader]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the PurchaseOrderHeader table passing page index and page count parameters
-- Table Comment: General purchase order information. See PurchaseOrderDetail.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[PurchaseOrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [PurchaseOrderID]'
				SET @SQL = @SQL + ', [RevisionNumber]'
				SET @SQL = @SQL + ', [Status]'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [VendorID]'
				SET @SQL = @SQL + ', [ShipMethodID]'
				SET @SQL = @SQL + ', [OrderDate]'
				SET @SQL = @SQL + ', [ShipDate]'
				SET @SQL = @SQL + ', [SubTotal]'
				SET @SQL = @SQL + ', [TaxAmt]'
				SET @SQL = @SQL + ', [Freight]'
				SET @SQL = @SQL + ', [TotalDue]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Purchasing].[PurchaseOrderHeader]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [PurchaseOrderID],'
				SET @SQL = @SQL + ' [RevisionNumber],'
				SET @SQL = @SQL + ' [Status],'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [VendorID],'
				SET @SQL = @SQL + ' [ShipMethodID],'
				SET @SQL = @SQL + ' [OrderDate],'
				SET @SQL = @SQL + ' [ShipDate],'
				SET @SQL = @SQL + ' [SubTotal],'
				SET @SQL = @SQL + ' [TaxAmt],'
				SET @SQL = @SQL + ' [Freight],'
				SET @SQL = @SQL + ' [TotalDue],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[PurchaseOrderHeader]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the PurchaseOrderHeader table
-- Table Comment: General purchase order information. See PurchaseOrderDetail.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RevisionNumber" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShipDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SubTotal" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TaxAmt" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TotalDue" type="money" direction="Output" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Purchasing].[PurchaseOrderHeader]
					(
					[RevisionNumber]
					,[Status]
					,[EmployeeID]
					,[VendorID]
					,[ShipMethodID]
					,[OrderDate]
					,[ShipDate]
					,[SubTotal]
					,[TaxAmt]
					,[Freight]
					,[ModifiedDate]
					)
				VALUES
					(
					@RevisionNumber
					,@Status
					,@EmployeeId
					,@VendorId
					,@ShipMethodId
					,@OrderDate
					,@ShipDate
					,@SubTotal
					,@TaxAmt
					,@Freight
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @PurchaseOrderId = SCOPE_IDENTITY()
									
				-- Select computed columns into output parameters
				SELECT
 @TotalDue = [TotalDue]
				FROM
					[Purchasing].[PurchaseOrderHeader]
				WHERE
[PurchaseOrderID] = @PurchaseOrderId 
							
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the PurchaseOrderHeader table
-- Table Comment: General purchase order information. See PurchaseOrderDetail.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RevisionNumber" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShipDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SubTotal" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TaxAmt" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@TotalDue" type="money" direction="Output" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Purchasing].[PurchaseOrderHeader]
				SET
					[RevisionNumber] = @RevisionNumber
					,[Status] = @Status
					,[EmployeeID] = @EmployeeId
					,[VendorID] = @VendorId
					,[ShipMethodID] = @ShipMethodId
					,[OrderDate] = @OrderDate
					,[ShipDate] = @ShipDate
					,[SubTotal] = @SubTotal
					,[TaxAmt] = @TaxAmt
					,[Freight] = @Freight
					,[ModifiedDate] = @ModifiedDate
				WHERE
[PurchaseOrderID] = @PurchaseOrderId 
				
				
				-- Select computed columns into output parameters
				SELECT
 @TotalDue = [TotalDue]
				FROM
					[Purchasing].[PurchaseOrderHeader]
				WHERE
[PurchaseOrderID] = @PurchaseOrderId 
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the PurchaseOrderHeader table
-- Table Comment: General purchase order information. See PurchaseOrderDetail.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Purchasing].[PurchaseOrderHeader] WITH (ROWLOCK) 
				WHERE
					[PurchaseOrderID] = @PurchaseOrderId
					
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_GetByShipMethodId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the PurchaseOrderHeader table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[PurchaseOrderID],
					[RevisionNumber],
					[Status],
					[EmployeeID],
					[VendorID],
					[ShipMethodID],
					[OrderDate],
					[ShipDate],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderHeader]
				WHERE
					[ShipMethodID] = @ShipMethodId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the PurchaseOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[PurchaseOrderID],
					[RevisionNumber],
					[Status],
					[EmployeeID],
					[VendorID],
					[ShipMethodID],
					[OrderDate],
					[ShipDate],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderHeader]
				WHERE
					[EmployeeID] = @EmployeeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_GetByVendorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the PurchaseOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[PurchaseOrderID],
					[RevisionNumber],
					[Status],
					[EmployeeID],
					[VendorID],
					[ShipMethodID],
					[OrderDate],
					[ShipDate],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderHeader]
				WHERE
					[VendorID] = @VendorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_GetByPurchaseOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the PurchaseOrderHeader table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[PurchaseOrderID],
					[RevisionNumber],
					[Status],
					[EmployeeID],
					[VendorID],
					[ShipMethodID],
					[OrderDate],
					[ShipDate],
					[SubTotal],
					[TaxAmt],
					[Freight],
					[TotalDue],
					[ModifiedDate]
				FROM
					[Purchasing].[PurchaseOrderHeader]
				WHERE
					[PurchaseOrderID] = @PurchaseOrderId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the PurchaseOrderHeader table passing nullable parameters
-- Table Comment: General purchase order information. See PurchaseOrderDetail.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PurchaseOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RevisionNumber" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ShipDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@SubTotal" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@TaxAmt" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@TotalDue" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [PurchaseOrderID]
	, [RevisionNumber]
	, [Status]
	, [EmployeeID]
	, [VendorID]
	, [ShipMethodID]
	, [OrderDate]
	, [ShipDate]
	, [SubTotal]
	, [TaxAmt]
	, [Freight]
	, [TotalDue]
	, [ModifiedDate]
    FROM
	[Purchasing].[PurchaseOrderHeader]
    WHERE 
	 ([PurchaseOrderID] = @PurchaseOrderId OR @PurchaseOrderId IS NULL)
	AND ([RevisionNumber] = @RevisionNumber OR @RevisionNumber IS NULL)
	AND ([Status] = @Status OR @Status IS NULL)
	AND ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([VendorID] = @VendorId OR @VendorId IS NULL)
	AND ([ShipMethodID] = @ShipMethodId OR @ShipMethodId IS NULL)
	AND ([OrderDate] = @OrderDate OR @OrderDate IS NULL)
	AND ([ShipDate] = @ShipDate OR @ShipDate IS NULL)
	AND ([SubTotal] = @SubTotal OR @SubTotal IS NULL)
	AND ([TaxAmt] = @TaxAmt OR @TaxAmt IS NULL)
	AND ([Freight] = @Freight OR @Freight IS NULL)
	AND ([TotalDue] = @TotalDue OR @TotalDue IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [PurchaseOrderID]
	, [RevisionNumber]
	, [Status]
	, [EmployeeID]
	, [VendorID]
	, [ShipMethodID]
	, [OrderDate]
	, [ShipDate]
	, [SubTotal]
	, [TaxAmt]
	, [Freight]
	, [TotalDue]
	, [ModifiedDate]
    FROM
	[Purchasing].[PurchaseOrderHeader]
    WHERE 
	 ([PurchaseOrderID] = @PurchaseOrderId AND @PurchaseOrderId is not null)
	OR ([RevisionNumber] = @RevisionNumber AND @RevisionNumber is not null)
	OR ([Status] = @Status AND @Status is not null)
	OR ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([VendorID] = @VendorId AND @VendorId is not null)
	OR ([ShipMethodID] = @ShipMethodId AND @ShipMethodId is not null)
	OR ([OrderDate] = @OrderDate AND @OrderDate is not null)
	OR ([ShipDate] = @ShipDate AND @ShipDate is not null)
	OR ([SubTotal] = @SubTotal AND @SubTotal is not null)
	OR ([TaxAmt] = @TaxAmt AND @TaxAmt is not null)
	OR ([Freight] = @Freight AND @Freight is not null)
	OR ([TotalDue] = @TotalDue AND @TotalDue is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Purchasing" name="usp_adwTiers_PurchaseOrderHeader_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the PurchaseOrderHeader table using a dynamically generated query.
-- Table Comment: General purchase order information. See PurchaseOrderDetail.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [PurchaseOrderID]
					, [RevisionNumber]
					, [Status]
					, [EmployeeID]
					, [VendorID]
					, [ShipMethodID]
					, [OrderDate]
					, [ShipDate]
					, [SubTotal]
					, [TaxAmt]
					, [Freight]
					, [TotalDue]
					, [ModifiedDate]
					FROM [Purchasing].[PurchaseOrderHeader] {0}
				)
				SELECT
				       [PurchaseOrderID],
				       [RevisionNumber],
				       [Status],
				       [EmployeeID],
				       [VendorID],
				       [ShipMethodID],
				       [OrderDate],
				       [ShipDate],
				       [SubTotal],
				       [TaxAmt],
				       [Freight],
				       [TotalDue],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[PurchaseOrderHeader] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductVendor table
-- Table Comment: Cross-reference table mapping vendors with the products they supply.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[VendorID],
					[AverageLeadTime],
					[StandardPrice],
					[LastReceiptCost],
					[LastReceiptDate],
					[MinOrderQty],
					[MaxOrderQty],
					[OnOrderQty],
					[UnitMeasureCode],
					[ModifiedDate]
				FROM
					[Purchasing].[ProductVendor]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductVendor table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping vendors with the products they supply.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [VendorID]'
				SET @SQL = @SQL + ', [AverageLeadTime]'
				SET @SQL = @SQL + ', [StandardPrice]'
				SET @SQL = @SQL + ', [LastReceiptCost]'
				SET @SQL = @SQL + ', [LastReceiptDate]'
				SET @SQL = @SQL + ', [MinOrderQty]'
				SET @SQL = @SQL + ', [MaxOrderQty]'
				SET @SQL = @SQL + ', [OnOrderQty]'
				SET @SQL = @SQL + ', [UnitMeasureCode]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Purchasing].[ProductVendor]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [VendorID],'
				SET @SQL = @SQL + ' [AverageLeadTime],'
				SET @SQL = @SQL + ' [StandardPrice],'
				SET @SQL = @SQL + ' [LastReceiptCost],'
				SET @SQL = @SQL + ' [LastReceiptDate],'
				SET @SQL = @SQL + ' [MinOrderQty],'
				SET @SQL = @SQL + ' [MaxOrderQty],'
				SET @SQL = @SQL + ' [OnOrderQty],'
				SET @SQL = @SQL + ' [UnitMeasureCode],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[ProductVendor]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductVendor table
-- Table Comment: Cross-reference table mapping vendors with the products they supply.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AverageLeadTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StandardPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LastReceiptCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LastReceiptDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MinOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MaxOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OnOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Purchasing].[ProductVendor]
					(
					[ProductID]
					,[VendorID]
					,[AverageLeadTime]
					,[StandardPrice]
					,[LastReceiptCost]
					,[LastReceiptDate]
					,[MinOrderQty]
					,[MaxOrderQty]
					,[OnOrderQty]
					,[UnitMeasureCode]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@VendorId
					,@AverageLeadTime
					,@StandardPrice
					,@LastReceiptCost
					,@LastReceiptDate
					,@MinOrderQty
					,@MaxOrderQty
					,@OnOrderQty
					,@UnitMeasureCode
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductVendor table
-- Table Comment: Cross-reference table mapping vendors with the products they supply.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalVendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AverageLeadTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StandardPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LastReceiptCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@LastReceiptDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MinOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MaxOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OnOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Purchasing].[ProductVendor]
				SET
					[ProductID] = @ProductId
					,[VendorID] = @VendorId
					,[AverageLeadTime] = @AverageLeadTime
					,[StandardPrice] = @StandardPrice
					,[LastReceiptCost] = @LastReceiptCost
					,[LastReceiptDate] = @LastReceiptDate
					,[MinOrderQty] = @MinOrderQty
					,[MaxOrderQty] = @MaxOrderQty
					,[OnOrderQty] = @OnOrderQty
					,[UnitMeasureCode] = @UnitMeasureCode
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductID] = @OriginalProductId 
AND [VendorID] = @OriginalVendorId 
				
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductVendor table
-- Table Comment: Cross-reference table mapping vendors with the products they supply.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Purchasing].[ProductVendor] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					AND [VendorID] = @VendorId
					
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductVendor table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[VendorID],
					[AverageLeadTime],
					[StandardPrice],
					[LastReceiptCost],
					[LastReceiptDate],
					[MinOrderQty],
					[MaxOrderQty],
					[OnOrderQty],
					[UnitMeasureCode],
					[ModifiedDate]
				FROM
					[Purchasing].[ProductVendor]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_GetByUnitMeasureCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductVendor table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[VendorID],
					[AverageLeadTime],
					[StandardPrice],
					[LastReceiptCost],
					[LastReceiptDate],
					[MinOrderQty],
					[MaxOrderQty],
					[OnOrderQty],
					[UnitMeasureCode],
					[ModifiedDate]
				FROM
					[Purchasing].[ProductVendor]
				WHERE
					[UnitMeasureCode] = @UnitMeasureCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_GetByVendorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductVendor table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[VendorID],
					[AverageLeadTime],
					[StandardPrice],
					[LastReceiptCost],
					[LastReceiptDate],
					[MinOrderQty],
					[MaxOrderQty],
					[OnOrderQty],
					[UnitMeasureCode],
					[ModifiedDate]
				FROM
					[Purchasing].[ProductVendor]
				WHERE
					[VendorID] = @VendorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_GetByProductIdVendorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductVendor table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[VendorID],
					[AverageLeadTime],
					[StandardPrice],
					[LastReceiptCost],
					[LastReceiptDate],
					[MinOrderQty],
					[MaxOrderQty],
					[OnOrderQty],
					[UnitMeasureCode],
					[ModifiedDate]
				FROM
					[Purchasing].[ProductVendor]
				WHERE
					[ProductID] = @ProductId
					AND [VendorID] = @VendorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductVendor table passing nullable parameters
-- Table Comment: Cross-reference table mapping vendors with the products they supply.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AverageLeadTime" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StandardPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@LastReceiptCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@LastReceiptDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@MinOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MaxOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@OnOrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [VendorID]
	, [AverageLeadTime]
	, [StandardPrice]
	, [LastReceiptCost]
	, [LastReceiptDate]
	, [MinOrderQty]
	, [MaxOrderQty]
	, [OnOrderQty]
	, [UnitMeasureCode]
	, [ModifiedDate]
    FROM
	[Purchasing].[ProductVendor]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([VendorID] = @VendorId OR @VendorId IS NULL)
	AND ([AverageLeadTime] = @AverageLeadTime OR @AverageLeadTime IS NULL)
	AND ([StandardPrice] = @StandardPrice OR @StandardPrice IS NULL)
	AND ([LastReceiptCost] = @LastReceiptCost OR @LastReceiptCost IS NULL)
	AND ([LastReceiptDate] = @LastReceiptDate OR @LastReceiptDate IS NULL)
	AND ([MinOrderQty] = @MinOrderQty OR @MinOrderQty IS NULL)
	AND ([MaxOrderQty] = @MaxOrderQty OR @MaxOrderQty IS NULL)
	AND ([OnOrderQty] = @OnOrderQty OR @OnOrderQty IS NULL)
	AND ([UnitMeasureCode] = @UnitMeasureCode OR @UnitMeasureCode IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [VendorID]
	, [AverageLeadTime]
	, [StandardPrice]
	, [LastReceiptCost]
	, [LastReceiptDate]
	, [MinOrderQty]
	, [MaxOrderQty]
	, [OnOrderQty]
	, [UnitMeasureCode]
	, [ModifiedDate]
    FROM
	[Purchasing].[ProductVendor]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([VendorID] = @VendorId AND @VendorId is not null)
	OR ([AverageLeadTime] = @AverageLeadTime AND @AverageLeadTime is not null)
	OR ([StandardPrice] = @StandardPrice AND @StandardPrice is not null)
	OR ([LastReceiptCost] = @LastReceiptCost AND @LastReceiptCost is not null)
	OR ([LastReceiptDate] = @LastReceiptDate AND @LastReceiptDate is not null)
	OR ([MinOrderQty] = @MinOrderQty AND @MinOrderQty is not null)
	OR ([MaxOrderQty] = @MaxOrderQty AND @MaxOrderQty is not null)
	OR ([OnOrderQty] = @OnOrderQty AND @OnOrderQty is not null)
	OR ([UnitMeasureCode] = @UnitMeasureCode AND @UnitMeasureCode is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Purchasing" name="usp_adwTiers_ProductVendor_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductVendor table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping vendors with the products they supply.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [VendorID]
					, [AverageLeadTime]
					, [StandardPrice]
					, [LastReceiptCost]
					, [LastReceiptDate]
					, [MinOrderQty]
					, [MaxOrderQty]
					, [OnOrderQty]
					, [UnitMeasureCode]
					, [ModifiedDate]
					FROM [Purchasing].[ProductVendor] {0}
				)
				SELECT
				       [ProductID],
				       [VendorID],
				       [AverageLeadTime],
				       [StandardPrice],
				       [LastReceiptCost],
				       [LastReceiptDate],
				       [MinOrderQty],
				       [MaxOrderQty],
				       [OnOrderQty],
				       [UnitMeasureCode],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[ProductVendor] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ScrapReason table
-- Table Comment: Manufacturing failure reasons lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ScrapReasonID],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[ScrapReason]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ScrapReason table passing page index and page count parameters
-- Table Comment: Manufacturing failure reasons lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ScrapReasonID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ScrapReasonID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ScrapReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ScrapReasonID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ScrapReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ScrapReason table
-- Table Comment: Manufacturing failure reasons lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScrapReasonId" type="smallint" direction="Output" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ScrapReason]
					(
					[Name]
					,[ModifiedDate]
					)
				VALUES
					(
					@Name
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @ScrapReasonId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ScrapReason table
-- Table Comment: Manufacturing failure reasons lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ScrapReason]
				SET
					[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ScrapReasonID] = @ScrapReasonId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ScrapReason table
-- Table Comment: Manufacturing failure reasons lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ScrapReason] WITH (ROWLOCK) 
				WHERE
					[ScrapReasonID] = @ScrapReasonId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ScrapReason table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ScrapReasonID],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[ScrapReason]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_GetByScrapReasonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ScrapReason table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ScrapReasonID],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[ScrapReason]
				WHERE
					[ScrapReasonID] = @ScrapReasonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ScrapReason table passing nullable parameters
-- Table Comment: Manufacturing failure reasons lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ScrapReasonID]
	, [Name]
	, [ModifiedDate]
    FROM
	[Production].[ScrapReason]
    WHERE 
	 ([ScrapReasonID] = @ScrapReasonId OR @ScrapReasonId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ScrapReasonID]
	, [Name]
	, [ModifiedDate]
    FROM
	[Production].[ScrapReason]
    WHERE 
	 ([ScrapReasonID] = @ScrapReasonId AND @ScrapReasonId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ScrapReason_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ScrapReason table using a dynamically generated query.
-- Table Comment: Manufacturing failure reasons lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ScrapReasonID]
					, [Name]
					, [ModifiedDate]
					FROM [Production].[ScrapReason] {0}
				)
				SELECT
				       [ScrapReasonID],
				       [Name],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ScrapReason] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the UnitMeasure table
-- Table Comment: Unit of measure lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UnitMeasureCode],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[UnitMeasure]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the UnitMeasure table passing page index and page count parameters
-- Table Comment: Unit of measure lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UnitMeasureCode]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UnitMeasureCode]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[UnitMeasure]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UnitMeasureCode],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[UnitMeasure]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the UnitMeasure table
-- Table Comment: Unit of measure lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[UnitMeasure]
					(
					[UnitMeasureCode]
					,[Name]
					,[ModifiedDate]
					)
				VALUES
					(
					@UnitMeasureCode
					,@Name
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the UnitMeasure table
-- Table Comment: Unit of measure lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalUnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[UnitMeasure]
				SET
					[UnitMeasureCode] = @UnitMeasureCode
					,[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[UnitMeasureCode] = @OriginalUnitMeasureCode 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the UnitMeasure table
-- Table Comment: Unit of measure lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[UnitMeasure] WITH (ROWLOCK) 
				WHERE
					[UnitMeasureCode] = @UnitMeasureCode
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the UnitMeasure table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UnitMeasureCode],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[UnitMeasure]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_GetByUnitMeasureCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the UnitMeasure table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UnitMeasureCode],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[UnitMeasure]
				WHERE
					[UnitMeasureCode] = @UnitMeasureCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_GetByProductIdFromProductVendor" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[UnitMeasure].[UnitMeasureCode]
       ,Production.[UnitMeasure].[Name]
       ,Production.[UnitMeasure].[ModifiedDate]
  FROM Production.[UnitMeasure]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[ProductVendor] 
                WHERE Purchasing.[ProductVendor].[ProductID] = @ProductId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_GetByVendorIdFromProductVendor" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[UnitMeasure].[UnitMeasureCode]
       ,Production.[UnitMeasure].[Name]
       ,Production.[UnitMeasure].[ModifiedDate]
  FROM Production.[UnitMeasure]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[ProductVendor] 
                WHERE Purchasing.[ProductVendor].[VendorID] = @VendorId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the UnitMeasure table passing nullable parameters
-- Table Comment: Unit of measure lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UnitMeasureCode]
	, [Name]
	, [ModifiedDate]
    FROM
	[Production].[UnitMeasure]
    WHERE 
	 ([UnitMeasureCode] = @UnitMeasureCode OR @UnitMeasureCode IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UnitMeasureCode]
	, [Name]
	, [ModifiedDate]
    FROM
	[Production].[UnitMeasure]
    WHERE 
	 ([UnitMeasureCode] = @UnitMeasureCode AND @UnitMeasureCode is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_UnitMeasure_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the UnitMeasure table using a dynamically generated query.
-- Table Comment: Unit of measure lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [UnitMeasureCode]
					, [Name]
					, [ModifiedDate]
					FROM [Production].[UnitMeasure] {0}
				)
				SELECT
				       [UnitMeasureCode],
				       [Name],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[UnitMeasure] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Shift table
-- Table Comment: Work shift lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ShiftID],
					[Name],
					[StartTime],
					[EndTime],
					[ModifiedDate]
				FROM
					[HumanResources].[Shift]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Shift table passing page index and page count parameters
-- Table Comment: Work shift lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ShiftID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ShiftID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [StartTime]'
				SET @SQL = @SQL + ', [EndTime]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[Shift]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ShiftID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [StartTime],'
				SET @SQL = @SQL + ' [EndTime],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[Shift]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Shift table
-- Table Comment: Work shift lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShiftId" type="tinyint" direction="Output" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [HumanResources].[Shift]
					(
					[Name]
					,[StartTime]
					,[EndTime]
					,[ModifiedDate]
					)
				VALUES
					(
					@Name
					,@StartTime
					,@EndTime
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @ShiftId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Shift table
-- Table Comment: Work shift lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[HumanResources].[Shift]
				SET
					[Name] = @Name
					,[StartTime] = @StartTime
					,[EndTime] = @EndTime
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ShiftID] = @ShiftId 
				
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Shift table
-- Table Comment: Work shift lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [HumanResources].[Shift] WITH (ROWLOCK) 
				WHERE
					[ShiftID] = @ShiftId
					
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Shift table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShiftID],
					[Name],
					[StartTime],
					[EndTime],
					[ModifiedDate]
				FROM
					[HumanResources].[Shift]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_GetByStartTimeEndTime" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Shift table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShiftID],
					[Name],
					[StartTime],
					[EndTime],
					[ModifiedDate]
				FROM
					[HumanResources].[Shift]
				WHERE
					[StartTime] = @StartTime
					AND [EndTime] = @EndTime
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_GetByShiftId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Shift table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShiftID],
					[Name],
					[StartTime],
					[EndTime],
					[ModifiedDate]
				FROM
					[HumanResources].[Shift]
				WHERE
					[ShiftID] = @ShiftId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Shift table passing nullable parameters
-- Table Comment: Work shift lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ShiftID]
	, [Name]
	, [StartTime]
	, [EndTime]
	, [ModifiedDate]
    FROM
	[HumanResources].[Shift]
    WHERE 
	 ([ShiftID] = @ShiftId OR @ShiftId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([StartTime] = @StartTime OR @StartTime IS NULL)
	AND ([EndTime] = @EndTime OR @EndTime IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ShiftID]
	, [Name]
	, [StartTime]
	, [EndTime]
	, [ModifiedDate]
    FROM
	[HumanResources].[Shift]
    WHERE 
	 ([ShiftID] = @ShiftId AND @ShiftId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([StartTime] = @StartTime AND @StartTime is not null)
	OR ([EndTime] = @EndTime AND @EndTime is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="HumanResources" name="usp_adwTiers_Shift_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Shift table using a dynamically generated query.
-- Table Comment: Work shift lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ShiftID]
					, [Name]
					, [StartTime]
					, [EndTime]
					, [ModifiedDate]
					FROM [HumanResources].[Shift] {0}
				)
				SELECT
				       [ShiftID],
				       [Name],
				       [StartTime],
				       [EndTime],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[Shift] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the TransactionHistoryArchive table
-- Table Comment: Transactions for previous years.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistoryArchive]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TransactionHistoryArchive table passing page index and page count parameters
-- Table Comment: Transactions for previous years.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TransactionID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TransactionID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ReferenceOrderID]'
				SET @SQL = @SQL + ', [ReferenceOrderLineID]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionType]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [ActualCost]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[TransactionHistoryArchive]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TransactionID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ReferenceOrderID],'
				SET @SQL = @SQL + ' [ReferenceOrderLineID],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionType],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [ActualCost],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[TransactionHistoryArchive]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the TransactionHistoryArchive table
-- Table Comment: Transactions for previous years.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[TransactionHistoryArchive]
					(
					[TransactionID]
					,[ProductID]
					,[ReferenceOrderID]
					,[ReferenceOrderLineID]
					,[TransactionDate]
					,[TransactionType]
					,[Quantity]
					,[ActualCost]
					,[ModifiedDate]
					)
				VALUES
					(
					@TransactionId
					,@ProductId
					,@ReferenceOrderId
					,@ReferenceOrderLineId
					,@TransactionDate
					,@TransactionType
					,@Quantity
					,@ActualCost
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the TransactionHistoryArchive table
-- Table Comment: Transactions for previous years.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalTransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[TransactionHistoryArchive]
				SET
					[TransactionID] = @TransactionId
					,[ProductID] = @ProductId
					,[ReferenceOrderID] = @ReferenceOrderId
					,[ReferenceOrderLineID] = @ReferenceOrderLineId
					,[TransactionDate] = @TransactionDate
					,[TransactionType] = @TransactionType
					,[Quantity] = @Quantity
					,[ActualCost] = @ActualCost
					,[ModifiedDate] = @ModifiedDate
				WHERE
[TransactionID] = @OriginalTransactionId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the TransactionHistoryArchive table
-- Table Comment: Transactions for previous years.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[TransactionHistoryArchive] WITH (ROWLOCK) 
				WHERE
					[TransactionID] = @TransactionId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TransactionHistoryArchive table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistoryArchive]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_GetByReferenceOrderIdReferenceOrderLineId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TransactionHistoryArchive table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistoryArchive]
				WHERE
					[ReferenceOrderID] = @ReferenceOrderId
					AND [ReferenceOrderLineID] = @ReferenceOrderLineId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_GetByTransactionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TransactionHistoryArchive table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistoryArchive]
				WHERE
					[TransactionID] = @TransactionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the TransactionHistoryArchive table passing nullable parameters
-- Table Comment: Transactions for previous years.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TransactionType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TransactionID]
	, [ProductID]
	, [ReferenceOrderID]
	, [ReferenceOrderLineID]
	, [TransactionDate]
	, [TransactionType]
	, [Quantity]
	, [ActualCost]
	, [ModifiedDate]
    FROM
	[Production].[TransactionHistoryArchive]
    WHERE 
	 ([TransactionID] = @TransactionId OR @TransactionId IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([ReferenceOrderID] = @ReferenceOrderId OR @ReferenceOrderId IS NULL)
	AND ([ReferenceOrderLineID] = @ReferenceOrderLineId OR @ReferenceOrderLineId IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionType] = @TransactionType OR @TransactionType IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([ActualCost] = @ActualCost OR @ActualCost IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TransactionID]
	, [ProductID]
	, [ReferenceOrderID]
	, [ReferenceOrderLineID]
	, [TransactionDate]
	, [TransactionType]
	, [Quantity]
	, [ActualCost]
	, [ModifiedDate]
    FROM
	[Production].[TransactionHistoryArchive]
    WHERE 
	 ([TransactionID] = @TransactionId AND @TransactionId is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([ReferenceOrderID] = @ReferenceOrderId AND @ReferenceOrderId is not null)
	OR ([ReferenceOrderLineID] = @ReferenceOrderLineId AND @ReferenceOrderLineId is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionType] = @TransactionType AND @TransactionType is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([ActualCost] = @ActualCost AND @ActualCost is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistoryArchive_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TransactionHistoryArchive table using a dynamically generated query.
-- Table Comment: Transactions for previous years.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [TransactionID]
					, [ProductID]
					, [ReferenceOrderID]
					, [ReferenceOrderLineID]
					, [TransactionDate]
					, [TransactionType]
					, [Quantity]
					, [ActualCost]
					, [ModifiedDate]
					FROM [Production].[TransactionHistoryArchive] {0}
				)
				SELECT
				       [TransactionID],
				       [ProductID],
				       [ReferenceOrderID],
				       [ReferenceOrderLineID],
				       [TransactionDate],
				       [TransactionType],
				       [Quantity],
				       [ActualCost],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[TransactionHistoryArchive] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Vendor table
-- Table Comment: Companies from whom Adventure Works Cycles purchases parts or other goods.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[VendorID],
					[AccountNumber],
					[Name],
					[CreditRating],
					[PreferredVendorStatus],
					[ActiveFlag],
					[PurchasingWebServiceURL],
					[ModifiedDate]
				FROM
					[Purchasing].[Vendor]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Vendor table passing page index and page count parameters
-- Table Comment: Companies from whom Adventure Works Cycles purchases parts or other goods.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[VendorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [VendorID]'
				SET @SQL = @SQL + ', [AccountNumber]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CreditRating]'
				SET @SQL = @SQL + ', [PreferredVendorStatus]'
				SET @SQL = @SQL + ', [ActiveFlag]'
				SET @SQL = @SQL + ', [PurchasingWebServiceURL]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Purchasing].[Vendor]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [VendorID],'
				SET @SQL = @SQL + ' [AccountNumber],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CreditRating],'
				SET @SQL = @SQL + ' [PreferredVendorStatus],'
				SET @SQL = @SQL + ' [ActiveFlag],'
				SET @SQL = @SQL + ' [PurchasingWebServiceURL],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[Vendor]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Vendor table
-- Table Comment: Companies from whom Adventure Works Cycles purchases parts or other goods.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccountNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreditRating" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@PreferredVendorStatus" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ActiveFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PurchasingWebServiceUrl" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Purchasing].[Vendor]
					(
					[AccountNumber]
					,[Name]
					,[CreditRating]
					,[PreferredVendorStatus]
					,[ActiveFlag]
					,[PurchasingWebServiceURL]
					,[ModifiedDate]
					)
				VALUES
					(
					@AccountNumber
					,@Name
					,@CreditRating
					,@PreferredVendorStatus
					,@ActiveFlag
					,@PurchasingWebServiceUrl
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @VendorId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Vendor table
-- Table Comment: Companies from whom Adventure Works Cycles purchases parts or other goods.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccountNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreditRating" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@PreferredVendorStatus" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ActiveFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@PurchasingWebServiceUrl" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Purchasing].[Vendor]
				SET
					[AccountNumber] = @AccountNumber
					,[Name] = @Name
					,[CreditRating] = @CreditRating
					,[PreferredVendorStatus] = @PreferredVendorStatus
					,[ActiveFlag] = @ActiveFlag
					,[PurchasingWebServiceURL] = @PurchasingWebServiceUrl
					,[ModifiedDate] = @ModifiedDate
				WHERE
[VendorID] = @VendorId 
				
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Vendor table
-- Table Comment: Companies from whom Adventure Works Cycles purchases parts or other goods.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Purchasing].[Vendor] WITH (ROWLOCK) 
				WHERE
					[VendorID] = @VendorId
					
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_GetByAccountNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Vendor table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccountNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[VendorID],
					[AccountNumber],
					[Name],
					[CreditRating],
					[PreferredVendorStatus],
					[ActiveFlag],
					[PurchasingWebServiceURL],
					[ModifiedDate]
				FROM
					[Purchasing].[Vendor]
				WHERE
					[AccountNumber] = @AccountNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_GetByVendorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Vendor table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[VendorID],
					[AccountNumber],
					[Name],
					[CreditRating],
					[PreferredVendorStatus],
					[ActiveFlag],
					[PurchasingWebServiceURL],
					[ModifiedDate]
				FROM
					[Purchasing].[Vendor]
				WHERE
					[VendorID] = @VendorId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_GetByProductIdFromProductVendor" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Purchasing.[Vendor].[VendorID]
       ,Purchasing.[Vendor].[AccountNumber]
       ,Purchasing.[Vendor].[Name]
       ,Purchasing.[Vendor].[CreditRating]
       ,Purchasing.[Vendor].[PreferredVendorStatus]
       ,Purchasing.[Vendor].[ActiveFlag]
       ,Purchasing.[Vendor].[PurchasingWebServiceURL]
       ,Purchasing.[Vendor].[ModifiedDate]
  FROM Purchasing.[Vendor]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[ProductVendor] 
                WHERE Purchasing.[ProductVendor].[ProductID] = @ProductId
                  AND Purchasing.[ProductVendor].[VendorID] = Purchasing.[Vendor].[VendorID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_GetByAddressIdFromVendorAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Purchasing.[Vendor].[VendorID]
       ,Purchasing.[Vendor].[AccountNumber]
       ,Purchasing.[Vendor].[Name]
       ,Purchasing.[Vendor].[CreditRating]
       ,Purchasing.[Vendor].[PreferredVendorStatus]
       ,Purchasing.[Vendor].[ActiveFlag]
       ,Purchasing.[Vendor].[PurchasingWebServiceURL]
       ,Purchasing.[Vendor].[ModifiedDate]
  FROM Purchasing.[Vendor]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorAddress] 
                WHERE Purchasing.[VendorAddress].[AddressID] = @AddressId
                  AND Purchasing.[VendorAddress].[VendorID] = Purchasing.[Vendor].[VendorID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_GetByContactIdFromVendorContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Purchasing.[Vendor].[VendorID]
       ,Purchasing.[Vendor].[AccountNumber]
       ,Purchasing.[Vendor].[Name]
       ,Purchasing.[Vendor].[CreditRating]
       ,Purchasing.[Vendor].[PreferredVendorStatus]
       ,Purchasing.[Vendor].[ActiveFlag]
       ,Purchasing.[Vendor].[PurchasingWebServiceURL]
       ,Purchasing.[Vendor].[ModifiedDate]
  FROM Purchasing.[Vendor]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorContact] 
                WHERE Purchasing.[VendorContact].[ContactID] = @ContactId
                  AND Purchasing.[VendorContact].[VendorID] = Purchasing.[Vendor].[VendorID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Vendor table passing nullable parameters
-- Table Comment: Companies from whom Adventure Works Cycles purchases parts or other goods.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AccountNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreditRating" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@PreferredVendorStatus" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ActiveFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PurchasingWebServiceUrl" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [VendorID]
	, [AccountNumber]
	, [Name]
	, [CreditRating]
	, [PreferredVendorStatus]
	, [ActiveFlag]
	, [PurchasingWebServiceURL]
	, [ModifiedDate]
    FROM
	[Purchasing].[Vendor]
    WHERE 
	 ([VendorID] = @VendorId OR @VendorId IS NULL)
	AND ([AccountNumber] = @AccountNumber OR @AccountNumber IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([CreditRating] = @CreditRating OR @CreditRating IS NULL)
	AND ([PreferredVendorStatus] = @PreferredVendorStatus OR @PreferredVendorStatus IS NULL)
	AND ([ActiveFlag] = @ActiveFlag OR @ActiveFlag IS NULL)
	AND ([PurchasingWebServiceURL] = @PurchasingWebServiceUrl OR @PurchasingWebServiceUrl IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [VendorID]
	, [AccountNumber]
	, [Name]
	, [CreditRating]
	, [PreferredVendorStatus]
	, [ActiveFlag]
	, [PurchasingWebServiceURL]
	, [ModifiedDate]
    FROM
	[Purchasing].[Vendor]
    WHERE 
	 ([VendorID] = @VendorId AND @VendorId is not null)
	OR ([AccountNumber] = @AccountNumber AND @AccountNumber is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([CreditRating] = @CreditRating AND @CreditRating is not null)
	OR ([PreferredVendorStatus] = @PreferredVendorStatus AND @PreferredVendorStatus is not null)
	OR ([ActiveFlag] = @ActiveFlag AND @ActiveFlag is not null)
	OR ([PurchasingWebServiceURL] = @PurchasingWebServiceUrl AND @PurchasingWebServiceUrl is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Purchasing" name="usp_adwTiers_Vendor_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Vendor table using a dynamically generated query.
-- Table Comment: Companies from whom Adventure Works Cycles purchases parts or other goods.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [VendorID]
					, [AccountNumber]
					, [Name]
					, [CreditRating]
					, [PreferredVendorStatus]
					, [ActiveFlag]
					, [PurchasingWebServiceURL]
					, [ModifiedDate]
					FROM [Purchasing].[Vendor] {0}
				)
				SELECT
				       [VendorID],
				       [AccountNumber],
				       [Name],
				       [CreditRating],
				       [PreferredVendorStatus],
				       [ActiveFlag],
				       [PurchasingWebServiceURL],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[Vendor] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_Address_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Address table
-- Table Comment: Street address information for customers, employees, and vendors.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[AddressID],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceID],
					[PostalCode],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Address]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_Address_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Address table passing page index and page count parameters
-- Table Comment: Street address information for customers, employees, and vendors.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[AddressID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [AddressID]'
				SET @SQL = @SQL + ', [AddressLine1]'
				SET @SQL = @SQL + ', [AddressLine2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [StateProvinceID]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Person].[Address]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [AddressID],'
				SET @SQL = @SQL + ' [AddressLine1],'
				SET @SQL = @SQL + ' [AddressLine2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [StateProvinceID],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[Address]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_Address_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Address table
-- Table Comment: Street address information for customers, employees, and vendors.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressLine1" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@AddressLine2" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Person].[Address]
					(
					[AddressLine1]
					,[AddressLine2]
					,[City]
					,[StateProvinceID]
					,[PostalCode]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@AddressLine1
					,@AddressLine2
					,@City
					,@StateProvinceId
					,@PostalCode
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @AddressId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Address table
-- Table Comment: Street address information for customers, employees, and vendors.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressLine1" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@AddressLine2" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Person].[Address]
				SET
					[AddressLine1] = @AddressLine1
					,[AddressLine2] = @AddressLine2
					,[City] = @City
					,[StateProvinceID] = @StateProvinceId
					,[PostalCode] = @PostalCode
					,[ModifiedDate] = @ModifiedDate
				WHERE
[AddressID] = @AddressId 
				
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Address table
-- Table Comment: Street address information for customers, employees, and vendors.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Person].[Address] WITH (ROWLOCK) 
				WHERE
					[AddressID] = @AddressId
					
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Address table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AddressID],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceID],
					[PostalCode],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Address]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_GetByAddressLine1AddressLine2CityStateProvinceIdPostalCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Address table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressLine1" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@AddressLine2" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AddressID],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceID],
					[PostalCode],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Address]
				WHERE
					[AddressLine1] = @AddressLine1
					AND [AddressLine2] = @AddressLine2
					AND [City] = @City
					AND [StateProvinceID] = @StateProvinceId
					AND [PostalCode] = @PostalCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_GetByStateProvinceId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Address table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AddressID],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceID],
					[PostalCode],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Address]
				WHERE
					[StateProvinceID] = @StateProvinceId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_GetByAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Address table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AddressID],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceID],
					[PostalCode],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Address]
				WHERE
					[AddressID] = @AddressId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_GetByCustomerIdFromCustomerAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[Address].[AddressID]
       ,Person.[Address].[AddressLine1]
       ,Person.[Address].[AddressLine2]
       ,Person.[Address].[City]
       ,Person.[Address].[StateProvinceID]
       ,Person.[Address].[PostalCode]
       ,Person.[Address].[rowguid]
       ,Person.[Address].[ModifiedDate]
  FROM Person.[Address]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[CustomerAddress] 
                WHERE Sales.[CustomerAddress].[CustomerID] = @CustomerId
                  AND Sales.[CustomerAddress].[AddressID] = Person.[Address].[AddressID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_GetByEmployeeIdFromEmployeeAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[Address].[AddressID]
       ,Person.[Address].[AddressLine1]
       ,Person.[Address].[AddressLine2]
       ,Person.[Address].[City]
       ,Person.[Address].[StateProvinceID]
       ,Person.[Address].[PostalCode]
       ,Person.[Address].[rowguid]
       ,Person.[Address].[ModifiedDate]
  FROM Person.[Address]
 WHERE EXISTS (SELECT 1
                 FROM HumanResources.[EmployeeAddress] 
                WHERE HumanResources.[EmployeeAddress].[EmployeeID] = @EmployeeId
                  AND HumanResources.[EmployeeAddress].[AddressID] = Person.[Address].[AddressID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_GetByVendorIdFromVendorAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[Address].[AddressID]
       ,Person.[Address].[AddressLine1]
       ,Person.[Address].[AddressLine2]
       ,Person.[Address].[City]
       ,Person.[Address].[StateProvinceID]
       ,Person.[Address].[PostalCode]
       ,Person.[Address].[rowguid]
       ,Person.[Address].[ModifiedDate]
  FROM Person.[Address]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorAddress] 
                WHERE Purchasing.[VendorAddress].[VendorID] = @VendorId
                  AND Purchasing.[VendorAddress].[AddressID] = Person.[Address].[AddressID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Address_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Address table passing nullable parameters
-- Table Comment: Street address information for customers, employees, and vendors.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressLine1" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault="null"/>
				<parameter name="@AddressLine2" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault="null"/>
				<parameter name="@City" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [AddressID]
	, [AddressLine1]
	, [AddressLine2]
	, [City]
	, [StateProvinceID]
	, [PostalCode]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[Address]
    WHERE 
	 ([AddressID] = @AddressId OR @AddressId IS NULL)
	AND ([AddressLine1] = @AddressLine1 OR @AddressLine1 IS NULL)
	AND ([AddressLine2] = @AddressLine2 OR @AddressLine2 IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([StateProvinceID] = @StateProvinceId OR @StateProvinceId IS NULL)
	AND ([PostalCode] = @PostalCode OR @PostalCode IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [AddressID]
	, [AddressLine1]
	, [AddressLine2]
	, [City]
	, [StateProvinceID]
	, [PostalCode]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[Address]
    WHERE 
	 ([AddressID] = @AddressId AND @AddressId is not null)
	OR ([AddressLine1] = @AddressLine1 AND @AddressLine1 is not null)
	OR ([AddressLine2] = @AddressLine2 AND @AddressLine2 is not null)
	OR ([City] = @City AND @City is not null)
	OR ([StateProvinceID] = @StateProvinceId AND @StateProvinceId is not null)
	OR ([PostalCode] = @PostalCode AND @PostalCode is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Person" name="usp_adwTiers_Address_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Address table using a dynamically generated query.
-- Table Comment: Street address information for customers, employees, and vendors.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [AddressID]
					, [AddressLine1]
					, [AddressLine2]
					, [City]
					, [StateProvinceID]
					, [PostalCode]
					, [rowguid]
					, [ModifiedDate]
					FROM [Person].[Address] {0}
				)
				SELECT
				       [AddressID],
				       [AddressLine1],
				       [AddressLine2],
				       [City],
				       [StateProvinceID],
				       [PostalCode],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[Address] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the WorkOrder table
-- Table Comment: Manufacturing work orders.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkOrderID],
					[ProductID],
					[OrderQty],
					[StockedQty],
					[ScrappedQty],
					[StartDate],
					[EndDate],
					[DueDate],
					[ScrapReasonID],
					[ModifiedDate]
				FROM
					[Production].[WorkOrder]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the WorkOrder table passing page index and page count parameters
-- Table Comment: Manufacturing work orders.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkOrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkOrderID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [OrderQty]'
				SET @SQL = @SQL + ', [StockedQty]'
				SET @SQL = @SQL + ', [ScrappedQty]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [DueDate]'
				SET @SQL = @SQL + ', [ScrapReasonID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[WorkOrder]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkOrderID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [OrderQty],'
				SET @SQL = @SQL + ' [StockedQty],'
				SET @SQL = @SQL + ' [ScrappedQty],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [DueDate],'
				SET @SQL = @SQL + ' [ScrapReasonID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[WorkOrder]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the WorkOrder table
-- Table Comment: Manufacturing work orders.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StockedQty" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ScrappedQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[WorkOrder]
					(
					[ProductID]
					,[OrderQty]
					,[ScrappedQty]
					,[StartDate]
					,[EndDate]
					,[DueDate]
					,[ScrapReasonID]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@OrderQty
					,@ScrappedQty
					,@StartDate
					,@EndDate
					,@DueDate
					,@ScrapReasonId
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @WorkOrderId = SCOPE_IDENTITY()
									
				-- Select computed columns into output parameters
				SELECT
 @StockedQty = [StockedQty]
				FROM
					[Production].[WorkOrder]
				WHERE
[WorkOrderID] = @WorkOrderId 
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the WorkOrder table
-- Table Comment: Manufacturing work orders.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StockedQty" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ScrappedQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[WorkOrder]
				SET
					[ProductID] = @ProductId
					,[OrderQty] = @OrderQty
					,[ScrappedQty] = @ScrappedQty
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[DueDate] = @DueDate
					,[ScrapReasonID] = @ScrapReasonId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[WorkOrderID] = @WorkOrderId 
				
				
				-- Select computed columns into output parameters
				SELECT
 @StockedQty = [StockedQty]
				FROM
					[Production].[WorkOrder]
				WHERE
[WorkOrderID] = @WorkOrderId 
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the WorkOrder table
-- Table Comment: Manufacturing work orders.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[WorkOrder] WITH (ROWLOCK) 
				WHERE
					[WorkOrderID] = @WorkOrderId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the WorkOrder table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[WorkOrderID],
					[ProductID],
					[OrderQty],
					[StockedQty],
					[ScrappedQty],
					[StartDate],
					[EndDate],
					[DueDate],
					[ScrapReasonID],
					[ModifiedDate]
				FROM
					[Production].[WorkOrder]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_GetByScrapReasonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the WorkOrder table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[WorkOrderID],
					[ProductID],
					[OrderQty],
					[StockedQty],
					[ScrappedQty],
					[StartDate],
					[EndDate],
					[DueDate],
					[ScrapReasonID],
					[ModifiedDate]
				FROM
					[Production].[WorkOrder]
				WHERE
					[ScrapReasonID] = @ScrapReasonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_GetByWorkOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the WorkOrder table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[WorkOrderID],
					[ProductID],
					[OrderQty],
					[StockedQty],
					[ScrappedQty],
					[StartDate],
					[EndDate],
					[DueDate],
					[ScrapReasonID],
					[ModifiedDate]
				FROM
					[Production].[WorkOrder]
				WHERE
					[WorkOrderID] = @WorkOrderId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the WorkOrder table passing nullable parameters
-- Table Comment: Manufacturing work orders.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@OrderQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StockedQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ScrappedQty" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@DueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ScrapReasonId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [WorkOrderID]
	, [ProductID]
	, [OrderQty]
	, [StockedQty]
	, [ScrappedQty]
	, [StartDate]
	, [EndDate]
	, [DueDate]
	, [ScrapReasonID]
	, [ModifiedDate]
    FROM
	[Production].[WorkOrder]
    WHERE 
	 ([WorkOrderID] = @WorkOrderId OR @WorkOrderId IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([OrderQty] = @OrderQty OR @OrderQty IS NULL)
	AND ([StockedQty] = @StockedQty OR @StockedQty IS NULL)
	AND ([ScrappedQty] = @ScrappedQty OR @ScrappedQty IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([DueDate] = @DueDate OR @DueDate IS NULL)
	AND ([ScrapReasonID] = @ScrapReasonId OR @ScrapReasonId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [WorkOrderID]
	, [ProductID]
	, [OrderQty]
	, [StockedQty]
	, [ScrappedQty]
	, [StartDate]
	, [EndDate]
	, [DueDate]
	, [ScrapReasonID]
	, [ModifiedDate]
    FROM
	[Production].[WorkOrder]
    WHERE 
	 ([WorkOrderID] = @WorkOrderId AND @WorkOrderId is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([OrderQty] = @OrderQty AND @OrderQty is not null)
	OR ([StockedQty] = @StockedQty AND @StockedQty is not null)
	OR ([ScrappedQty] = @ScrappedQty AND @ScrappedQty is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([DueDate] = @DueDate AND @DueDate is not null)
	OR ([ScrapReasonID] = @ScrapReasonId AND @ScrapReasonId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_WorkOrder_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the WorkOrder table using a dynamically generated query.
-- Table Comment: Manufacturing work orders.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [WorkOrderID]
					, [ProductID]
					, [OrderQty]
					, [StockedQty]
					, [ScrappedQty]
					, [StartDate]
					, [EndDate]
					, [DueDate]
					, [ScrapReasonID]
					, [ModifiedDate]
					FROM [Production].[WorkOrder] {0}
				)
				SELECT
				       [WorkOrderID],
				       [ProductID],
				       [OrderQty],
				       [StockedQty],
				       [ScrappedQty],
				       [StartDate],
				       [EndDate],
				       [DueDate],
				       [ScrapReasonID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[WorkOrder] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the VendorAddress table
-- Table Comment: Cross-reference mapping vendors and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[VendorID],
					[AddressID],
					[AddressTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorAddress]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the VendorAddress table passing page index and page count parameters
-- Table Comment: Cross-reference mapping vendors and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[VendorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [VendorID]'
				SET @SQL = @SQL + ', [AddressID]'
				SET @SQL = @SQL + ', [AddressTypeID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Purchasing].[VendorAddress]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [VendorID],'
				SET @SQL = @SQL + ' [AddressID],'
				SET @SQL = @SQL + ' [AddressTypeID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[VendorAddress]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the VendorAddress table
-- Table Comment: Cross-reference mapping vendors and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Purchasing].[VendorAddress]
					(
					[VendorID]
					,[AddressID]
					,[AddressTypeID]
					,[ModifiedDate]
					)
				VALUES
					(
					@VendorId
					,@AddressId
					,@AddressTypeId
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the VendorAddress table
-- Table Comment: Cross-reference mapping vendors and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalVendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Purchasing].[VendorAddress]
				SET
					[VendorID] = @VendorId
					,[AddressID] = @AddressId
					,[AddressTypeID] = @AddressTypeId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[VendorID] = @OriginalVendorId 
AND [AddressID] = @OriginalAddressId 
				
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the VendorAddress table
-- Table Comment: Cross-reference mapping vendors and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Purchasing].[VendorAddress] WITH (ROWLOCK) 
				WHERE
					[VendorID] = @VendorId
					AND [AddressID] = @AddressId
					
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_GetByAddressTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorAddress table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[VendorID],
					[AddressID],
					[AddressTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorAddress]
				WHERE
					[AddressTypeID] = @AddressTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_GetByVendorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorAddress table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[VendorID],
					[AddressID],
					[AddressTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorAddress]
				WHERE
					[VendorID] = @VendorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_GetByAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorAddress table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[VendorID],
					[AddressID],
					[AddressTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorAddress]
				WHERE
					[AddressID] = @AddressId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_GetByVendorIdAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorAddress table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[VendorID],
					[AddressID],
					[AddressTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorAddress]
				WHERE
					[VendorID] = @VendorId
					AND [AddressID] = @AddressId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the VendorAddress table passing nullable parameters
-- Table Comment: Cross-reference mapping vendors and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [VendorID]
	, [AddressID]
	, [AddressTypeID]
	, [ModifiedDate]
    FROM
	[Purchasing].[VendorAddress]
    WHERE 
	 ([VendorID] = @VendorId OR @VendorId IS NULL)
	AND ([AddressID] = @AddressId OR @AddressId IS NULL)
	AND ([AddressTypeID] = @AddressTypeId OR @AddressTypeId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [VendorID]
	, [AddressID]
	, [AddressTypeID]
	, [ModifiedDate]
    FROM
	[Purchasing].[VendorAddress]
    WHERE 
	 ([VendorID] = @VendorId AND @VendorId is not null)
	OR ([AddressID] = @AddressId AND @AddressId is not null)
	OR ([AddressTypeID] = @AddressTypeId AND @AddressTypeId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorAddress_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the VendorAddress table using a dynamically generated query.
-- Table Comment: Cross-reference mapping vendors and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [VendorID]
					, [AddressID]
					, [AddressTypeID]
					, [ModifiedDate]
					FROM [Purchasing].[VendorAddress] {0}
				)
				SELECT
				       [VendorID],
				       [AddressID],
				       [AddressTypeID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[VendorAddress] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the TransactionHistory table
-- Table Comment: Record of each purchase order, sales order, or work order transaction year to date.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TransactionHistory table passing page index and page count parameters
-- Table Comment: Record of each purchase order, sales order, or work order transaction year to date.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TransactionID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TransactionID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ReferenceOrderID]'
				SET @SQL = @SQL + ', [ReferenceOrderLineID]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionType]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [ActualCost]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[TransactionHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TransactionID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ReferenceOrderID],'
				SET @SQL = @SQL + ' [ReferenceOrderLineID],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionType],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [ActualCost],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[TransactionHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the TransactionHistory table
-- Table Comment: Record of each purchase order, sales order, or work order transaction year to date.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[TransactionHistory]
					(
					[ProductID]
					,[ReferenceOrderID]
					,[ReferenceOrderLineID]
					,[TransactionDate]
					,[TransactionType]
					,[Quantity]
					,[ActualCost]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@ReferenceOrderId
					,@ReferenceOrderLineId
					,@TransactionDate
					,@TransactionType
					,@Quantity
					,@ActualCost
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @TransactionId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the TransactionHistory table
-- Table Comment: Record of each purchase order, sales order, or work order transaction year to date.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TransactionType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[TransactionHistory]
				SET
					[ProductID] = @ProductId
					,[ReferenceOrderID] = @ReferenceOrderId
					,[ReferenceOrderLineID] = @ReferenceOrderLineId
					,[TransactionDate] = @TransactionDate
					,[TransactionType] = @TransactionType
					,[Quantity] = @Quantity
					,[ActualCost] = @ActualCost
					,[ModifiedDate] = @ModifiedDate
				WHERE
[TransactionID] = @TransactionId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the TransactionHistory table
-- Table Comment: Record of each purchase order, sales order, or work order transaction year to date.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[TransactionHistory] WITH (ROWLOCK) 
				WHERE
					[TransactionID] = @TransactionId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TransactionHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistory]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_GetByReferenceOrderIdReferenceOrderLineId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TransactionHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistory]
				WHERE
					[ReferenceOrderID] = @ReferenceOrderId
					AND [ReferenceOrderLineID] = @ReferenceOrderLineId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_GetByTransactionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TransactionHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TransactionID],
					[ProductID],
					[ReferenceOrderID],
					[ReferenceOrderLineID],
					[TransactionDate],
					[TransactionType],
					[Quantity],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[TransactionHistory]
				WHERE
					[TransactionID] = @TransactionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the TransactionHistory table passing nullable parameters
-- Table Comment: Record of each purchase order, sales order, or work order transaction year to date.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TransactionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReferenceOrderLineId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TransactionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TransactionType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TransactionID]
	, [ProductID]
	, [ReferenceOrderID]
	, [ReferenceOrderLineID]
	, [TransactionDate]
	, [TransactionType]
	, [Quantity]
	, [ActualCost]
	, [ModifiedDate]
    FROM
	[Production].[TransactionHistory]
    WHERE 
	 ([TransactionID] = @TransactionId OR @TransactionId IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([ReferenceOrderID] = @ReferenceOrderId OR @ReferenceOrderId IS NULL)
	AND ([ReferenceOrderLineID] = @ReferenceOrderLineId OR @ReferenceOrderLineId IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionType] = @TransactionType OR @TransactionType IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([ActualCost] = @ActualCost OR @ActualCost IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TransactionID]
	, [ProductID]
	, [ReferenceOrderID]
	, [ReferenceOrderLineID]
	, [TransactionDate]
	, [TransactionType]
	, [Quantity]
	, [ActualCost]
	, [ModifiedDate]
    FROM
	[Production].[TransactionHistory]
    WHERE 
	 ([TransactionID] = @TransactionId AND @TransactionId is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([ReferenceOrderID] = @ReferenceOrderId AND @ReferenceOrderId is not null)
	OR ([ReferenceOrderLineID] = @ReferenceOrderLineId AND @ReferenceOrderLineId is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionType] = @TransactionType AND @TransactionType is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([ActualCost] = @ActualCost AND @ActualCost is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_TransactionHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TransactionHistory table using a dynamically generated query.
-- Table Comment: Record of each purchase order, sales order, or work order transaction year to date.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [TransactionID]
					, [ProductID]
					, [ReferenceOrderID]
					, [ReferenceOrderLineID]
					, [TransactionDate]
					, [TransactionType]
					, [Quantity]
					, [ActualCost]
					, [ModifiedDate]
					FROM [Production].[TransactionHistory] {0}
				)
				SELECT
				       [TransactionID],
				       [ProductID],
				       [ReferenceOrderID],
				       [ReferenceOrderLineID],
				       [TransactionDate],
				       [TransactionType],
				       [Quantity],
				       [ActualCost],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[TransactionHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the VendorContact table
-- Table Comment: Cross-reference table mapping vendors and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[VendorID],
					[ContactID],
					[ContactTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorContact]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the VendorContact table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping vendors and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[VendorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [VendorID]'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [ContactTypeID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Purchasing].[VendorContact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [VendorID],'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [ContactTypeID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[VendorContact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the VendorContact table
-- Table Comment: Cross-reference table mapping vendors and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Purchasing].[VendorContact]
					(
					[VendorID]
					,[ContactID]
					,[ContactTypeID]
					,[ModifiedDate]
					)
				VALUES
					(
					@VendorId
					,@ContactId
					,@ContactTypeId
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the VendorContact table
-- Table Comment: Cross-reference table mapping vendors and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalVendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Purchasing].[VendorContact]
				SET
					[VendorID] = @VendorId
					,[ContactID] = @ContactId
					,[ContactTypeID] = @ContactTypeId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[VendorID] = @OriginalVendorId 
AND [ContactID] = @OriginalContactId 
				
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the VendorContact table
-- Table Comment: Cross-reference table mapping vendors and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Purchasing].[VendorContact] WITH (ROWLOCK) 
				WHERE
					[VendorID] = @VendorId
					AND [ContactID] = @ContactId
					
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_GetByVendorId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorContact table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[VendorID],
					[ContactID],
					[ContactTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorContact]
				WHERE
					[VendorID] = @VendorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_GetByContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorContact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[VendorID],
					[ContactID],
					[ContactTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorContact]
				WHERE
					[ContactID] = @ContactId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_GetByContactTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorContact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[VendorID],
					[ContactID],
					[ContactTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorContact]
				WHERE
					[ContactTypeID] = @ContactTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_GetByVendorIdContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the VendorContact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[VendorID],
					[ContactID],
					[ContactTypeID],
					[ModifiedDate]
				FROM
					[Purchasing].[VendorContact]
				WHERE
					[VendorID] = @VendorId
					AND [ContactID] = @ContactId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the VendorContact table passing nullable parameters
-- Table Comment: Cross-reference table mapping vendors and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [VendorID]
	, [ContactID]
	, [ContactTypeID]
	, [ModifiedDate]
    FROM
	[Purchasing].[VendorContact]
    WHERE 
	 ([VendorID] = @VendorId OR @VendorId IS NULL)
	AND ([ContactID] = @ContactId OR @ContactId IS NULL)
	AND ([ContactTypeID] = @ContactTypeId OR @ContactTypeId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [VendorID]
	, [ContactID]
	, [ContactTypeID]
	, [ModifiedDate]
    FROM
	[Purchasing].[VendorContact]
    WHERE 
	 ([VendorID] = @VendorId AND @VendorId is not null)
	OR ([ContactID] = @ContactId AND @ContactId is not null)
	OR ([ContactTypeID] = @ContactTypeId AND @ContactTypeId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Purchasing" name="usp_adwTiers_VendorContact_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the VendorContact table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping vendors and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [VendorID]
					, [ContactID]
					, [ContactTypeID]
					, [ModifiedDate]
					FROM [Purchasing].[VendorContact] {0}
				)
				SELECT
				       [VendorID],
				       [ContactID],
				       [ContactTypeID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[VendorContact] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the TimestampPK table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TimestampPK],
					[SomeText]
				FROM
					[Test].[TimestampPK]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TimestampPK table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TimestampPK]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TimestampPK]'
				SET @SQL = @SQL + ', [SomeText]'
				SET @SQL = @SQL + ' FROM [Test].[TimestampPK]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TimestampPK],'
				SET @SQL = @SQL + ' [SomeText]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Test].[TimestampPK]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the TimestampPK table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TimestampPk" type="timestamp" direction="Output" size="8" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Test].[TimestampPK]
					(
					[SomeText]
					)
				VALUES
					(
					@SomeText
					)
				
									
				-- Select computed columns into output parameters
				SELECT
 @TimestampPk = [TimestampPK]
				FROM
					[Test].[TimestampPK]
				WHERE
[TimestampPK] = @TimestampPk 
							
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the TimestampPK table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TimestampPk" type="timestamp" direction="Input" size="8" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ReturnedTimestampPk" type="timestamp" direction="Output" size="8" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Test].[TimestampPK]
				SET
					[SomeText] = @SomeText
				WHERE
[TimestampPK] = @TimestampPk 
AND [TimestampPK] = @TimestampPk				
				
				-- Select computed columns into output parameters
				SELECT
 @ReturnedTimestampPk = [TimestampPK]
				FROM
					[Test].[TimestampPK]
				WHERE
[TimestampPK] = @TimestampPk 
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the TimestampPK table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TimestampPk" type="timestamp" direction="Input" size="8" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Test].[TimestampPK] WITH (ROWLOCK) 
				WHERE
					[TimestampPK] = @TimestampPk
					
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_GetByTimestampPk" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TimestampPK table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TimestampPk" type="timestamp" direction="Input" size="8" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TimestampPK],
					[SomeText]
				FROM
					[Test].[TimestampPK]
				WHERE
					[TimestampPK] = @TimestampPk
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the TimestampPK table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TimestampPk" type="timestamp" direction="Input" size="8" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TimestampPK]
	, [SomeText]
    FROM
	[Test].[TimestampPK]
    WHERE 
	 ([SomeText] = @SomeText OR @SomeText IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TimestampPK]
	, [SomeText]
    FROM
	[Test].[TimestampPK]
    WHERE 
	 ([SomeText] = @SomeText AND @SomeText is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Test" name="usp_adwTiers_TimestampPK_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TimestampPK table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [TimestampPK]
					, [SomeText]
					FROM [Test].[TimestampPK] {0}
				)
				SELECT
				       [TimestampPK],
				       [SomeText]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Test].[TimestampPK] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ShoppingCartItem table
-- Table Comment: Contains online customer orders until the order is submitted or cancelled.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ShoppingCartItemID],
					[ShoppingCartID],
					[Quantity],
					[ProductID],
					[DateCreated],
					[ModifiedDate]
				FROM
					[Sales].[ShoppingCartItem]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ShoppingCartItem table passing page index and page count parameters
-- Table Comment: Contains online customer orders until the order is submitted or cancelled.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ShoppingCartItemID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ShoppingCartItemID]'
				SET @SQL = @SQL + ', [ShoppingCartID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [DateCreated]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[ShoppingCartItem]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ShoppingCartItemID],'
				SET @SQL = @SQL + ' [ShoppingCartID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [DateCreated],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[ShoppingCartItem]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ShoppingCartItem table
-- Table Comment: Contains online customer orders until the order is submitted or cancelled.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShoppingCartItemId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShoppingCartId" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateCreated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[ShoppingCartItem]
					(
					[ShoppingCartID]
					,[Quantity]
					,[ProductID]
					,[DateCreated]
					,[ModifiedDate]
					)
				VALUES
					(
					@ShoppingCartId
					,@Quantity
					,@ProductId
					,@DateCreated
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @ShoppingCartItemId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ShoppingCartItem table
-- Table Comment: Contains online customer orders until the order is submitted or cancelled.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShoppingCartItemId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ShoppingCartId" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateCreated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[ShoppingCartItem]
				SET
					[ShoppingCartID] = @ShoppingCartId
					,[Quantity] = @Quantity
					,[ProductID] = @ProductId
					,[DateCreated] = @DateCreated
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ShoppingCartItemID] = @ShoppingCartItemId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ShoppingCartItem table
-- Table Comment: Contains online customer orders until the order is submitted or cancelled.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShoppingCartItemId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[ShoppingCartItem] WITH (ROWLOCK) 
				WHERE
					[ShoppingCartItemID] = @ShoppingCartItemId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ShoppingCartItem table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ShoppingCartItemID],
					[ShoppingCartID],
					[Quantity],
					[ProductID],
					[DateCreated],
					[ModifiedDate]
				FROM
					[Sales].[ShoppingCartItem]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_GetByShoppingCartIdProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ShoppingCartItem table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShoppingCartId" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShoppingCartItemID],
					[ShoppingCartID],
					[Quantity],
					[ProductID],
					[DateCreated],
					[ModifiedDate]
				FROM
					[Sales].[ShoppingCartItem]
				WHERE
					[ShoppingCartID] = @ShoppingCartId
					AND [ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_GetByShoppingCartItemId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ShoppingCartItem table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShoppingCartItemId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShoppingCartItemID],
					[ShoppingCartID],
					[Quantity],
					[ProductID],
					[DateCreated],
					[ModifiedDate]
				FROM
					[Sales].[ShoppingCartItem]
				WHERE
					[ShoppingCartItemID] = @ShoppingCartItemId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ShoppingCartItem table passing nullable parameters
-- Table Comment: Contains online customer orders until the order is submitted or cancelled.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShoppingCartItemId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShoppingCartId" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Quantity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DateCreated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ShoppingCartItemID]
	, [ShoppingCartID]
	, [Quantity]
	, [ProductID]
	, [DateCreated]
	, [ModifiedDate]
    FROM
	[Sales].[ShoppingCartItem]
    WHERE 
	 ([ShoppingCartItemID] = @ShoppingCartItemId OR @ShoppingCartItemId IS NULL)
	AND ([ShoppingCartID] = @ShoppingCartId OR @ShoppingCartId IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([DateCreated] = @DateCreated OR @DateCreated IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ShoppingCartItemID]
	, [ShoppingCartID]
	, [Quantity]
	, [ProductID]
	, [DateCreated]
	, [ModifiedDate]
    FROM
	[Sales].[ShoppingCartItem]
    WHERE 
	 ([ShoppingCartItemID] = @ShoppingCartItemId AND @ShoppingCartItemId is not null)
	OR ([ShoppingCartID] = @ShoppingCartId AND @ShoppingCartId is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([DateCreated] = @DateCreated AND @DateCreated is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_ShoppingCartItem_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ShoppingCartItem table using a dynamically generated query.
-- Table Comment: Contains online customer orders until the order is submitted or cancelled.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ShoppingCartItemID]
					, [ShoppingCartID]
					, [Quantity]
					, [ProductID]
					, [DateCreated]
					, [ModifiedDate]
					FROM [Sales].[ShoppingCartItem] {0}
				)
				SELECT
				       [ShoppingCartItemID],
				       [ShoppingCartID],
				       [Quantity],
				       [ProductID],
				       [DateCreated],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[ShoppingCartItem] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_TestVariant_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the TestVariant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TestVariantId],
					[VariantField]
				FROM
					[Test].[TestVariant]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_TestVariant_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TestVariant table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TestVariantId]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TestVariantId]'
				SET @SQL = @SQL + ', [VariantField]'
				SET @SQL = @SQL + ' FROM [Test].[TestVariant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TestVariantId],'
				SET @SQL = @SQL + ' [VariantField]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Test].[TestVariant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Test" name="usp_adwTiers_TestVariant_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the TestVariant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TestVariantId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VariantField" type="sql_variant" direction="Input" size="8016" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Test].[TestVariant]
					(
					[VariantField]
					)
				VALUES
					(
					@VariantField
					)
				
				-- Get the identity value
				SET @TestVariantId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TestVariant_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the TestVariant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TestVariantId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VariantField" type="sql_variant" direction="Input" size="8016" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Test].[TestVariant]
				SET
					[VariantField] = @VariantField
				WHERE
[TestVariantId] = @TestVariantId 
				
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TestVariant_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the TestVariant table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TestVariantId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Test].[TestVariant] WITH (ROWLOCK) 
				WHERE
					[TestVariantId] = @TestVariantId
					
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TestVariant_GetByTestVariantId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the TestVariant table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TestVariantId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TestVariantId],
					[VariantField]
				FROM
					[Test].[TestVariant]
				WHERE
					[TestVariantId] = @TestVariantId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_TestVariant_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the TestVariant table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TestVariantId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@VariantField" type="sql_variant" direction="Input" size="8016" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TestVariantId]
	, [VariantField]
    FROM
	[Test].[TestVariant]
    WHERE 
	 ([TestVariantId] = @TestVariantId OR @TestVariantId IS NULL)
	AND ([VariantField] = @VariantField OR @VariantField IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TestVariantId]
	, [VariantField]
    FROM
	[Test].[TestVariant]
    WHERE 
	 ([TestVariantId] = @TestVariantId AND @TestVariantId is not null)
	OR ([VariantField] = @VariantField AND @VariantField is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Test" name="usp_adwTiers_TestVariant_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the TestVariant table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [TestVariantId]
					, [VariantField]
					FROM [Test].[TestVariant] {0}
				)
				SELECT
				       [TestVariantId],
				       [VariantField]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Test].[TestVariant] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SpecialOffer table
-- Table Comment: Sale discounts lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SpecialOfferID],
					[Description],
					[DiscountPct],
					[Type],
					[Category],
					[StartDate],
					[EndDate],
					[MinQty],
					[MaxQty],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOffer]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SpecialOffer table passing page index and page count parameters
-- Table Comment: Sale discounts lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SpecialOfferID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SpecialOfferID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DiscountPct]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Category]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [MinQty]'
				SET @SQL = @SQL + ', [MaxQty]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SpecialOffer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SpecialOfferID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DiscountPct],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Category],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [MinQty],'
				SET @SQL = @SQL + ' [MaxQty],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SpecialOffer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SpecialOffer table
-- Table Comment: Sale discounts lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@DiscountPct" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@Type" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Category" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MinQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MaxQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SpecialOffer]
					(
					[Description]
					,[DiscountPct]
					,[Type]
					,[Category]
					,[StartDate]
					,[EndDate]
					,[MinQty]
					,[MaxQty]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Description
					,@DiscountPct
					,@Type
					,@Category
					,@StartDate
					,@EndDate
					,@MinQty
					,@MaxQty
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @SpecialOfferId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SpecialOffer table
-- Table Comment: Sale discounts lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@DiscountPct" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault=""/>
				<parameter name="@Type" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Category" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MinQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MaxQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SpecialOffer]
				SET
					[Description] = @Description
					,[DiscountPct] = @DiscountPct
					,[Type] = @Type
					,[Category] = @Category
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[MinQty] = @MinQty
					,[MaxQty] = @MaxQty
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SpecialOfferID] = @SpecialOfferId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SpecialOffer table
-- Table Comment: Sale discounts lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SpecialOffer] WITH (ROWLOCK) 
				WHERE
					[SpecialOfferID] = @SpecialOfferId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SpecialOffer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SpecialOfferID],
					[Description],
					[DiscountPct],
					[Type],
					[Category],
					[StartDate],
					[EndDate],
					[MinQty],
					[MaxQty],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOffer]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_GetBySpecialOfferId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SpecialOffer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SpecialOfferID],
					[Description],
					[DiscountPct],
					[Type],
					[Category],
					[StartDate],
					[EndDate],
					[MinQty],
					[MaxQty],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOffer]
				WHERE
					[SpecialOfferID] = @SpecialOfferId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_GetByProductIdFromSpecialOfferProduct" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Sales.[SpecialOffer].[SpecialOfferID]
       ,Sales.[SpecialOffer].[Description]
       ,Sales.[SpecialOffer].[DiscountPct]
       ,Sales.[SpecialOffer].[Type]
       ,Sales.[SpecialOffer].[Category]
       ,Sales.[SpecialOffer].[StartDate]
       ,Sales.[SpecialOffer].[EndDate]
       ,Sales.[SpecialOffer].[MinQty]
       ,Sales.[SpecialOffer].[MaxQty]
       ,Sales.[SpecialOffer].[rowguid]
       ,Sales.[SpecialOffer].[ModifiedDate]
  FROM Sales.[SpecialOffer]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[SpecialOfferProduct] 
                WHERE Sales.[SpecialOfferProduct].[ProductID] = @ProductId
                  AND Sales.[SpecialOfferProduct].[SpecialOfferID] = Sales.[SpecialOffer].[SpecialOfferID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SpecialOffer table passing nullable parameters
-- Table Comment: Sale discounts lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@DiscountPct" type="smallmoney" direction="Input" size="4" precision="10" scale="4" param="" nulldefault="null"/>
				<parameter name="@Type" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Category" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@MinQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MaxQty" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SpecialOfferID]
	, [Description]
	, [DiscountPct]
	, [Type]
	, [Category]
	, [StartDate]
	, [EndDate]
	, [MinQty]
	, [MaxQty]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SpecialOffer]
    WHERE 
	 ([SpecialOfferID] = @SpecialOfferId OR @SpecialOfferId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DiscountPct] = @DiscountPct OR @DiscountPct IS NULL)
	AND ([Type] = @Type OR @Type IS NULL)
	AND ([Category] = @Category OR @Category IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([MinQty] = @MinQty OR @MinQty IS NULL)
	AND ([MaxQty] = @MaxQty OR @MaxQty IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SpecialOfferID]
	, [Description]
	, [DiscountPct]
	, [Type]
	, [Category]
	, [StartDate]
	, [EndDate]
	, [MinQty]
	, [MaxQty]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SpecialOffer]
    WHERE 
	 ([SpecialOfferID] = @SpecialOfferId AND @SpecialOfferId is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DiscountPct] = @DiscountPct AND @DiscountPct is not null)
	OR ([Type] = @Type AND @Type is not null)
	OR ([Category] = @Category AND @Category is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([MinQty] = @MinQty AND @MinQty is not null)
	OR ([MaxQty] = @MaxQty AND @MaxQty is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOffer_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SpecialOffer table using a dynamically generated query.
-- Table Comment: Sale discounts lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SpecialOfferID]
					, [Description]
					, [DiscountPct]
					, [Type]
					, [Category]
					, [StartDate]
					, [EndDate]
					, [MinQty]
					, [MaxQty]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SpecialOffer] {0}
				)
				SELECT
				       [SpecialOfferID],
				       [Description],
				       [DiscountPct],
				       [Type],
				       [Category],
				       [StartDate],
				       [EndDate],
				       [MinQty],
				       [MaxQty],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SpecialOffer] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ShipMethod table
-- Table Comment: Shipping company lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ShipMethodID],
					[Name],
					[ShipBase],
					[ShipRate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Purchasing].[ShipMethod]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ShipMethod table passing page index and page count parameters
-- Table Comment: Shipping company lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ShipMethodID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ShipMethodID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ShipBase]'
				SET @SQL = @SQL + ', [ShipRate]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Purchasing].[ShipMethod]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ShipMethodID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ShipBase],'
				SET @SQL = @SQL + ' [ShipRate],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[ShipMethod]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ShipMethod table
-- Table Comment: Shipping company lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipMethodId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ShipBase" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ShipRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Purchasing].[ShipMethod]
					(
					[Name]
					,[ShipBase]
					,[ShipRate]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Name
					,@ShipBase
					,@ShipRate
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @ShipMethodId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ShipMethod table
-- Table Comment: Shipping company lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ShipBase" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ShipRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Purchasing].[ShipMethod]
				SET
					[Name] = @Name
					,[ShipBase] = @ShipBase
					,[ShipRate] = @ShipRate
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ShipMethodID] = @ShipMethodId 
				
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ShipMethod table
-- Table Comment: Shipping company lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Purchasing].[ShipMethod] WITH (ROWLOCK) 
				WHERE
					[ShipMethodID] = @ShipMethodId
					
			]]></body>
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ShipMethod table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShipMethodID],
					[Name],
					[ShipBase],
					[ShipRate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Purchasing].[ShipMethod]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ShipMethod table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShipMethodID],
					[Name],
					[ShipBase],
					[ShipRate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Purchasing].[ShipMethod]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_GetByShipMethodId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ShipMethod table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShipMethodID],
					[Name],
					[ShipBase],
					[ShipRate],
					[rowguid],
					[ModifiedDate]
				FROM
					[Purchasing].[ShipMethod]
				WHERE
					[ShipMethodID] = @ShipMethodId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ShipMethod table passing nullable parameters
-- Table Comment: Shipping company lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShipMethodId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ShipBase" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ShipRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ShipMethodID]
	, [Name]
	, [ShipBase]
	, [ShipRate]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Purchasing].[ShipMethod]
    WHERE 
	 ([ShipMethodID] = @ShipMethodId OR @ShipMethodId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ShipBase] = @ShipBase OR @ShipBase IS NULL)
	AND ([ShipRate] = @ShipRate OR @ShipRate IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ShipMethodID]
	, [Name]
	, [ShipBase]
	, [ShipRate]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Purchasing].[ShipMethod]
    WHERE 
	 ([ShipMethodID] = @ShipMethodId AND @ShipMethodId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ShipBase] = @ShipBase AND @ShipBase is not null)
	OR ([ShipRate] = @ShipRate AND @ShipRate is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Purchasing" name="usp_adwTiers_ShipMethod_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ShipMethod table using a dynamically generated query.
-- Table Comment: Shipping company lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ShipMethodID]
					, [Name]
					, [ShipBase]
					, [ShipRate]
					, [rowguid]
					, [ModifiedDate]
					FROM [Purchasing].[ShipMethod] {0}
				)
				SELECT
				       [ShipMethodID],
				       [Name],
				       [ShipBase],
				       [ShipRate],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[ShipMethod] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the SpecialOfferProduct table
-- Table Comment: Cross-reference table mapping products to special offer discounts.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SpecialOfferID],
					[ProductID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOfferProduct]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SpecialOfferProduct table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping products to special offer discounts.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SpecialOfferID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SpecialOfferID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[SpecialOfferProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SpecialOfferID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[SpecialOfferProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the SpecialOfferProduct table
-- Table Comment: Cross-reference table mapping products to special offer discounts.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[SpecialOfferProduct]
					(
					[SpecialOfferID]
					,[ProductID]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@SpecialOfferId
					,@ProductId
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the SpecialOfferProduct table
-- Table Comment: Cross-reference table mapping products to special offer discounts.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalSpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[SpecialOfferProduct]
				SET
					[SpecialOfferID] = @SpecialOfferId
					,[ProductID] = @ProductId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SpecialOfferID] = @OriginalSpecialOfferId 
AND [ProductID] = @OriginalProductId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the SpecialOfferProduct table
-- Table Comment: Cross-reference table mapping products to special offer discounts.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[SpecialOfferProduct] WITH (ROWLOCK) 
				WHERE
					[SpecialOfferID] = @SpecialOfferId
					AND [ProductID] = @ProductId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_GetBySpecialOfferId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SpecialOfferProduct table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SpecialOfferID],
					[ProductID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOfferProduct]
				WHERE
					[SpecialOfferID] = @SpecialOfferId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SpecialOfferProduct table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SpecialOfferID],
					[ProductID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOfferProduct]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SpecialOfferProduct table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SpecialOfferID],
					[ProductID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOfferProduct]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_GetBySpecialOfferIdProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the SpecialOfferProduct table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SpecialOfferID],
					[ProductID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[SpecialOfferProduct]
				WHERE
					[SpecialOfferID] = @SpecialOfferId
					AND [ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the SpecialOfferProduct table passing nullable parameters
-- Table Comment: Cross-reference table mapping products to special offer discounts.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SpecialOfferId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SpecialOfferID]
	, [ProductID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SpecialOfferProduct]
    WHERE 
	 ([SpecialOfferID] = @SpecialOfferId OR @SpecialOfferId IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SpecialOfferID]
	, [ProductID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[SpecialOfferProduct]
    WHERE 
	 ([SpecialOfferID] = @SpecialOfferId AND @SpecialOfferId is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_SpecialOfferProduct_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the SpecialOfferProduct table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping products to special offer discounts.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SpecialOfferID]
					, [ProductID]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[SpecialOfferProduct] {0}
				)
				SELECT
				       [SpecialOfferID],
				       [ProductID],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[SpecialOfferProduct] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_StateProvince_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the StateProvince table
-- Table Comment: State and province lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[CountryRegionCode],
					[IsOnlyStateProvinceFlag],
					[Name],
					[TerritoryID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[StateProvince]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_StateProvince_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the StateProvince table passing page index and page count parameters
-- Table Comment: State and province lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[StateProvinceID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [StateProvinceID]'
				SET @SQL = @SQL + ', [StateProvinceCode]'
				SET @SQL = @SQL + ', [CountryRegionCode]'
				SET @SQL = @SQL + ', [IsOnlyStateProvinceFlag]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Person].[StateProvince]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [StateProvinceID],'
				SET @SQL = @SQL + ' [StateProvinceCode],'
				SET @SQL = @SQL + ' [CountryRegionCode],'
				SET @SQL = @SQL + ' [IsOnlyStateProvinceFlag],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[StateProvince]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_StateProvince_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the StateProvince table
-- Table Comment: State and province lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StateProvinceCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@IsOnlyStateProvinceFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Person].[StateProvince]
					(
					[StateProvinceCode]
					,[CountryRegionCode]
					,[IsOnlyStateProvinceFlag]
					,[Name]
					,[TerritoryID]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@StateProvinceCode
					,@CountryRegionCode
					,@IsOnlyStateProvinceFlag
					,@Name
					,@TerritoryId
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @StateProvinceId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the StateProvince table
-- Table Comment: State and province lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StateProvinceCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@IsOnlyStateProvinceFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Person].[StateProvince]
				SET
					[StateProvinceCode] = @StateProvinceCode
					,[CountryRegionCode] = @CountryRegionCode
					,[IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag
					,[Name] = @Name
					,[TerritoryID] = @TerritoryId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[StateProvinceID] = @StateProvinceId 
				
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the StateProvince table
-- Table Comment: State and province lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Person].[StateProvince] WITH (ROWLOCK) 
				WHERE
					[StateProvinceID] = @StateProvinceId
					
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_GetByCountryRegionCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StateProvince table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[CountryRegionCode],
					[IsOnlyStateProvinceFlag],
					[Name],
					[TerritoryID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[StateProvince]
				WHERE
					[CountryRegionCode] = @CountryRegionCode
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StateProvince table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[CountryRegionCode],
					[IsOnlyStateProvinceFlag],
					[Name],
					[TerritoryID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[StateProvince]
				WHERE
					[TerritoryID] = @TerritoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StateProvince table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[CountryRegionCode],
					[IsOnlyStateProvinceFlag],
					[Name],
					[TerritoryID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[StateProvince]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StateProvince table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[CountryRegionCode],
					[IsOnlyStateProvinceFlag],
					[Name],
					[TerritoryID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[StateProvince]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_GetByStateProvinceCodeCountryRegionCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StateProvince table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[CountryRegionCode],
					[IsOnlyStateProvinceFlag],
					[Name],
					[TerritoryID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[StateProvince]
				WHERE
					[StateProvinceCode] = @StateProvinceCode
					AND [CountryRegionCode] = @CountryRegionCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_GetByStateProvinceId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StateProvince table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[CountryRegionCode],
					[IsOnlyStateProvinceFlag],
					[Name],
					[TerritoryID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[StateProvince]
				WHERE
					[StateProvinceID] = @StateProvinceId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_StateProvince_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the StateProvince table passing nullable parameters
-- Table Comment: State and province lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@StateProvinceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StateProvinceCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@IsOnlyStateProvinceFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [StateProvinceID]
	, [StateProvinceCode]
	, [CountryRegionCode]
	, [IsOnlyStateProvinceFlag]
	, [Name]
	, [TerritoryID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[StateProvince]
    WHERE 
	 ([StateProvinceID] = @StateProvinceId OR @StateProvinceId IS NULL)
	AND ([StateProvinceCode] = @StateProvinceCode OR @StateProvinceCode IS NULL)
	AND ([CountryRegionCode] = @CountryRegionCode OR @CountryRegionCode IS NULL)
	AND ([IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag OR @IsOnlyStateProvinceFlag IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [StateProvinceID]
	, [StateProvinceCode]
	, [CountryRegionCode]
	, [IsOnlyStateProvinceFlag]
	, [Name]
	, [TerritoryID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[StateProvince]
    WHERE 
	 ([StateProvinceID] = @StateProvinceId AND @StateProvinceId is not null)
	OR ([StateProvinceCode] = @StateProvinceCode AND @StateProvinceCode is not null)
	OR ([CountryRegionCode] = @CountryRegionCode AND @CountryRegionCode is not null)
	OR ([IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag AND @IsOnlyStateProvinceFlag is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Person" name="usp_adwTiers_StateProvince_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the StateProvince table using a dynamically generated query.
-- Table Comment: State and province lookup table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [StateProvinceID]
					, [StateProvinceCode]
					, [CountryRegionCode]
					, [IsOnlyStateProvinceFlag]
					, [Name]
					, [TerritoryID]
					, [rowguid]
					, [ModifiedDate]
					FROM [Person].[StateProvince] {0}
				)
				SELECT
				       [StateProvinceID],
				       [StateProvinceCode],
				       [CountryRegionCode],
				       [IsOnlyStateProvinceFlag],
				       [Name],
				       [TerritoryID],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[StateProvince] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Store_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Store table
-- Table Comment: Customers (resellers) of Adventure Works products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[Name],
					[SalesPersonID],
					[Demographics],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Store]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Store_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Store table passing page index and page count parameters
-- Table Comment: Customers (resellers) of Adventure Works products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [Demographics]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[Store]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [Demographics],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[Store]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_Store_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Store table
-- Table Comment: Customers (resellers) of Adventure Works products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[Store]
					(
					[CustomerID]
					,[Name]
					,[SalesPersonID]
					,[Demographics]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@CustomerId
					,@Name
					,@SalesPersonId
					,@Demographics
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Store table
-- Table Comment: Customers (resellers) of Adventure Works products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[Store]
				SET
					[CustomerID] = @CustomerId
					,[Name] = @Name
					,[SalesPersonID] = @SalesPersonId
					,[Demographics] = @Demographics
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CustomerID] = @OriginalCustomerId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Store table
-- Table Comment: Customers (resellers) of Adventure Works products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[Store] WITH (ROWLOCK) 
				WHERE
					[CustomerID] = @CustomerId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Store table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[Name],
					[SalesPersonID],
					[Demographics],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Store]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_GetBySalesPersonId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Store table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[Name],
					[SalesPersonID],
					[Demographics],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Store]
				WHERE
					[SalesPersonID] = @SalesPersonId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Store table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[Name],
					[SalesPersonID],
					[Demographics],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Store]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_GetByDemographics" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Store table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[Name],
					[SalesPersonID],
					[Demographics],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Store]
				WHERE
					[Demographics] = @Demographics
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_GetByContactIdFromStoreContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Sales.[Store].[CustomerID]
       ,Sales.[Store].[Name]
       ,Sales.[Store].[SalesPersonID]
       ,Sales.[Store].[Demographics]
       ,Sales.[Store].[rowguid]
       ,Sales.[Store].[ModifiedDate]
  FROM Sales.[Store]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[StoreContact] 
                WHERE Sales.[StoreContact].[ContactID] = @ContactId
                  AND Sales.[StoreContact].[CustomerID] = Sales.[Store].[CustomerID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Store_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Store table passing nullable parameters
-- Table Comment: Customers (resellers) of Adventure Works products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@SalesPersonId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerID]
	, [Name]
	, [SalesPersonID]
	, [Demographics]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[Store]
    WHERE 
	 ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerID]
	, [Name]
	, [SalesPersonID]
	, [Demographics]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[Store]
    WHERE 
	 ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_Store_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Store table using a dynamically generated query.
-- Table Comment: Customers (resellers) of Adventure Works products.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerID]
					, [Name]
					, [SalesPersonID]
					, [Demographics]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[Store] {0}
				)
				SELECT
				       [CustomerID],
				       [Name],
				       [SalesPersonID],
				       [Demographics],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[Store] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductPhoto table
-- Table Comment: Product images.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductPhotoID],
					[ThumbNailPhoto],
					[ThumbnailPhotoFileName],
					[LargePhoto],
					[LargePhotoFileName],
					[ModifiedDate]
				FROM
					[Production].[ProductPhoto]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductPhoto table passing page index and page count parameters
-- Table Comment: Product images.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductPhotoID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductPhotoID]'
				SET @SQL = @SQL + ', [ThumbNailPhoto]'
				SET @SQL = @SQL + ', [ThumbnailPhotoFileName]'
				SET @SQL = @SQL + ', [LargePhoto]'
				SET @SQL = @SQL + ', [LargePhotoFileName]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductPhoto]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductPhotoID],'
				SET @SQL = @SQL + ' [ThumbNailPhoto],'
				SET @SQL = @SQL + ' [ThumbnailPhotoFileName],'
				SET @SQL = @SQL + ' [LargePhoto],'
				SET @SQL = @SQL + ' [LargePhotoFileName],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductPhoto]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductPhoto table
-- Table Comment: Product images.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductPhotoId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ThumbNailPhoto" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@ThumbnailPhotoFileName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LargePhoto" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@LargePhotoFileName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductPhoto]
					(
					[ThumbNailPhoto]
					,[ThumbnailPhotoFileName]
					,[LargePhoto]
					,[LargePhotoFileName]
					,[ModifiedDate]
					)
				VALUES
					(
					@ThumbNailPhoto
					,@ThumbnailPhotoFileName
					,@LargePhoto
					,@LargePhotoFileName
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @ProductPhotoId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductPhoto table
-- Table Comment: Product images.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ThumbNailPhoto" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@ThumbnailPhotoFileName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LargePhoto" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@LargePhotoFileName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductPhoto]
				SET
					[ThumbNailPhoto] = @ThumbNailPhoto
					,[ThumbnailPhotoFileName] = @ThumbnailPhotoFileName
					,[LargePhoto] = @LargePhoto
					,[LargePhotoFileName] = @LargePhotoFileName
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductPhotoID] = @ProductPhotoId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductPhoto table
-- Table Comment: Product images.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductPhoto] WITH (ROWLOCK) 
				WHERE
					[ProductPhotoID] = @ProductPhotoId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_GetByProductPhotoId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductPhoto table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductPhotoID],
					[ThumbNailPhoto],
					[ThumbnailPhotoFileName],
					[LargePhoto],
					[LargePhotoFileName],
					[ModifiedDate]
				FROM
					[Production].[ProductPhoto]
				WHERE
					[ProductPhotoID] = @ProductPhotoId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_GetByProductIdFromProductProductPhoto" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[ProductPhoto].[ProductPhotoID]
       ,Production.[ProductPhoto].[ThumbNailPhoto]
       ,Production.[ProductPhoto].[ThumbnailPhotoFileName]
       ,Production.[ProductPhoto].[LargePhoto]
       ,Production.[ProductPhoto].[LargePhotoFileName]
       ,Production.[ProductPhoto].[ModifiedDate]
  FROM Production.[ProductPhoto]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductProductPhoto] 
                WHERE Production.[ProductProductPhoto].[ProductID] = @ProductId
                  AND Production.[ProductProductPhoto].[ProductPhotoID] = Production.[ProductPhoto].[ProductPhotoID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductPhoto table passing nullable parameters
-- Table Comment: Product images.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductPhotoId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ThumbNailPhoto" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault="null"/>
				<parameter name="@ThumbnailPhotoFileName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@LargePhoto" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault="null"/>
				<parameter name="@LargePhotoFileName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductPhotoID]
	, [ThumbNailPhoto]
	, [ThumbnailPhotoFileName]
	, [LargePhoto]
	, [LargePhotoFileName]
	, [ModifiedDate]
    FROM
	[Production].[ProductPhoto]
    WHERE 
	 ([ProductPhotoID] = @ProductPhotoId OR @ProductPhotoId IS NULL)
	AND ([ThumbnailPhotoFileName] = @ThumbnailPhotoFileName OR @ThumbnailPhotoFileName IS NULL)
	AND ([LargePhotoFileName] = @LargePhotoFileName OR @LargePhotoFileName IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductPhotoID]
	, [ThumbNailPhoto]
	, [ThumbnailPhotoFileName]
	, [LargePhoto]
	, [LargePhotoFileName]
	, [ModifiedDate]
    FROM
	[Production].[ProductPhoto]
    WHERE 
	 ([ProductPhotoID] = @ProductPhotoId AND @ProductPhotoId is not null)
	OR ([ThumbnailPhotoFileName] = @ThumbnailPhotoFileName AND @ThumbnailPhotoFileName is not null)
	OR ([LargePhotoFileName] = @LargePhotoFileName AND @LargePhotoFileName is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductPhoto_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductPhoto table using a dynamically generated query.
-- Table Comment: Product images.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductPhotoID]
					, [ThumbNailPhoto]
					, [ThumbnailPhotoFileName]
					, [LargePhoto]
					, [LargePhotoFileName]
					, [ModifiedDate]
					FROM [Production].[ProductPhoto] {0}
				)
				SELECT
				       [ProductPhotoID],
				       [ThumbNailPhoto],
				       [ThumbnailPhotoFileName],
				       [LargePhoto],
				       [LargePhotoFileName],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductPhoto] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the StoreContact table
-- Table Comment: Cross-reference table mapping stores and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[ContactID],
					[ContactTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[StoreContact]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the StoreContact table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping stores and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [ContactTypeID]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[StoreContact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [ContactTypeID],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[StoreContact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the StoreContact table
-- Table Comment: Cross-reference table mapping stores and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[StoreContact]
					(
					[CustomerID]
					,[ContactID]
					,[ContactTypeID]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@CustomerId
					,@ContactId
					,@ContactTypeId
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the StoreContact table
-- Table Comment: Cross-reference table mapping stores and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[StoreContact]
				SET
					[CustomerID] = @CustomerId
					,[ContactID] = @ContactId
					,[ContactTypeID] = @ContactTypeId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CustomerID] = @OriginalCustomerId 
AND [ContactID] = @OriginalContactId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the StoreContact table
-- Table Comment: Cross-reference table mapping stores and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[StoreContact] WITH (ROWLOCK) 
				WHERE
					[CustomerID] = @CustomerId
					AND [ContactID] = @ContactId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StoreContact table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CustomerID],
					[ContactID],
					[ContactTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[StoreContact]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StoreContact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[ContactID],
					[ContactTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[StoreContact]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_GetByContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StoreContact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[ContactID],
					[ContactTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[StoreContact]
				WHERE
					[ContactID] = @ContactId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_GetByContactTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StoreContact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[ContactID],
					[ContactTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[StoreContact]
				WHERE
					[ContactTypeID] = @ContactTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_GetByCustomerIdContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the StoreContact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[ContactID],
					[ContactTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[StoreContact]
				WHERE
					[CustomerID] = @CustomerId
					AND [ContactID] = @ContactId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the StoreContact table passing nullable parameters
-- Table Comment: Cross-reference table mapping stores and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerID]
	, [ContactID]
	, [ContactTypeID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[StoreContact]
    WHERE 
	 ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ContactID] = @ContactId OR @ContactId IS NULL)
	AND ([ContactTypeID] = @ContactTypeId OR @ContactTypeId IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerID]
	, [ContactID]
	, [ContactTypeID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[StoreContact]
    WHERE 
	 ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ContactID] = @ContactId AND @ContactId is not null)
	OR ([ContactTypeID] = @ContactTypeId AND @ContactTypeId is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_StoreContact_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the StoreContact table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping stores and their employees.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerID]
					, [ContactID]
					, [ContactTypeID]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[StoreContact] {0}
				)
				SELECT
				       [CustomerID],
				       [ContactID],
				       [ContactTypeID],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[StoreContact] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductModelProductDescriptionCulture table
-- Table Comment: Cross-reference table mapping product descriptions and the language the description is written in.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductModelID],
					[ProductDescriptionID],
					[CultureID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelProductDescriptionCulture]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductModelProductDescriptionCulture table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping product descriptions and the language the description is written in.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductModelID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductModelID]'
				SET @SQL = @SQL + ', [ProductDescriptionID]'
				SET @SQL = @SQL + ', [CultureID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductModelProductDescriptionCulture]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductModelID],'
				SET @SQL = @SQL + ' [ProductDescriptionID],'
				SET @SQL = @SQL + ' [CultureID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductModelProductDescriptionCulture]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductModelProductDescriptionCulture table
-- Table Comment: Cross-reference table mapping product descriptions and the language the description is written in.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductModelProductDescriptionCulture]
					(
					[ProductModelID]
					,[ProductDescriptionID]
					,[CultureID]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductModelId
					,@ProductDescriptionId
					,@CultureId
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductModelProductDescriptionCulture table
-- Table Comment: Cross-reference table mapping product descriptions and the language the description is written in.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@OriginalCultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductModelProductDescriptionCulture]
				SET
					[ProductModelID] = @ProductModelId
					,[ProductDescriptionID] = @ProductDescriptionId
					,[CultureID] = @CultureId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductModelID] = @OriginalProductModelId 
AND [ProductDescriptionID] = @OriginalProductDescriptionId 
AND [CultureID] = @OriginalCultureId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductModelProductDescriptionCulture table
-- Table Comment: Cross-reference table mapping product descriptions and the language the description is written in.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductModelProductDescriptionCulture] WITH (ROWLOCK) 
				WHERE
					[ProductModelID] = @ProductModelId
					AND [ProductDescriptionID] = @ProductDescriptionId
					AND [CultureID] = @CultureId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_GetByCultureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModelProductDescriptionCulture table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductModelID],
					[ProductDescriptionID],
					[CultureID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelProductDescriptionCulture]
				WHERE
					[CultureID] = @CultureId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_GetByProductDescriptionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModelProductDescriptionCulture table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductModelID],
					[ProductDescriptionID],
					[CultureID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelProductDescriptionCulture]
				WHERE
					[ProductDescriptionID] = @ProductDescriptionId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_GetByProductModelId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModelProductDescriptionCulture table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductModelID],
					[ProductDescriptionID],
					[CultureID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelProductDescriptionCulture]
				WHERE
					[ProductModelID] = @ProductModelId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_GetByProductModelIdProductDescriptionIdCultureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModelProductDescriptionCulture table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductModelID],
					[ProductDescriptionID],
					[CultureID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelProductDescriptionCulture]
				WHERE
					[ProductModelID] = @ProductModelId
					AND [ProductDescriptionID] = @ProductDescriptionId
					AND [CultureID] = @CultureId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductModelProductDescriptionCulture table passing nullable parameters
-- Table Comment: Cross-reference table mapping product descriptions and the language the description is written in.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductModelID]
	, [ProductDescriptionID]
	, [CultureID]
	, [ModifiedDate]
    FROM
	[Production].[ProductModelProductDescriptionCulture]
    WHERE 
	 ([ProductModelID] = @ProductModelId OR @ProductModelId IS NULL)
	AND ([ProductDescriptionID] = @ProductDescriptionId OR @ProductDescriptionId IS NULL)
	AND ([CultureID] = @CultureId OR @CultureId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductModelID]
	, [ProductDescriptionID]
	, [CultureID]
	, [ModifiedDate]
    FROM
	[Production].[ProductModelProductDescriptionCulture]
    WHERE 
	 ([ProductModelID] = @ProductModelId AND @ProductModelId is not null)
	OR ([ProductDescriptionID] = @ProductDescriptionId AND @ProductDescriptionId is not null)
	OR ([CultureID] = @CultureId AND @CultureId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductModelProductDescriptionCulture_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductModelProductDescriptionCulture table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping product descriptions and the language the description is written in.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductModelID]
					, [ProductDescriptionID]
					, [CultureID]
					, [ModifiedDate]
					FROM [Production].[ProductModelProductDescriptionCulture] {0}
				)
				SELECT
				       [ProductModelID],
				       [ProductDescriptionID],
				       [CultureID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductModelProductDescriptionCulture] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Currency_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Currency table
-- Table Comment: Lookup table containing standard ISO currencies.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CurrencyCode],
					[Name],
					[ModifiedDate]
				FROM
					[Sales].[Currency]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Currency_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Currency table passing page index and page count parameters
-- Table Comment: Lookup table containing standard ISO currencies.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CurrencyCode]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CurrencyCode]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[Currency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CurrencyCode],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[Currency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_Currency_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Currency table
-- Table Comment: Lookup table containing standard ISO currencies.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[Currency]
					(
					[CurrencyCode]
					,[Name]
					,[ModifiedDate]
					)
				VALUES
					(
					@CurrencyCode
					,@Name
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Currency_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Currency table
-- Table Comment: Lookup table containing standard ISO currencies.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[Currency]
				SET
					[CurrencyCode] = @CurrencyCode
					,[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CurrencyCode] = @OriginalCurrencyCode 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Currency_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Currency table
-- Table Comment: Lookup table containing standard ISO currencies.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[Currency] WITH (ROWLOCK) 
				WHERE
					[CurrencyCode] = @CurrencyCode
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Currency_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Currency table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CurrencyCode],
					[Name],
					[ModifiedDate]
				FROM
					[Sales].[Currency]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Currency_GetByCurrencyCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Currency table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CurrencyCode],
					[Name],
					[ModifiedDate]
				FROM
					[Sales].[Currency]
				WHERE
					[CurrencyCode] = @CurrencyCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Currency_GetByCountryRegionCodeFromCountryRegionCurrency" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Sales.[Currency].[CurrencyCode]
       ,Sales.[Currency].[Name]
       ,Sales.[Currency].[ModifiedDate]
  FROM Sales.[Currency]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[CountryRegionCurrency] 
                WHERE Sales.[CountryRegionCurrency].[CountryRegionCode] = @CountryRegionCode
                  AND Sales.[CountryRegionCurrency].[CurrencyCode] = Sales.[Currency].[CurrencyCode]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Currency_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Currency table passing nullable parameters
-- Table Comment: Lookup table containing standard ISO currencies.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CurrencyCode]
	, [Name]
	, [ModifiedDate]
    FROM
	[Sales].[Currency]
    WHERE 
	 ([CurrencyCode] = @CurrencyCode OR @CurrencyCode IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CurrencyCode]
	, [Name]
	, [ModifiedDate]
    FROM
	[Sales].[Currency]
    WHERE 
	 ([CurrencyCode] = @CurrencyCode AND @CurrencyCode is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_Currency_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Currency table using a dynamically generated query.
-- Table Comment: Lookup table containing standard ISO currencies.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CurrencyCode]
					, [Name]
					, [ModifiedDate]
					FROM [Sales].[Currency] {0}
				)
				SELECT
				       [CurrencyCode],
				       [Name],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[Currency] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Customer_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Customer table
-- Table Comment: Current customer information. Also see the Individual and Store tables.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[TerritoryID],
					[AccountNumber],
					[CustomerType],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Customer]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Customer_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Customer table passing page index and page count parameters
-- Table Comment: Current customer information. Also see the Individual and Store tables.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [AccountNumber]'
				SET @SQL = @SQL + ', [CustomerType]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[Customer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [AccountNumber],'
				SET @SQL = @SQL + ' [CustomerType],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[Customer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_Customer_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Customer table
-- Table Comment: Current customer information. Also see the Individual and Store tables.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccountNumber" type="varchar" direction="Output" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[Customer]
					(
					[TerritoryID]
					,[CustomerType]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@TerritoryId
					,@CustomerType
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @CustomerId = SCOPE_IDENTITY()
									
				-- Select computed columns into output parameters
				SELECT
 @AccountNumber = [AccountNumber]
				FROM
					[Sales].[Customer]
				WHERE
[CustomerID] = @CustomerId 
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Customer table
-- Table Comment: Current customer information. Also see the Individual and Store tables.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AccountNumber" type="varchar" direction="Output" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[Customer]
				SET
					[TerritoryID] = @TerritoryId
					,[CustomerType] = @CustomerType
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CustomerID] = @CustomerId 
				
				
				-- Select computed columns into output parameters
				SELECT
 @AccountNumber = [AccountNumber]
				FROM
					[Sales].[Customer]
				WHERE
[CustomerID] = @CustomerId 
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Customer table
-- Table Comment: Current customer information. Also see the Individual and Store tables.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[Customer] WITH (ROWLOCK) 
				WHERE
					[CustomerID] = @CustomerId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_GetByAccountNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AccountNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[TerritoryID],
					[AccountNumber],
					[CustomerType],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Customer]
				WHERE
					[AccountNumber] = @AccountNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[TerritoryID],
					[AccountNumber],
					[CustomerType],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Customer]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[TerritoryID],
					[AccountNumber],
					[CustomerType],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Customer]
				WHERE
					[TerritoryID] = @TerritoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[TerritoryID],
					[AccountNumber],
					[CustomerType],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[Customer]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_GetByAddressIdFromCustomerAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Sales.[Customer].[CustomerID]
       ,Sales.[Customer].[TerritoryID]
       ,Sales.[Customer].[AccountNumber]
       ,Sales.[Customer].[CustomerType]
       ,Sales.[Customer].[rowguid]
       ,Sales.[Customer].[ModifiedDate]
  FROM Sales.[Customer]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[CustomerAddress] 
                WHERE Sales.[CustomerAddress].[AddressID] = @AddressId
                  AND Sales.[CustomerAddress].[CustomerID] = Sales.[Customer].[CustomerID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Customer_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Customer table passing nullable parameters
-- Table Comment: Current customer information. Also see the Individual and Store tables.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TerritoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AccountNumber" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerType" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerID]
	, [TerritoryID]
	, [AccountNumber]
	, [CustomerType]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[Customer]
    WHERE 
	 ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
	AND ([AccountNumber] = @AccountNumber OR @AccountNumber IS NULL)
	AND ([CustomerType] = @CustomerType OR @CustomerType IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerID]
	, [TerritoryID]
	, [AccountNumber]
	, [CustomerType]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[Customer]
    WHERE 
	 ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	OR ([AccountNumber] = @AccountNumber AND @AccountNumber is not null)
	OR ([CustomerType] = @CustomerType AND @CustomerType is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_Customer_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Customer table using a dynamically generated query.
-- Table Comment: Current customer information. Also see the Individual and Store tables.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerID]
					, [TerritoryID]
					, [AccountNumber]
					, [CustomerType]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[Customer] {0}
				)
				SELECT
				       [CustomerID],
				       [TerritoryID],
				       [AccountNumber],
				       [CustomerType],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[Customer] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the CurrencyRate table
-- Table Comment: Currency exchange rates.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CurrencyRateID],
					[CurrencyRateDate],
					[FromCurrencyCode],
					[ToCurrencyCode],
					[AverageRate],
					[EndOfDayRate],
					[ModifiedDate]
				FROM
					[Sales].[CurrencyRate]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CurrencyRate table passing page index and page count parameters
-- Table Comment: Currency exchange rates.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CurrencyRateID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CurrencyRateID]'
				SET @SQL = @SQL + ', [CurrencyRateDate]'
				SET @SQL = @SQL + ', [FromCurrencyCode]'
				SET @SQL = @SQL + ', [ToCurrencyCode]'
				SET @SQL = @SQL + ', [AverageRate]'
				SET @SQL = @SQL + ', [EndOfDayRate]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[CurrencyRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CurrencyRateID],'
				SET @SQL = @SQL + ' [CurrencyRateDate],'
				SET @SQL = @SQL + ' [FromCurrencyCode],'
				SET @SQL = @SQL + ' [ToCurrencyCode],'
				SET @SQL = @SQL + ' [AverageRate],'
				SET @SQL = @SQL + ' [EndOfDayRate],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[CurrencyRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the CurrencyRate table
-- Table Comment: Currency exchange rates.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyRateId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CurrencyRateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FromCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ToCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@AverageRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@EndOfDayRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[CurrencyRate]
					(
					[CurrencyRateDate]
					,[FromCurrencyCode]
					,[ToCurrencyCode]
					,[AverageRate]
					,[EndOfDayRate]
					,[ModifiedDate]
					)
				VALUES
					(
					@CurrencyRateDate
					,@FromCurrencyCode
					,@ToCurrencyCode
					,@AverageRate
					,@EndOfDayRate
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @CurrencyRateId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the CurrencyRate table
-- Table Comment: Currency exchange rates.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CurrencyRateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FromCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ToCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@AverageRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@EndOfDayRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[CurrencyRate]
				SET
					[CurrencyRateDate] = @CurrencyRateDate
					,[FromCurrencyCode] = @FromCurrencyCode
					,[ToCurrencyCode] = @ToCurrencyCode
					,[AverageRate] = @AverageRate
					,[EndOfDayRate] = @EndOfDayRate
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CurrencyRateID] = @CurrencyRateId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the CurrencyRate table
-- Table Comment: Currency exchange rates.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[CurrencyRate] WITH (ROWLOCK) 
				WHERE
					[CurrencyRateID] = @CurrencyRateId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_GetByFromCurrencyCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CurrencyRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FromCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CurrencyRateID],
					[CurrencyRateDate],
					[FromCurrencyCode],
					[ToCurrencyCode],
					[AverageRate],
					[EndOfDayRate],
					[ModifiedDate]
				FROM
					[Sales].[CurrencyRate]
				WHERE
					[FromCurrencyCode] = @FromCurrencyCode
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_GetByToCurrencyCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CurrencyRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ToCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CurrencyRateID],
					[CurrencyRateDate],
					[FromCurrencyCode],
					[ToCurrencyCode],
					[AverageRate],
					[EndOfDayRate],
					[ModifiedDate]
				FROM
					[Sales].[CurrencyRate]
				WHERE
					[ToCurrencyCode] = @ToCurrencyCode
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_GetByCurrencyRateDateFromCurrencyCodeToCurrencyCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CurrencyRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyRateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FromCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ToCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CurrencyRateID],
					[CurrencyRateDate],
					[FromCurrencyCode],
					[ToCurrencyCode],
					[AverageRate],
					[EndOfDayRate],
					[ModifiedDate]
				FROM
					[Sales].[CurrencyRate]
				WHERE
					[CurrencyRateDate] = @CurrencyRateDate
					AND [FromCurrencyCode] = @FromCurrencyCode
					AND [ToCurrencyCode] = @ToCurrencyCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_GetByCurrencyRateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CurrencyRate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CurrencyRateID],
					[CurrencyRateDate],
					[FromCurrencyCode],
					[ToCurrencyCode],
					[AverageRate],
					[EndOfDayRate],
					[ModifiedDate]
				FROM
					[Sales].[CurrencyRate]
				WHERE
					[CurrencyRateID] = @CurrencyRateId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the CurrencyRate table passing nullable parameters
-- Table Comment: Currency exchange rates.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CurrencyRateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CurrencyRateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@FromCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@ToCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@AverageRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@EndOfDayRate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CurrencyRateID]
	, [CurrencyRateDate]
	, [FromCurrencyCode]
	, [ToCurrencyCode]
	, [AverageRate]
	, [EndOfDayRate]
	, [ModifiedDate]
    FROM
	[Sales].[CurrencyRate]
    WHERE 
	 ([CurrencyRateID] = @CurrencyRateId OR @CurrencyRateId IS NULL)
	AND ([CurrencyRateDate] = @CurrencyRateDate OR @CurrencyRateDate IS NULL)
	AND ([FromCurrencyCode] = @FromCurrencyCode OR @FromCurrencyCode IS NULL)
	AND ([ToCurrencyCode] = @ToCurrencyCode OR @ToCurrencyCode IS NULL)
	AND ([AverageRate] = @AverageRate OR @AverageRate IS NULL)
	AND ([EndOfDayRate] = @EndOfDayRate OR @EndOfDayRate IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CurrencyRateID]
	, [CurrencyRateDate]
	, [FromCurrencyCode]
	, [ToCurrencyCode]
	, [AverageRate]
	, [EndOfDayRate]
	, [ModifiedDate]
    FROM
	[Sales].[CurrencyRate]
    WHERE 
	 ([CurrencyRateID] = @CurrencyRateId AND @CurrencyRateId is not null)
	OR ([CurrencyRateDate] = @CurrencyRateDate AND @CurrencyRateDate is not null)
	OR ([FromCurrencyCode] = @FromCurrencyCode AND @FromCurrencyCode is not null)
	OR ([ToCurrencyCode] = @ToCurrencyCode AND @ToCurrencyCode is not null)
	OR ([AverageRate] = @AverageRate AND @AverageRate is not null)
	OR ([EndOfDayRate] = @EndOfDayRate AND @EndOfDayRate is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_CurrencyRate_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CurrencyRate table using a dynamically generated query.
-- Table Comment: Currency exchange rates.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CurrencyRateID]
					, [CurrencyRateDate]
					, [FromCurrencyCode]
					, [ToCurrencyCode]
					, [AverageRate]
					, [EndOfDayRate]
					, [ModifiedDate]
					FROM [Sales].[CurrencyRate] {0}
				)
				SELECT
				       [CurrencyRateID],
				       [CurrencyRateDate],
				       [FromCurrencyCode],
				       [ToCurrencyCode],
				       [AverageRate],
				       [EndOfDayRate],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[CurrencyRate] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_Department_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Department table
-- Table Comment: Lookup table containing the departments within the Adventure Works Cycles company.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[DepartmentID],
					[Name],
					[GroupName],
					[ModifiedDate]
				FROM
					[HumanResources].[Department]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_Department_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Department table passing page index and page count parameters
-- Table Comment: Lookup table containing the departments within the Adventure Works Cycles company.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DepartmentID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DepartmentID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [GroupName]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[Department]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DepartmentID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [GroupName],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[Department]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_Department_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Department table
-- Table Comment: Lookup table containing the departments within the Adventure Works Cycles company.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DepartmentId" type="smallint" direction="Output" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GroupName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [HumanResources].[Department]
					(
					[Name]
					,[GroupName]
					,[ModifiedDate]
					)
				VALUES
					(
					@Name
					,@GroupName
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @DepartmentId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Department_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Department table
-- Table Comment: Lookup table containing the departments within the Adventure Works Cycles company.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GroupName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[HumanResources].[Department]
				SET
					[Name] = @Name
					,[GroupName] = @GroupName
					,[ModifiedDate] = @ModifiedDate
				WHERE
[DepartmentID] = @DepartmentId 
				
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Department_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Department table
-- Table Comment: Lookup table containing the departments within the Adventure Works Cycles company.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [HumanResources].[Department] WITH (ROWLOCK) 
				WHERE
					[DepartmentID] = @DepartmentId
					
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Department_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DepartmentID],
					[Name],
					[GroupName],
					[ModifiedDate]
				FROM
					[HumanResources].[Department]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Department_GetByDepartmentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DepartmentID],
					[Name],
					[GroupName],
					[ModifiedDate]
				FROM
					[HumanResources].[Department]
				WHERE
					[DepartmentID] = @DepartmentId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Department_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Department table passing nullable parameters
-- Table Comment: Lookup table containing the departments within the Adventure Works Cycles company.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@GroupName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DepartmentID]
	, [Name]
	, [GroupName]
	, [ModifiedDate]
    FROM
	[HumanResources].[Department]
    WHERE 
	 ([DepartmentID] = @DepartmentId OR @DepartmentId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([GroupName] = @GroupName OR @GroupName IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DepartmentID]
	, [Name]
	, [GroupName]
	, [ModifiedDate]
    FROM
	[HumanResources].[Department]
    WHERE 
	 ([DepartmentID] = @DepartmentId AND @DepartmentId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([GroupName] = @GroupName AND @GroupName is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="HumanResources" name="usp_adwTiers_Department_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Department table using a dynamically generated query.
-- Table Comment: Lookup table containing the departments within the Adventure Works Cycles company.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [DepartmentID]
					, [Name]
					, [GroupName]
					, [ModifiedDate]
					FROM [HumanResources].[Department] {0}
				)
				SELECT
				       [DepartmentID],
				       [Name],
				       [GroupName],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[Department] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the CustomerAddress table
-- Table Comment: Cross-reference table mapping customers to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[AddressID],
					[AddressTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[CustomerAddress]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CustomerAddress table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping customers to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [AddressID]'
				SET @SQL = @SQL + ', [AddressTypeID]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[CustomerAddress]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [AddressID],'
				SET @SQL = @SQL + ' [AddressTypeID],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[CustomerAddress]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the CustomerAddress table
-- Table Comment: Cross-reference table mapping customers to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Sales].[CustomerAddress]
					(
					[CustomerID]
					,[AddressID]
					,[AddressTypeID]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@CustomerId
					,@AddressId
					,@AddressTypeId
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the CustomerAddress table
-- Table Comment: Cross-reference table mapping customers to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[CustomerAddress]
				SET
					[CustomerID] = @CustomerId
					,[AddressID] = @AddressId
					,[AddressTypeID] = @AddressTypeId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CustomerID] = @OriginalCustomerId 
AND [AddressID] = @OriginalAddressId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the CustomerAddress table
-- Table Comment: Cross-reference table mapping customers to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[CustomerAddress] WITH (ROWLOCK) 
				WHERE
					[CustomerID] = @CustomerId
					AND [AddressID] = @AddressId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_GetByAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CustomerAddress table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CustomerID],
					[AddressID],
					[AddressTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[CustomerAddress]
				WHERE
					[AddressID] = @AddressId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_GetByAddressTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CustomerAddress table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CustomerID],
					[AddressID],
					[AddressTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[CustomerAddress]
				WHERE
					[AddressTypeID] = @AddressTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CustomerAddress table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CustomerID],
					[AddressID],
					[AddressTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[CustomerAddress]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CustomerAddress table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[AddressID],
					[AddressTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[CustomerAddress]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_GetByCustomerIdAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CustomerAddress table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[AddressID],
					[AddressTypeID],
					[rowguid],
					[ModifiedDate]
				FROM
					[Sales].[CustomerAddress]
				WHERE
					[CustomerID] = @CustomerId
					AND [AddressID] = @AddressId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the CustomerAddress table passing nullable parameters
-- Table Comment: Cross-reference table mapping customers to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerID]
	, [AddressID]
	, [AddressTypeID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[CustomerAddress]
    WHERE 
	 ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([AddressID] = @AddressId OR @AddressId IS NULL)
	AND ([AddressTypeID] = @AddressTypeId OR @AddressTypeId IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerID]
	, [AddressID]
	, [AddressTypeID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Sales].[CustomerAddress]
    WHERE 
	 ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([AddressID] = @AddressId AND @AddressId is not null)
	OR ([AddressTypeID] = @AddressTypeId AND @AddressTypeId is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_CustomerAddress_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CustomerAddress table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping customers to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerID]
					, [AddressID]
					, [AddressTypeID]
					, [rowguid]
					, [ModifiedDate]
					FROM [Sales].[CustomerAddress] {0}
				)
				SELECT
				       [CustomerID],
				       [AddressID],
				       [AddressTypeID],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[CustomerAddress] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Culture_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Culture table
-- Table Comment: Lookup table containing the languages in which some AdventureWorks data is stored.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CultureID],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[Culture]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Culture_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Culture table passing page index and page count parameters
-- Table Comment: Lookup table containing the languages in which some AdventureWorks data is stored.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CultureID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CultureID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[Culture]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CultureID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[Culture]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_Culture_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Culture table
-- Table Comment: Lookup table containing the languages in which some AdventureWorks data is stored.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[Culture]
					(
					[CultureID]
					,[Name]
					,[ModifiedDate]
					)
				VALUES
					(
					@CultureId
					,@Name
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Culture_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Culture table
-- Table Comment: Lookup table containing the languages in which some AdventureWorks data is stored.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@OriginalCultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[Culture]
				SET
					[CultureID] = @CultureId
					,[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CultureID] = @OriginalCultureId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Culture_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Culture table
-- Table Comment: Lookup table containing the languages in which some AdventureWorks data is stored.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[Culture] WITH (ROWLOCK) 
				WHERE
					[CultureID] = @CultureId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Culture_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Culture table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CultureID],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[Culture]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Culture_GetByCultureId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Culture table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CultureID],
					[Name],
					[ModifiedDate]
				FROM
					[Production].[Culture]
				WHERE
					[CultureID] = @CultureId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Culture_GetByProductDescriptionIdFromProductModelProductDescriptionCulture" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Culture].[CultureID]
       ,Production.[Culture].[Name]
       ,Production.[Culture].[ModifiedDate]
  FROM Production.[Culture]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelProductDescriptionCulture] 
                WHERE Production.[ProductModelProductDescriptionCulture].[ProductDescriptionID] = @ProductDescriptionId
                  AND Production.[ProductModelProductDescriptionCulture].[CultureID] = Production.[Culture].[CultureID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Culture_GetByProductModelIdFromProductModelProductDescriptionCulture" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Culture].[CultureID]
       ,Production.[Culture].[Name]
       ,Production.[Culture].[ModifiedDate]
  FROM Production.[Culture]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelProductDescriptionCulture] 
                WHERE Production.[ProductModelProductDescriptionCulture].[ProductModelID] = @ProductModelId
                  AND Production.[ProductModelProductDescriptionCulture].[CultureID] = Production.[Culture].[CultureID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Culture_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Culture table passing nullable parameters
-- Table Comment: Lookup table containing the languages in which some AdventureWorks data is stored.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CultureID]
	, [Name]
	, [ModifiedDate]
    FROM
	[Production].[Culture]
    WHERE 
	 ([CultureID] = @CultureId OR @CultureId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CultureID]
	, [Name]
	, [ModifiedDate]
    FROM
	[Production].[Culture]
    WHERE 
	 ([CultureID] = @CultureId AND @CultureId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_Culture_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Culture table using a dynamically generated query.
-- Table Comment: Lookup table containing the languages in which some AdventureWorks data is stored.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CultureID]
					, [Name]
					, [ModifiedDate]
					FROM [Production].[Culture] {0}
				)
				SELECT
				       [CultureID],
				       [Name],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[Culture] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the DatabaseLog table
-- Table Comment: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[DatabaseLogID],
					[PostTime],
					[DatabaseUser],
					[Event],
					[Schema],
					[Object],
					[TSQL],
					[XmlEvent]
				FROM
					[dbo].[DatabaseLog]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the DatabaseLog table passing page index and page count parameters
-- Table Comment: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DatabaseLogID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DatabaseLogID]'
				SET @SQL = @SQL + ', [PostTime]'
				SET @SQL = @SQL + ', [DatabaseUser]'
				SET @SQL = @SQL + ', [Event]'
				SET @SQL = @SQL + ', [Schema]'
				SET @SQL = @SQL + ', [Object]'
				SET @SQL = @SQL + ', [TSQL]'
				SET @SQL = @SQL + ', [XmlEvent]'
				SET @SQL = @SQL + ' FROM [dbo].[DatabaseLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DatabaseLogID],'
				SET @SQL = @SQL + ' [PostTime],'
				SET @SQL = @SQL + ' [DatabaseUser],'
				SET @SQL = @SQL + ' [Event],'
				SET @SQL = @SQL + ' [Schema],'
				SET @SQL = @SQL + ' [Object],'
				SET @SQL = @SQL + ' [TSQL],'
				SET @SQL = @SQL + ' [XmlEvent]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DatabaseLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the DatabaseLog table
-- Table Comment: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DatabaseLogId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PostTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DatabaseUser" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@SafeNameEvent" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@Schema" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@SafeNameObject" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@Tsql" type="nvarchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@XmlEvent" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[DatabaseLog]
					(
					[PostTime]
					,[DatabaseUser]
					,[Event]
					,[Schema]
					,[Object]
					,[TSQL]
					,[XmlEvent]
					)
				VALUES
					(
					@PostTime
					,@DatabaseUser
					,@SafeNameEvent
					,@Schema
					,@SafeNameObject
					,@Tsql
					,@XmlEvent
					)
				
				-- Get the identity value
				SET @DatabaseLogId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the DatabaseLog table
-- Table Comment: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DatabaseLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PostTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DatabaseUser" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@SafeNameEvent" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@Schema" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@SafeNameObject" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@Tsql" type="nvarchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@XmlEvent" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DatabaseLog]
				SET
					[PostTime] = @PostTime
					,[DatabaseUser] = @DatabaseUser
					,[Event] = @SafeNameEvent
					,[Schema] = @Schema
					,[Object] = @SafeNameObject
					,[TSQL] = @Tsql
					,[XmlEvent] = @XmlEvent
				WHERE
[DatabaseLogID] = @DatabaseLogId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the DatabaseLog table
-- Table Comment: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DatabaseLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[DatabaseLog] WITH (ROWLOCK) 
				WHERE
					[DatabaseLogID] = @DatabaseLogId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_GetByDatabaseLogId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the DatabaseLog table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DatabaseLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DatabaseLogID],
					[PostTime],
					[DatabaseUser],
					[Event],
					[Schema],
					[Object],
					[TSQL],
					[XmlEvent]
				FROM
					[dbo].[DatabaseLog]
				WHERE
					[DatabaseLogID] = @DatabaseLogId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the DatabaseLog table passing nullable parameters
-- Table Comment: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DatabaseLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PostTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@DatabaseUser" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@SafeNameEvent" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@Schema" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@SafeNameObject" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@Tsql" type="nvarchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault="null"/>
				<parameter name="@XmlEvent" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DatabaseLogID]
	, [PostTime]
	, [DatabaseUser]
	, [Event]
	, [Schema]
	, [Object]
	, [TSQL]
	, [XmlEvent]
    FROM
	[dbo].[DatabaseLog]
    WHERE 
	 ([DatabaseLogID] = @DatabaseLogId OR @DatabaseLogId IS NULL)
	AND ([PostTime] = @PostTime OR @PostTime IS NULL)
	AND ([DatabaseUser] = @DatabaseUser OR @DatabaseUser IS NULL)
	AND ([Event] = @SafeNameEvent OR @SafeNameEvent IS NULL)
	AND ([Schema] = @Schema OR @Schema IS NULL)
	AND ([Object] = @SafeNameObject OR @SafeNameObject IS NULL)
	AND ([TSQL] = @Tsql OR @Tsql IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DatabaseLogID]
	, [PostTime]
	, [DatabaseUser]
	, [Event]
	, [Schema]
	, [Object]
	, [TSQL]
	, [XmlEvent]
    FROM
	[dbo].[DatabaseLog]
    WHERE 
	 ([DatabaseLogID] = @DatabaseLogId AND @DatabaseLogId is not null)
	OR ([PostTime] = @PostTime AND @PostTime is not null)
	OR ([DatabaseUser] = @DatabaseUser AND @DatabaseUser is not null)
	OR ([Event] = @SafeNameEvent AND @SafeNameEvent is not null)
	OR ([Schema] = @Schema AND @Schema is not null)
	OR ([Object] = @SafeNameObject AND @SafeNameObject is not null)
	OR ([TSQL] = @Tsql AND @Tsql is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="usp_adwTiers_DatabaseLog_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the DatabaseLog table using a dynamically generated query.
-- Table Comment: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [DatabaseLogID]
					, [PostTime]
					, [DatabaseUser]
					, [Event]
					, [Schema]
					, [Object]
					, [TSQL]
					, [XmlEvent]
					FROM [dbo].[DatabaseLog] {0}
				)
				SELECT
				       [DatabaseLogID],
				       [PostTime],
				       [DatabaseUser],
				       [Event],
				       [Schema],
				       [Object],
				       [TSQL],
				       [XmlEvent]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[DatabaseLog] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the CreditCard table
-- Table Comment: Customer credit card information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CreditCardID],
					[CardType],
					[CardNumber],
					[ExpMonth],
					[ExpYear],
					[ModifiedDate]
				FROM
					[Sales].[CreditCard]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CreditCard table passing page index and page count parameters
-- Table Comment: Customer credit card information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CreditCardID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CreditCardID]'
				SET @SQL = @SQL + ', [CardType]'
				SET @SQL = @SQL + ', [CardNumber]'
				SET @SQL = @SQL + ', [ExpMonth]'
				SET @SQL = @SQL + ', [ExpYear]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[CreditCard]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CreditCardID],'
				SET @SQL = @SQL + ' [CardType],'
				SET @SQL = @SQL + ' [CardNumber],'
				SET @SQL = @SQL + ' [ExpMonth],'
				SET @SQL = @SQL + ' [ExpYear],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[CreditCard]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the CreditCard table
-- Table Comment: Customer credit card information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreditCardId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CardType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CardNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@ExpMonth" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@ExpYear" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[CreditCard]
					(
					[CardType]
					,[CardNumber]
					,[ExpMonth]
					,[ExpYear]
					,[ModifiedDate]
					)
				VALUES
					(
					@CardType
					,@CardNumber
					,@ExpMonth
					,@ExpYear
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @CreditCardId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the CreditCard table
-- Table Comment: Customer credit card information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CardType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CardNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@ExpMonth" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@ExpYear" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[CreditCard]
				SET
					[CardType] = @CardType
					,[CardNumber] = @CardNumber
					,[ExpMonth] = @ExpMonth
					,[ExpYear] = @ExpYear
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CreditCardID] = @CreditCardId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the CreditCard table
-- Table Comment: Customer credit card information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[CreditCard] WITH (ROWLOCK) 
				WHERE
					[CreditCardID] = @CreditCardId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_GetByCardNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CreditCard table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CardNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CreditCardID],
					[CardType],
					[CardNumber],
					[ExpMonth],
					[ExpYear],
					[ModifiedDate]
				FROM
					[Sales].[CreditCard]
				WHERE
					[CardNumber] = @CardNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_GetByCreditCardId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CreditCard table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CreditCardID],
					[CardType],
					[CardNumber],
					[ExpMonth],
					[ExpYear],
					[ModifiedDate]
				FROM
					[Sales].[CreditCard]
				WHERE
					[CreditCardID] = @CreditCardId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_GetByContactIdFromContactCreditCard" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Sales.[CreditCard].[CreditCardID]
       ,Sales.[CreditCard].[CardType]
       ,Sales.[CreditCard].[CardNumber]
       ,Sales.[CreditCard].[ExpMonth]
       ,Sales.[CreditCard].[ExpYear]
       ,Sales.[CreditCard].[ModifiedDate]
  FROM Sales.[CreditCard]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[ContactCreditCard] 
                WHERE Sales.[ContactCreditCard].[ContactID] = @ContactId
                  AND Sales.[ContactCreditCard].[CreditCardID] = Sales.[CreditCard].[CreditCardID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the CreditCard table passing nullable parameters
-- Table Comment: Customer credit card information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CardType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CardNumber" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@ExpMonth" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@ExpYear" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CreditCardID]
	, [CardType]
	, [CardNumber]
	, [ExpMonth]
	, [ExpYear]
	, [ModifiedDate]
    FROM
	[Sales].[CreditCard]
    WHERE 
	 ([CreditCardID] = @CreditCardId OR @CreditCardId IS NULL)
	AND ([CardType] = @CardType OR @CardType IS NULL)
	AND ([CardNumber] = @CardNumber OR @CardNumber IS NULL)
	AND ([ExpMonth] = @ExpMonth OR @ExpMonth IS NULL)
	AND ([ExpYear] = @ExpYear OR @ExpYear IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CreditCardID]
	, [CardType]
	, [CardNumber]
	, [ExpMonth]
	, [ExpYear]
	, [ModifiedDate]
    FROM
	[Sales].[CreditCard]
    WHERE 
	 ([CreditCardID] = @CreditCardId AND @CreditCardId is not null)
	OR ([CardType] = @CardType AND @CardType is not null)
	OR ([CardNumber] = @CardNumber AND @CardNumber is not null)
	OR ([ExpMonth] = @ExpMonth AND @ExpMonth is not null)
	OR ([ExpYear] = @ExpYear AND @ExpYear is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_CreditCard_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CreditCard table using a dynamically generated query.
-- Table Comment: Customer credit card information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CreditCardID]
					, [CardType]
					, [CardNumber]
					, [ExpMonth]
					, [ExpYear]
					, [ModifiedDate]
					FROM [Sales].[CreditCard] {0}
				)
				SELECT
				       [CreditCardID],
				       [CardType],
				       [CardNumber],
				       [ExpMonth],
				       [ExpYear],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[CreditCard] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the BillOfMaterials table
-- Table Comment: Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[BillOfMaterialsID],
					[ProductAssemblyID],
					[ComponentID],
					[StartDate],
					[EndDate],
					[UnitMeasureCode],
					[BOMLevel],
					[PerAssemblyQty],
					[ModifiedDate]
				FROM
					[Production].[BillOfMaterials]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the BillOfMaterials table passing page index and page count parameters
-- Table Comment: Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[BillOfMaterialsID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [BillOfMaterialsID]'
				SET @SQL = @SQL + ', [ProductAssemblyID]'
				SET @SQL = @SQL + ', [ComponentID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [UnitMeasureCode]'
				SET @SQL = @SQL + ', [BOMLevel]'
				SET @SQL = @SQL + ', [PerAssemblyQty]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[BillOfMaterials]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [BillOfMaterialsID],'
				SET @SQL = @SQL + ' [ProductAssemblyID],'
				SET @SQL = @SQL + ' [ComponentID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [UnitMeasureCode],'
				SET @SQL = @SQL + ' [BOMLevel],'
				SET @SQL = @SQL + ' [PerAssemblyQty],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[BillOfMaterials]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the BillOfMaterials table
-- Table Comment: Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillOfMaterialsId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductAssemblyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ComponentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BomLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@PerAssemblyQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[BillOfMaterials]
					(
					[ProductAssemblyID]
					,[ComponentID]
					,[StartDate]
					,[EndDate]
					,[UnitMeasureCode]
					,[BOMLevel]
					,[PerAssemblyQty]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductAssemblyId
					,@ComponentId
					,@StartDate
					,@EndDate
					,@UnitMeasureCode
					,@BomLevel
					,@PerAssemblyQty
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @BillOfMaterialsId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the BillOfMaterials table
-- Table Comment: Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillOfMaterialsId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductAssemblyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ComponentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@BomLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@PerAssemblyQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[BillOfMaterials]
				SET
					[ProductAssemblyID] = @ProductAssemblyId
					,[ComponentID] = @ComponentId
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[UnitMeasureCode] = @UnitMeasureCode
					,[BOMLevel] = @BomLevel
					,[PerAssemblyQty] = @PerAssemblyQty
					,[ModifiedDate] = @ModifiedDate
				WHERE
[BillOfMaterialsID] = @BillOfMaterialsId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the BillOfMaterials table
-- Table Comment: Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillOfMaterialsId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[BillOfMaterials] WITH (ROWLOCK) 
				WHERE
					[BillOfMaterialsID] = @BillOfMaterialsId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_GetByComponentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the BillOfMaterials table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ComponentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[BillOfMaterialsID],
					[ProductAssemblyID],
					[ComponentID],
					[StartDate],
					[EndDate],
					[UnitMeasureCode],
					[BOMLevel],
					[PerAssemblyQty],
					[ModifiedDate]
				FROM
					[Production].[BillOfMaterials]
				WHERE
					[ComponentID] = @ComponentId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_GetByProductAssemblyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the BillOfMaterials table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductAssemblyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[BillOfMaterialsID],
					[ProductAssemblyID],
					[ComponentID],
					[StartDate],
					[EndDate],
					[UnitMeasureCode],
					[BOMLevel],
					[PerAssemblyQty],
					[ModifiedDate]
				FROM
					[Production].[BillOfMaterials]
				WHERE
					[ProductAssemblyID] = @ProductAssemblyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_GetByProductAssemblyIdComponentIdStartDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the BillOfMaterials table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductAssemblyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ComponentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[BillOfMaterialsID],
					[ProductAssemblyID],
					[ComponentID],
					[StartDate],
					[EndDate],
					[UnitMeasureCode],
					[BOMLevel],
					[PerAssemblyQty],
					[ModifiedDate]
				FROM
					[Production].[BillOfMaterials]
				WHERE
					[ProductAssemblyID] = @ProductAssemblyId
					AND [ComponentID] = @ComponentId
					AND [StartDate] = @StartDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_GetByUnitMeasureCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the BillOfMaterials table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[BillOfMaterialsID],
					[ProductAssemblyID],
					[ComponentID],
					[StartDate],
					[EndDate],
					[UnitMeasureCode],
					[BOMLevel],
					[PerAssemblyQty],
					[ModifiedDate]
				FROM
					[Production].[BillOfMaterials]
				WHERE
					[UnitMeasureCode] = @UnitMeasureCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_GetByBillOfMaterialsId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the BillOfMaterials table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@BillOfMaterialsId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[BillOfMaterialsID],
					[ProductAssemblyID],
					[ComponentID],
					[StartDate],
					[EndDate],
					[UnitMeasureCode],
					[BOMLevel],
					[PerAssemblyQty],
					[ModifiedDate]
				FROM
					[Production].[BillOfMaterials]
				WHERE
					[BillOfMaterialsID] = @BillOfMaterialsId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the BillOfMaterials table passing nullable parameters
-- Table Comment: Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@BillOfMaterialsId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductAssemblyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ComponentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UnitMeasureCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@BomLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@PerAssemblyQty" type="decimal" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [BillOfMaterialsID]
	, [ProductAssemblyID]
	, [ComponentID]
	, [StartDate]
	, [EndDate]
	, [UnitMeasureCode]
	, [BOMLevel]
	, [PerAssemblyQty]
	, [ModifiedDate]
    FROM
	[Production].[BillOfMaterials]
    WHERE 
	 ([BillOfMaterialsID] = @BillOfMaterialsId OR @BillOfMaterialsId IS NULL)
	AND ([ProductAssemblyID] = @ProductAssemblyId OR @ProductAssemblyId IS NULL)
	AND ([ComponentID] = @ComponentId OR @ComponentId IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([UnitMeasureCode] = @UnitMeasureCode OR @UnitMeasureCode IS NULL)
	AND ([BOMLevel] = @BomLevel OR @BomLevel IS NULL)
	AND ([PerAssemblyQty] = @PerAssemblyQty OR @PerAssemblyQty IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [BillOfMaterialsID]
	, [ProductAssemblyID]
	, [ComponentID]
	, [StartDate]
	, [EndDate]
	, [UnitMeasureCode]
	, [BOMLevel]
	, [PerAssemblyQty]
	, [ModifiedDate]
    FROM
	[Production].[BillOfMaterials]
    WHERE 
	 ([BillOfMaterialsID] = @BillOfMaterialsId AND @BillOfMaterialsId is not null)
	OR ([ProductAssemblyID] = @ProductAssemblyId AND @ProductAssemblyId is not null)
	OR ([ComponentID] = @ComponentId AND @ComponentId is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([UnitMeasureCode] = @UnitMeasureCode AND @UnitMeasureCode is not null)
	OR ([BOMLevel] = @BomLevel AND @BomLevel is not null)
	OR ([PerAssemblyQty] = @PerAssemblyQty AND @PerAssemblyQty is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_BillOfMaterials_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the BillOfMaterials table using a dynamically generated query.
-- Table Comment: Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [BillOfMaterialsID]
					, [ProductAssemblyID]
					, [ComponentID]
					, [StartDate]
					, [EndDate]
					, [UnitMeasureCode]
					, [BOMLevel]
					, [PerAssemblyQty]
					, [ModifiedDate]
					FROM [Production].[BillOfMaterials] {0}
				)
				SELECT
				       [BillOfMaterialsID],
				       [ProductAssemblyID],
				       [ComponentID],
				       [StartDate],
				       [EndDate],
				       [UnitMeasureCode],
				       [BOMLevel],
				       [PerAssemblyQty],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[BillOfMaterials] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the CountryRegionCurrency table
-- Table Comment: Cross-reference table mapping ISO currency codes to a country or region.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CountryRegionCode],
					[CurrencyCode],
					[ModifiedDate]
				FROM
					[Sales].[CountryRegionCurrency]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CountryRegionCurrency table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping ISO currency codes to a country or region.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CountryRegionCode]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CountryRegionCode]'
				SET @SQL = @SQL + ', [CurrencyCode]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[CountryRegionCurrency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CountryRegionCode],'
				SET @SQL = @SQL + ' [CurrencyCode],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[CountryRegionCurrency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the CountryRegionCurrency table
-- Table Comment: Cross-reference table mapping ISO currency codes to a country or region.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[CountryRegionCurrency]
					(
					[CountryRegionCode]
					,[CurrencyCode]
					,[ModifiedDate]
					)
				VALUES
					(
					@CountryRegionCode
					,@CurrencyCode
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the CountryRegionCurrency table
-- Table Comment: Cross-reference table mapping ISO currency codes to a country or region.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalCountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalCurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[CountryRegionCurrency]
				SET
					[CountryRegionCode] = @CountryRegionCode
					,[CurrencyCode] = @CurrencyCode
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CountryRegionCode] = @OriginalCountryRegionCode 
AND [CurrencyCode] = @OriginalCurrencyCode 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the CountryRegionCurrency table
-- Table Comment: Cross-reference table mapping ISO currency codes to a country or region.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[CountryRegionCurrency] WITH (ROWLOCK) 
				WHERE
					[CountryRegionCode] = @CountryRegionCode
					AND [CurrencyCode] = @CurrencyCode
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_GetByCountryRegionCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CountryRegionCurrency table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CountryRegionCode],
					[CurrencyCode],
					[ModifiedDate]
				FROM
					[Sales].[CountryRegionCurrency]
				WHERE
					[CountryRegionCode] = @CountryRegionCode
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_GetByCurrencyCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CountryRegionCurrency table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CountryRegionCode],
					[CurrencyCode],
					[ModifiedDate]
				FROM
					[Sales].[CountryRegionCurrency]
				WHERE
					[CurrencyCode] = @CurrencyCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_GetByCountryRegionCodeCurrencyCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CountryRegionCurrency table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CountryRegionCode],
					[CurrencyCode],
					[ModifiedDate]
				FROM
					[Sales].[CountryRegionCurrency]
				WHERE
					[CountryRegionCode] = @CountryRegionCode
					AND [CurrencyCode] = @CurrencyCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the CountryRegionCurrency table passing nullable parameters
-- Table Comment: Cross-reference table mapping ISO currency codes to a country or region.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CountryRegionCode]
	, [CurrencyCode]
	, [ModifiedDate]
    FROM
	[Sales].[CountryRegionCurrency]
    WHERE 
	 ([CountryRegionCode] = @CountryRegionCode OR @CountryRegionCode IS NULL)
	AND ([CurrencyCode] = @CurrencyCode OR @CurrencyCode IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CountryRegionCode]
	, [CurrencyCode]
	, [ModifiedDate]
    FROM
	[Sales].[CountryRegionCurrency]
    WHERE 
	 ([CountryRegionCode] = @CountryRegionCode AND @CountryRegionCode is not null)
	OR ([CurrencyCode] = @CurrencyCode AND @CurrencyCode is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_CountryRegionCurrency_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CountryRegionCurrency table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping ISO currency codes to a country or region.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CountryRegionCode]
					, [CurrencyCode]
					, [ModifiedDate]
					FROM [Sales].[CountryRegionCurrency] {0}
				)
				SELECT
				       [CountryRegionCode],
				       [CurrencyCode],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[CountryRegionCurrency] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_Contact_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Contact table
-- Table Comment: Names of each employee, customer contact, and vendor contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ContactID],
					[NameStyle],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[EmailAddress],
					[EmailPromotion],
					[Phone],
					[PasswordHash],
					[PasswordSalt],
					[AdditionalContactInfo],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Contact]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_Contact_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Contact table passing page index and page count parameters
-- Table Comment: Names of each employee, customer contact, and vendor contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ContactID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [NameStyle]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [EmailPromotion]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [PasswordHash]'
				SET @SQL = @SQL + ', [PasswordSalt]'
				SET @SQL = @SQL + ', [AdditionalContactInfo]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Person].[Contact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [NameStyle],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [EmailPromotion],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [PasswordHash],'
				SET @SQL = @SQL + ' [PasswordSalt],'
				SET @SQL = @SQL + ' [AdditionalContactInfo],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[Contact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_Contact_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Contact table
-- Table Comment: Names of each employee, customer contact, and vendor contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NameStyle" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@MiddleName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Suffix" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@EmailAddress" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@EmailPromotion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@PasswordHash" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@PasswordSalt" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@AdditionalContactInfo" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Person].[Contact]
					(
					[NameStyle]
					,[Title]
					,[FirstName]
					,[MiddleName]
					,[LastName]
					,[Suffix]
					,[EmailAddress]
					,[EmailPromotion]
					,[Phone]
					,[PasswordHash]
					,[PasswordSalt]
					,[AdditionalContactInfo]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@NameStyle
					,@Title
					,@FirstName
					,@MiddleName
					,@LastName
					,@Suffix
					,@EmailAddress
					,@EmailPromotion
					,@Phone
					,@PasswordHash
					,@PasswordSalt
					,@AdditionalContactInfo
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @ContactId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Contact table
-- Table Comment: Names of each employee, customer contact, and vendor contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NameStyle" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@MiddleName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Suffix" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@EmailAddress" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@EmailPromotion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@PasswordHash" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@PasswordSalt" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@AdditionalContactInfo" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Person].[Contact]
				SET
					[NameStyle] = @NameStyle
					,[Title] = @Title
					,[FirstName] = @FirstName
					,[MiddleName] = @MiddleName
					,[LastName] = @LastName
					,[Suffix] = @Suffix
					,[EmailAddress] = @EmailAddress
					,[EmailPromotion] = @EmailPromotion
					,[Phone] = @Phone
					,[PasswordHash] = @PasswordHash
					,[PasswordSalt] = @PasswordSalt
					,[AdditionalContactInfo] = @AdditionalContactInfo
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ContactID] = @ContactId 
				
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Contact table
-- Table Comment: Names of each employee, customer contact, and vendor contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Person].[Contact] WITH (ROWLOCK) 
				WHERE
					[ContactID] = @ContactId
					
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Contact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ContactID],
					[NameStyle],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[EmailAddress],
					[EmailPromotion],
					[Phone],
					[PasswordHash],
					[PasswordSalt],
					[AdditionalContactInfo],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Contact]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_GetByEmailAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Contact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmailAddress" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ContactID],
					[NameStyle],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[EmailAddress],
					[EmailPromotion],
					[Phone],
					[PasswordHash],
					[PasswordSalt],
					[AdditionalContactInfo],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Contact]
				WHERE
					[EmailAddress] = @EmailAddress
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_GetByContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Contact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ContactID],
					[NameStyle],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[EmailAddress],
					[EmailPromotion],
					[Phone],
					[PasswordHash],
					[PasswordSalt],
					[AdditionalContactInfo],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Contact]
				WHERE
					[ContactID] = @ContactId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_GetByAdditionalContactInfo" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Contact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AdditionalContactInfo" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ContactID],
					[NameStyle],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[EmailAddress],
					[EmailPromotion],
					[Phone],
					[PasswordHash],
					[PasswordSalt],
					[AdditionalContactInfo],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[Contact]
				WHERE
					[AdditionalContactInfo] = @AdditionalContactInfo
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_GetByCreditCardIdFromContactCreditCard" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[Contact].[ContactID]
       ,Person.[Contact].[NameStyle]
       ,Person.[Contact].[Title]
       ,Person.[Contact].[FirstName]
       ,Person.[Contact].[MiddleName]
       ,Person.[Contact].[LastName]
       ,Person.[Contact].[Suffix]
       ,Person.[Contact].[EmailAddress]
       ,Person.[Contact].[EmailPromotion]
       ,Person.[Contact].[Phone]
       ,Person.[Contact].[PasswordHash]
       ,Person.[Contact].[PasswordSalt]
       ,Person.[Contact].[AdditionalContactInfo]
       ,Person.[Contact].[rowguid]
       ,Person.[Contact].[ModifiedDate]
  FROM Person.[Contact]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[ContactCreditCard] 
                WHERE Sales.[ContactCreditCard].[CreditCardID] = @CreditCardId
                  AND Sales.[ContactCreditCard].[ContactID] = Person.[Contact].[ContactID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_GetByCustomerIdFromStoreContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[Contact].[ContactID]
       ,Person.[Contact].[NameStyle]
       ,Person.[Contact].[Title]
       ,Person.[Contact].[FirstName]
       ,Person.[Contact].[MiddleName]
       ,Person.[Contact].[LastName]
       ,Person.[Contact].[Suffix]
       ,Person.[Contact].[EmailAddress]
       ,Person.[Contact].[EmailPromotion]
       ,Person.[Contact].[Phone]
       ,Person.[Contact].[PasswordHash]
       ,Person.[Contact].[PasswordSalt]
       ,Person.[Contact].[AdditionalContactInfo]
       ,Person.[Contact].[rowguid]
       ,Person.[Contact].[ModifiedDate]
  FROM Person.[Contact]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[StoreContact] 
                WHERE Sales.[StoreContact].[CustomerID] = @CustomerId
                  AND Sales.[StoreContact].[ContactID] = Person.[Contact].[ContactID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_GetByVendorIdFromVendorContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[Contact].[ContactID]
       ,Person.[Contact].[NameStyle]
       ,Person.[Contact].[Title]
       ,Person.[Contact].[FirstName]
       ,Person.[Contact].[MiddleName]
       ,Person.[Contact].[LastName]
       ,Person.[Contact].[Suffix]
       ,Person.[Contact].[EmailAddress]
       ,Person.[Contact].[EmailPromotion]
       ,Person.[Contact].[Phone]
       ,Person.[Contact].[PasswordHash]
       ,Person.[Contact].[PasswordSalt]
       ,Person.[Contact].[AdditionalContactInfo]
       ,Person.[Contact].[rowguid]
       ,Person.[Contact].[ModifiedDate]
  FROM Person.[Contact]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorContact] 
                WHERE Purchasing.[VendorContact].[VendorID] = @VendorId
                  AND Purchasing.[VendorContact].[ContactID] = Person.[Contact].[ContactID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_Contact_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Contact table passing nullable parameters
-- Table Comment: Names of each employee, customer contact, and vendor contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@NameStyle" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@MiddleName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Suffix" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@EmailAddress" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@EmailPromotion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@PasswordHash" type="varchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@PasswordSalt" type="varchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@AdditionalContactInfo" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ContactID]
	, [NameStyle]
	, [Title]
	, [FirstName]
	, [MiddleName]
	, [LastName]
	, [Suffix]
	, [EmailAddress]
	, [EmailPromotion]
	, [Phone]
	, [PasswordHash]
	, [PasswordSalt]
	, [AdditionalContactInfo]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[Contact]
    WHERE 
	 ([ContactID] = @ContactId OR @ContactId IS NULL)
	AND ([NameStyle] = @NameStyle OR @NameStyle IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([FirstName] = @FirstName OR @FirstName IS NULL)
	AND ([MiddleName] = @MiddleName OR @MiddleName IS NULL)
	AND ([LastName] = @LastName OR @LastName IS NULL)
	AND ([Suffix] = @Suffix OR @Suffix IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([EmailPromotion] = @EmailPromotion OR @EmailPromotion IS NULL)
	AND ([Phone] = @Phone OR @Phone IS NULL)
	AND ([PasswordHash] = @PasswordHash OR @PasswordHash IS NULL)
	AND ([PasswordSalt] = @PasswordSalt OR @PasswordSalt IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ContactID]
	, [NameStyle]
	, [Title]
	, [FirstName]
	, [MiddleName]
	, [LastName]
	, [Suffix]
	, [EmailAddress]
	, [EmailPromotion]
	, [Phone]
	, [PasswordHash]
	, [PasswordSalt]
	, [AdditionalContactInfo]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[Contact]
    WHERE 
	 ([ContactID] = @ContactId AND @ContactId is not null)
	OR ([NameStyle] = @NameStyle AND @NameStyle is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([FirstName] = @FirstName AND @FirstName is not null)
	OR ([MiddleName] = @MiddleName AND @MiddleName is not null)
	OR ([LastName] = @LastName AND @LastName is not null)
	OR ([Suffix] = @Suffix AND @Suffix is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([EmailPromotion] = @EmailPromotion AND @EmailPromotion is not null)
	OR ([Phone] = @Phone AND @Phone is not null)
	OR ([PasswordHash] = @PasswordHash AND @PasswordHash is not null)
	OR ([PasswordSalt] = @PasswordSalt AND @PasswordSalt is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Person" name="usp_adwTiers_Contact_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Contact table using a dynamically generated query.
-- Table Comment: Names of each employee, customer contact, and vendor contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ContactID]
					, [NameStyle]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [EmailAddress]
					, [EmailPromotion]
					, [Phone]
					, [PasswordHash]
					, [PasswordSalt]
					, [AdditionalContactInfo]
					, [rowguid]
					, [ModifiedDate]
					FROM [Person].[Contact] {0}
				)
				SELECT
				       [ContactID],
				       [NameStyle],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [EmailAddress],
				       [EmailPromotion],
				       [Phone],
				       [PasswordHash],
				       [PasswordSalt],
				       [AdditionalContactInfo],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[Contact] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the AWBuildVersion table
-- Table Comment: Current version number of the AdventureWorks sample database. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SystemInformationID],
					[Database Version],
					[VersionDate],
					[ModifiedDate]
				FROM
					[dbo].[AWBuildVersion]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the AWBuildVersion table passing page index and page count parameters
-- Table Comment: Current version number of the AdventureWorks sample database. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SystemInformationID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SystemInformationID]'
				SET @SQL = @SQL + ', [Database Version]'
				SET @SQL = @SQL + ', [VersionDate]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[AWBuildVersion]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SystemInformationID],'
				SET @SQL = @SQL + ' [Database Version],'
				SET @SQL = @SQL + ' [VersionDate],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AWBuildVersion]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the AWBuildVersion table
-- Table Comment: Current version number of the AdventureWorks sample database. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SystemInformationId" type="tinyint" direction="Output" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DatabaseVersion" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@VersionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[AWBuildVersion]
					(
					[Database Version]
					,[VersionDate]
					,[ModifiedDate]
					)
				VALUES
					(
					@DatabaseVersion
					,@VersionDate
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @SystemInformationId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the AWBuildVersion table
-- Table Comment: Current version number of the AdventureWorks sample database. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SystemInformationId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DatabaseVersion" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@VersionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AWBuildVersion]
				SET
					[Database Version] = @DatabaseVersion
					,[VersionDate] = @VersionDate
					,[ModifiedDate] = @ModifiedDate
				WHERE
[SystemInformationID] = @SystemInformationId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the AWBuildVersion table
-- Table Comment: Current version number of the AdventureWorks sample database. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SystemInformationId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AWBuildVersion] WITH (ROWLOCK) 
				WHERE
					[SystemInformationID] = @SystemInformationId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_GetBySystemInformationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the AWBuildVersion table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SystemInformationId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SystemInformationID],
					[Database Version],
					[VersionDate],
					[ModifiedDate]
				FROM
					[dbo].[AWBuildVersion]
				WHERE
					[SystemInformationID] = @SystemInformationId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the AWBuildVersion table passing nullable parameters
-- Table Comment: Current version number of the AdventureWorks sample database. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SystemInformationId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@DatabaseVersion" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@VersionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SystemInformationID]
	, [Database Version]
	, [VersionDate]
	, [ModifiedDate]
    FROM
	[dbo].[AWBuildVersion]
    WHERE 
	 ([SystemInformationID] = @SystemInformationId OR @SystemInformationId IS NULL)
	AND ([Database Version] = @DatabaseVersion OR @DatabaseVersion IS NULL)
	AND ([VersionDate] = @VersionDate OR @VersionDate IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SystemInformationID]
	, [Database Version]
	, [VersionDate]
	, [ModifiedDate]
    FROM
	[dbo].[AWBuildVersion]
    WHERE 
	 ([SystemInformationID] = @SystemInformationId AND @SystemInformationId is not null)
	OR ([Database Version] = @DatabaseVersion AND @DatabaseVersion is not null)
	OR ([VersionDate] = @VersionDate AND @VersionDate is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="usp_adwTiers_AWBuildVersion_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the AWBuildVersion table using a dynamically generated query.
-- Table Comment: Current version number of the AdventureWorks sample database. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SystemInformationID]
					, [Database Version]
					, [VersionDate]
					, [ModifiedDate]
					FROM [dbo].[AWBuildVersion] {0}
				)
				SELECT
				       [SystemInformationID],
				       [Database Version],
				       [VersionDate],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AWBuildVersion] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the CountryRegion table
-- Table Comment: Lookup table containing the ISO standard codes for countries and regions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CountryRegionCode],
					[Name],
					[ModifiedDate]
				FROM
					[Person].[CountryRegion]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CountryRegion table passing page index and page count parameters
-- Table Comment: Lookup table containing the ISO standard codes for countries and regions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CountryRegionCode]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CountryRegionCode]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Person].[CountryRegion]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CountryRegionCode],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[CountryRegion]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the CountryRegion table
-- Table Comment: Lookup table containing the ISO standard codes for countries and regions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Person].[CountryRegion]
					(
					[CountryRegionCode]
					,[Name]
					,[ModifiedDate]
					)
				VALUES
					(
					@CountryRegionCode
					,@Name
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the CountryRegion table
-- Table Comment: Lookup table containing the ISO standard codes for countries and regions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@OriginalCountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Person].[CountryRegion]
				SET
					[CountryRegionCode] = @CountryRegionCode
					,[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CountryRegionCode] = @OriginalCountryRegionCode 
				
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the CountryRegion table
-- Table Comment: Lookup table containing the ISO standard codes for countries and regions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Person].[CountryRegion] WITH (ROWLOCK) 
				WHERE
					[CountryRegionCode] = @CountryRegionCode
					
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CountryRegion table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CountryRegionCode],
					[Name],
					[ModifiedDate]
				FROM
					[Person].[CountryRegion]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_GetByCountryRegionCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the CountryRegion table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CountryRegionCode],
					[Name],
					[ModifiedDate]
				FROM
					[Person].[CountryRegion]
				WHERE
					[CountryRegionCode] = @CountryRegionCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_GetByCurrencyCodeFromCountryRegionCurrency" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CurrencyCode" type="nchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[CountryRegion].[CountryRegionCode]
       ,Person.[CountryRegion].[Name]
       ,Person.[CountryRegion].[ModifiedDate]
  FROM Person.[CountryRegion]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[CountryRegionCurrency] 
                WHERE Sales.[CountryRegionCurrency].[CurrencyCode] = @CurrencyCode
                  AND Sales.[CountryRegionCurrency].[CountryRegionCode] = Person.[CountryRegion].[CountryRegionCode]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the CountryRegion table passing nullable parameters
-- Table Comment: Lookup table containing the ISO standard codes for countries and regions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CountryRegionCode" type="nvarchar" direction="Input" size="3" precision="0" scale="0" param="(3)" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CountryRegionCode]
	, [Name]
	, [ModifiedDate]
    FROM
	[Person].[CountryRegion]
    WHERE 
	 ([CountryRegionCode] = @CountryRegionCode OR @CountryRegionCode IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CountryRegionCode]
	, [Name]
	, [ModifiedDate]
    FROM
	[Person].[CountryRegion]
    WHERE 
	 ([CountryRegionCode] = @CountryRegionCode AND @CountryRegionCode is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Person" name="usp_adwTiers_CountryRegion_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the CountryRegion table using a dynamically generated query.
-- Table Comment: Lookup table containing the ISO standard codes for countries and regions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CountryRegionCode]
					, [Name]
					, [ModifiedDate]
					FROM [Person].[CountryRegion] {0}
				)
				SELECT
				       [CountryRegionCode],
				       [Name],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[CountryRegion] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ContactCreditCard table
-- Table Comment: Cross-reference table mapping customers in the Contact table to their credit card information in the CreditCard table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ContactID],
					[CreditCardID],
					[ModifiedDate]
				FROM
					[Sales].[ContactCreditCard]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ContactCreditCard table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping customers in the Contact table to their credit card information in the CreditCard table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ContactID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [CreditCardID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[ContactCreditCard]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [CreditCardID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[ContactCreditCard]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ContactCreditCard table
-- Table Comment: Cross-reference table mapping customers in the Contact table to their credit card information in the CreditCard table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[ContactCreditCard]
					(
					[ContactID]
					,[CreditCardID]
					,[ModifiedDate]
					)
				VALUES
					(
					@ContactId
					,@CreditCardId
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ContactCreditCard table
-- Table Comment: Cross-reference table mapping customers in the Contact table to their credit card information in the CreditCard table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[ContactCreditCard]
				SET
					[ContactID] = @ContactId
					,[CreditCardID] = @CreditCardId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ContactID] = @OriginalContactId 
AND [CreditCardID] = @OriginalCreditCardId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ContactCreditCard table
-- Table Comment: Cross-reference table mapping customers in the Contact table to their credit card information in the CreditCard table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[ContactCreditCard] WITH (ROWLOCK) 
				WHERE
					[ContactID] = @ContactId
					AND [CreditCardID] = @CreditCardId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_GetByContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ContactCreditCard table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ContactID],
					[CreditCardID],
					[ModifiedDate]
				FROM
					[Sales].[ContactCreditCard]
				WHERE
					[ContactID] = @ContactId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_GetByCreditCardId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ContactCreditCard table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ContactID],
					[CreditCardID],
					[ModifiedDate]
				FROM
					[Sales].[ContactCreditCard]
				WHERE
					[CreditCardID] = @CreditCardId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_GetByContactIdCreditCardId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ContactCreditCard table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ContactID],
					[CreditCardID],
					[ModifiedDate]
				FROM
					[Sales].[ContactCreditCard]
				WHERE
					[ContactID] = @ContactId
					AND [CreditCardID] = @CreditCardId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ContactCreditCard table passing nullable parameters
-- Table Comment: Cross-reference table mapping customers in the Contact table to their credit card information in the CreditCard table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreditCardId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ContactID]
	, [CreditCardID]
	, [ModifiedDate]
    FROM
	[Sales].[ContactCreditCard]
    WHERE 
	 ([ContactID] = @ContactId OR @ContactId IS NULL)
	AND ([CreditCardID] = @CreditCardId OR @CreditCardId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ContactID]
	, [CreditCardID]
	, [ModifiedDate]
    FROM
	[Sales].[ContactCreditCard]
    WHERE 
	 ([ContactID] = @ContactId AND @ContactId is not null)
	OR ([CreditCardID] = @CreditCardId AND @CreditCardId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_ContactCreditCard_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ContactCreditCard table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping customers in the Contact table to their credit card information in the CreditCard table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ContactID]
					, [CreditCardID]
					, [ModifiedDate]
					FROM [Sales].[ContactCreditCard] {0}
				)
				SELECT
				       [ContactID],
				       [CreditCardID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[ContactCreditCard] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Document_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Document table
-- Table Comment: Product maintenance documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[DocumentID],
					[Title],
					[FileName],
					[FileExtension],
					[Revision],
					[ChangeNumber],
					[Status],
					[DocumentSummary],
					[Document],
					[ModifiedDate]
				FROM
					[Production].[Document]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Document_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Document table passing page index and page count parameters
-- Table Comment: Product maintenance documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DocumentID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DocumentID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FileName]'
				SET @SQL = @SQL + ', [FileExtension]'
				SET @SQL = @SQL + ', [Revision]'
				SET @SQL = @SQL + ', [ChangeNumber]'
				SET @SQL = @SQL + ', [Status]'
				SET @SQL = @SQL + ', [DocumentSummary]'
				SET @SQL = @SQL + ', [Document]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[Document]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DocumentID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FileName],'
				SET @SQL = @SQL + ' [FileExtension],'
				SET @SQL = @SQL + ' [Revision],'
				SET @SQL = @SQL + ' [ChangeNumber],'
				SET @SQL = @SQL + ' [Status],'
				SET @SQL = @SQL + ' [DocumentSummary],'
				SET @SQL = @SQL + ' [Document],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[Document]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_Document_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Document table
-- Table Comment: Product maintenance documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DocumentId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@FileName" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault=""/>
				<parameter name="@FileExtension" type="nvarchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@Revision" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@ChangeNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentSummary" type="nvarchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@Document" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[Document]
					(
					[Title]
					,[FileName]
					,[FileExtension]
					,[Revision]
					,[ChangeNumber]
					,[Status]
					,[DocumentSummary]
					,[Document]
					,[ModifiedDate]
					)
				VALUES
					(
					@Title
					,@FileName
					,@FileExtension
					,@Revision
					,@ChangeNumber
					,@Status
					,@DocumentSummary
					,@Document
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @DocumentId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Document_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Document table
-- Table Comment: Product maintenance documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@FileName" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault=""/>
				<parameter name="@FileExtension" type="nvarchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
				<parameter name="@Revision" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@ChangeNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentSummary" type="nvarchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@Document" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[Document]
				SET
					[Title] = @Title
					,[FileName] = @FileName
					,[FileExtension] = @FileExtension
					,[Revision] = @Revision
					,[ChangeNumber] = @ChangeNumber
					,[Status] = @Status
					,[DocumentSummary] = @DocumentSummary
					,[Document] = @Document
					,[ModifiedDate] = @ModifiedDate
				WHERE
[DocumentID] = @DocumentId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Document_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Document table
-- Table Comment: Product maintenance documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[Document] WITH (ROWLOCK) 
				WHERE
					[DocumentID] = @DocumentId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Document_GetByFileNameRevision" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Document table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FileName" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault=""/>
				<parameter name="@Revision" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DocumentID],
					[Title],
					[FileName],
					[FileExtension],
					[Revision],
					[ChangeNumber],
					[Status],
					[DocumentSummary],
					[Document],
					[ModifiedDate]
				FROM
					[Production].[Document]
				WHERE
					[FileName] = @FileName
					AND [Revision] = @Revision
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Document_GetByDocumentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Document table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DocumentID],
					[Title],
					[FileName],
					[FileExtension],
					[Revision],
					[ChangeNumber],
					[Status],
					[DocumentSummary],
					[Document],
					[ModifiedDate]
				FROM
					[Production].[Document]
				WHERE
					[DocumentID] = @DocumentId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Document_GetByProductIdFromProductDocument" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Document].[DocumentID]
       ,Production.[Document].[Title]
       ,Production.[Document].[FileName]
       ,Production.[Document].[FileExtension]
       ,Production.[Document].[Revision]
       ,Production.[Document].[ChangeNumber]
       ,Production.[Document].[Status]
       ,Production.[Document].[DocumentSummary]
       ,Production.[Document].[Document]
       ,Production.[Document].[ModifiedDate]
  FROM Production.[Document]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductDocument] 
                WHERE Production.[ProductDocument].[ProductID] = @ProductId
                  AND Production.[ProductDocument].[DocumentID] = Production.[Document].[DocumentID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Document_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Document table passing nullable parameters
-- Table Comment: Product maintenance documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@FileName" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="null"/>
				<parameter name="@FileExtension" type="nvarchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault="null"/>
				<parameter name="@Revision" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@ChangeNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Status" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@DocumentSummary" type="nvarchar" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault="null"/>
				<parameter name="@Document" type="varbinary" direction="Input" size="-1" precision="0" scale="0" param="(MAX)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DocumentID]
	, [Title]
	, [FileName]
	, [FileExtension]
	, [Revision]
	, [ChangeNumber]
	, [Status]
	, [DocumentSummary]
	, [Document]
	, [ModifiedDate]
    FROM
	[Production].[Document]
    WHERE 
	 ([DocumentID] = @DocumentId OR @DocumentId IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([FileName] = @FileName OR @FileName IS NULL)
	AND ([FileExtension] = @FileExtension OR @FileExtension IS NULL)
	AND ([Revision] = @Revision OR @Revision IS NULL)
	AND ([ChangeNumber] = @ChangeNumber OR @ChangeNumber IS NULL)
	AND ([Status] = @Status OR @Status IS NULL)
	AND ([DocumentSummary] = @DocumentSummary OR @DocumentSummary IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DocumentID]
	, [Title]
	, [FileName]
	, [FileExtension]
	, [Revision]
	, [ChangeNumber]
	, [Status]
	, [DocumentSummary]
	, [Document]
	, [ModifiedDate]
    FROM
	[Production].[Document]
    WHERE 
	 ([DocumentID] = @DocumentId AND @DocumentId is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([FileName] = @FileName AND @FileName is not null)
	OR ([FileExtension] = @FileExtension AND @FileExtension is not null)
	OR ([Revision] = @Revision AND @Revision is not null)
	OR ([ChangeNumber] = @ChangeNumber AND @ChangeNumber is not null)
	OR ([Status] = @Status AND @Status is not null)
	OR ([DocumentSummary] = @DocumentSummary AND @DocumentSummary is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_Document_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Document table using a dynamically generated query.
-- Table Comment: Product maintenance documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [DocumentID]
					, [Title]
					, [FileName]
					, [FileExtension]
					, [Revision]
					, [ChangeNumber]
					, [Status]
					, [DocumentSummary]
					, [Document]
					, [ModifiedDate]
					FROM [Production].[Document] {0}
				)
				SELECT
				       [DocumentID],
				       [Title],
				       [FileName],
				       [FileExtension],
				       [Revision],
				       [ChangeNumber],
				       [Status],
				       [DocumentSummary],
				       [Document],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[Document] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_ContactType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ContactType table
-- Table Comment: Lookup table containing the types of contacts stored in Contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ContactTypeID],
					[Name],
					[ModifiedDate]
				FROM
					[Person].[ContactType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_ContactType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ContactType table passing page index and page count parameters
-- Table Comment: Lookup table containing the types of contacts stored in Contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ContactTypeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ContactTypeID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Person].[ContactType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ContactTypeID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[ContactType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_ContactType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ContactType table
-- Table Comment: Lookup table containing the types of contacts stored in Contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactTypeId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Person].[ContactType]
					(
					[Name]
					,[ModifiedDate]
					)
				VALUES
					(
					@Name
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @ContactTypeId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ContactType table
-- Table Comment: Lookup table containing the types of contacts stored in Contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Person].[ContactType]
				SET
					[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ContactTypeID] = @ContactTypeId 
				
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ContactType table
-- Table Comment: Lookup table containing the types of contacts stored in Contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Person].[ContactType] WITH (ROWLOCK) 
				WHERE
					[ContactTypeID] = @ContactTypeId
					
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ContactType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ContactTypeID],
					[Name],
					[ModifiedDate]
				FROM
					[Person].[ContactType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_GetByContactTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ContactType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ContactTypeID],
					[Name],
					[ModifiedDate]
				FROM
					[Person].[ContactType]
				WHERE
					[ContactTypeID] = @ContactTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_GetByContactIdFromStoreContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[ContactType].[ContactTypeID]
       ,Person.[ContactType].[Name]
       ,Person.[ContactType].[ModifiedDate]
  FROM Person.[ContactType]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[StoreContact] 
                WHERE Sales.[StoreContact].[ContactID] = @ContactId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_GetByCustomerIdFromStoreContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[ContactType].[ContactTypeID]
       ,Person.[ContactType].[Name]
       ,Person.[ContactType].[ModifiedDate]
  FROM Person.[ContactType]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[StoreContact] 
                WHERE Sales.[StoreContact].[CustomerID] = @CustomerId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_GetByContactIdFromVendorContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[ContactType].[ContactTypeID]
       ,Person.[ContactType].[Name]
       ,Person.[ContactType].[ModifiedDate]
  FROM Person.[ContactType]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorContact] 
                WHERE Purchasing.[VendorContact].[ContactID] = @ContactId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_GetByVendorIdFromVendorContact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[ContactType].[ContactTypeID]
       ,Person.[ContactType].[Name]
       ,Person.[ContactType].[ModifiedDate]
  FROM Person.[ContactType]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorContact] 
                WHERE Purchasing.[VendorContact].[VendorID] = @VendorId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_ContactType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ContactType table passing nullable parameters
-- Table Comment: Lookup table containing the types of contacts stored in Contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ContactTypeID]
	, [Name]
	, [ModifiedDate]
    FROM
	[Person].[ContactType]
    WHERE 
	 ([ContactTypeID] = @ContactTypeId OR @ContactTypeId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ContactTypeID]
	, [Name]
	, [ModifiedDate]
    FROM
	[Person].[ContactType]
    WHERE 
	 ([ContactTypeID] = @ContactTypeId AND @ContactTypeId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Person" name="usp_adwTiers_ContactType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ContactType table using a dynamically generated query.
-- Table Comment: Lookup table containing the types of contacts stored in Contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ContactTypeID]
					, [Name]
					, [ModifiedDate]
					FROM [Person].[ContactType] {0}
				)
				SELECT
				       [ContactTypeID],
				       [Name],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[ContactType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Employee table
-- Table Comment: Employee information such as salary, department, and title.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[NationalIDNumber],
					[ContactID],
					[LoginID],
					[ManagerID],
					[Title],
					[BirthDate],
					[MaritalStatus],
					[Gender],
					[HireDate],
					[SalariedFlag],
					[VacationHours],
					[SickLeaveHours],
					[CurrentFlag],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[Employee]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Employee table passing page index and page count parameters
-- Table Comment: Employee information such as salary, department, and title.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [NationalIDNumber]'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [LoginID]'
				SET @SQL = @SQL + ', [ManagerID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [BirthDate]'
				SET @SQL = @SQL + ', [MaritalStatus]'
				SET @SQL = @SQL + ', [Gender]'
				SET @SQL = @SQL + ', [HireDate]'
				SET @SQL = @SQL + ', [SalariedFlag]'
				SET @SQL = @SQL + ', [VacationHours]'
				SET @SQL = @SQL + ', [SickLeaveHours]'
				SET @SQL = @SQL + ', [CurrentFlag]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[Employee]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [NationalIDNumber],'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [LoginID],'
				SET @SQL = @SQL + ' [ManagerID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [BirthDate],'
				SET @SQL = @SQL + ' [MaritalStatus],'
				SET @SQL = @SQL + ' [Gender],'
				SET @SQL = @SQL + ' [HireDate],'
				SET @SQL = @SQL + ' [SalariedFlag],'
				SET @SQL = @SQL + ' [VacationHours],'
				SET @SQL = @SQL + ' [SickLeaveHours],'
				SET @SQL = @SQL + ' [CurrentFlag],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[Employee]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Employee table
-- Table Comment: Employee information such as salary, department, and title.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NationalIdNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LoginId" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@ManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MaritalStatus" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Gender" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@HireDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SalariedFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@VacationHours" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@SickLeaveHours" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@CurrentFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [HumanResources].[Employee]
					(
					[NationalIDNumber]
					,[ContactID]
					,[LoginID]
					,[ManagerID]
					,[Title]
					,[BirthDate]
					,[MaritalStatus]
					,[Gender]
					,[HireDate]
					,[SalariedFlag]
					,[VacationHours]
					,[SickLeaveHours]
					,[CurrentFlag]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@NationalIdNumber
					,@ContactId
					,@LoginId
					,@ManagerId
					,@Title
					,@BirthDate
					,@MaritalStatus
					,@Gender
					,@HireDate
					,@SalariedFlag
					,@VacationHours
					,@SickLeaveHours
					,@CurrentFlag
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @EmployeeId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Employee table
-- Table Comment: Employee information such as salary, department, and title.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NationalIdNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LoginId" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@ManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@MaritalStatus" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@Gender" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault=""/>
				<parameter name="@HireDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@SalariedFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@VacationHours" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@SickLeaveHours" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@CurrentFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[HumanResources].[Employee]
				SET
					[NationalIDNumber] = @NationalIdNumber
					,[ContactID] = @ContactId
					,[LoginID] = @LoginId
					,[ManagerID] = @ManagerId
					,[Title] = @Title
					,[BirthDate] = @BirthDate
					,[MaritalStatus] = @MaritalStatus
					,[Gender] = @Gender
					,[HireDate] = @HireDate
					,[SalariedFlag] = @SalariedFlag
					,[VacationHours] = @VacationHours
					,[SickLeaveHours] = @SickLeaveHours
					,[CurrentFlag] = @CurrentFlag
					,[ModifiedDate] = @ModifiedDate
				WHERE
[EmployeeID] = @EmployeeId 
				
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Employee table
-- Table Comment: Employee information such as salary, department, and title.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [HumanResources].[Employee] WITH (ROWLOCK) 
				WHERE
					[EmployeeID] = @EmployeeId
					
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetByContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Employee table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[NationalIDNumber],
					[ContactID],
					[LoginID],
					[ManagerID],
					[Title],
					[BirthDate],
					[MaritalStatus],
					[Gender],
					[HireDate],
					[SalariedFlag],
					[VacationHours],
					[SickLeaveHours],
					[CurrentFlag],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[Employee]
				WHERE
					[ContactID] = @ContactId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetByLoginId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Employee table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LoginId" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[NationalIDNumber],
					[ContactID],
					[LoginID],
					[ManagerID],
					[Title],
					[BirthDate],
					[MaritalStatus],
					[Gender],
					[HireDate],
					[SalariedFlag],
					[VacationHours],
					[SickLeaveHours],
					[CurrentFlag],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[Employee]
				WHERE
					[LoginID] = @LoginId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetByNationalIdNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Employee table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NationalIdNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[NationalIDNumber],
					[ContactID],
					[LoginID],
					[ManagerID],
					[Title],
					[BirthDate],
					[MaritalStatus],
					[Gender],
					[HireDate],
					[SalariedFlag],
					[VacationHours],
					[SickLeaveHours],
					[CurrentFlag],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[Employee]
				WHERE
					[NationalIDNumber] = @NationalIdNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Employee table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[NationalIDNumber],
					[ContactID],
					[LoginID],
					[ManagerID],
					[Title],
					[BirthDate],
					[MaritalStatus],
					[Gender],
					[HireDate],
					[SalariedFlag],
					[VacationHours],
					[SickLeaveHours],
					[CurrentFlag],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[Employee]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetByManagerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Employee table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[NationalIDNumber],
					[ContactID],
					[LoginID],
					[ManagerID],
					[Title],
					[BirthDate],
					[MaritalStatus],
					[Gender],
					[HireDate],
					[SalariedFlag],
					[VacationHours],
					[SickLeaveHours],
					[CurrentFlag],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[Employee]
				WHERE
					[ManagerID] = @ManagerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Employee table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[NationalIDNumber],
					[ContactID],
					[LoginID],
					[ManagerID],
					[Title],
					[BirthDate],
					[MaritalStatus],
					[Gender],
					[HireDate],
					[SalariedFlag],
					[VacationHours],
					[SickLeaveHours],
					[CurrentFlag],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[Employee]
				WHERE
					[EmployeeID] = @EmployeeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_GetByAddressIdFromEmployeeAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT HumanResources.[Employee].[EmployeeID]
       ,HumanResources.[Employee].[NationalIDNumber]
       ,HumanResources.[Employee].[ContactID]
       ,HumanResources.[Employee].[LoginID]
       ,HumanResources.[Employee].[ManagerID]
       ,HumanResources.[Employee].[Title]
       ,HumanResources.[Employee].[BirthDate]
       ,HumanResources.[Employee].[MaritalStatus]
       ,HumanResources.[Employee].[Gender]
       ,HumanResources.[Employee].[HireDate]
       ,HumanResources.[Employee].[SalariedFlag]
       ,HumanResources.[Employee].[VacationHours]
       ,HumanResources.[Employee].[SickLeaveHours]
       ,HumanResources.[Employee].[CurrentFlag]
       ,HumanResources.[Employee].[rowguid]
       ,HumanResources.[Employee].[ModifiedDate]
  FROM HumanResources.[Employee]
 WHERE EXISTS (SELECT 1
                 FROM HumanResources.[EmployeeAddress] 
                WHERE HumanResources.[EmployeeAddress].[AddressID] = @AddressId
                  AND HumanResources.[EmployeeAddress].[EmployeeID] = HumanResources.[Employee].[EmployeeID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Employee table passing nullable parameters
-- Table Comment: Employee information such as salary, department, and title.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@NationalIdNumber" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LoginId" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@ManagerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@MaritalStatus" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@Gender" type="nchar" direction="Input" size="1" precision="0" scale="0" param="(1)" nulldefault="null"/>
				<parameter name="@HireDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@SalariedFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@VacationHours" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@SickLeaveHours" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@CurrentFlag" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [EmployeeID]
	, [NationalIDNumber]
	, [ContactID]
	, [LoginID]
	, [ManagerID]
	, [Title]
	, [BirthDate]
	, [MaritalStatus]
	, [Gender]
	, [HireDate]
	, [SalariedFlag]
	, [VacationHours]
	, [SickLeaveHours]
	, [CurrentFlag]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[HumanResources].[Employee]
    WHERE 
	 ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([NationalIDNumber] = @NationalIdNumber OR @NationalIdNumber IS NULL)
	AND ([ContactID] = @ContactId OR @ContactId IS NULL)
	AND ([LoginID] = @LoginId OR @LoginId IS NULL)
	AND ([ManagerID] = @ManagerId OR @ManagerId IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([BirthDate] = @BirthDate OR @BirthDate IS NULL)
	AND ([MaritalStatus] = @MaritalStatus OR @MaritalStatus IS NULL)
	AND ([Gender] = @Gender OR @Gender IS NULL)
	AND ([HireDate] = @HireDate OR @HireDate IS NULL)
	AND ([SalariedFlag] = @SalariedFlag OR @SalariedFlag IS NULL)
	AND ([VacationHours] = @VacationHours OR @VacationHours IS NULL)
	AND ([SickLeaveHours] = @SickLeaveHours OR @SickLeaveHours IS NULL)
	AND ([CurrentFlag] = @CurrentFlag OR @CurrentFlag IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [EmployeeID]
	, [NationalIDNumber]
	, [ContactID]
	, [LoginID]
	, [ManagerID]
	, [Title]
	, [BirthDate]
	, [MaritalStatus]
	, [Gender]
	, [HireDate]
	, [SalariedFlag]
	, [VacationHours]
	, [SickLeaveHours]
	, [CurrentFlag]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[HumanResources].[Employee]
    WHERE 
	 ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([NationalIDNumber] = @NationalIdNumber AND @NationalIdNumber is not null)
	OR ([ContactID] = @ContactId AND @ContactId is not null)
	OR ([LoginID] = @LoginId AND @LoginId is not null)
	OR ([ManagerID] = @ManagerId AND @ManagerId is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([BirthDate] = @BirthDate AND @BirthDate is not null)
	OR ([MaritalStatus] = @MaritalStatus AND @MaritalStatus is not null)
	OR ([Gender] = @Gender AND @Gender is not null)
	OR ([HireDate] = @HireDate AND @HireDate is not null)
	OR ([SalariedFlag] = @SalariedFlag AND @SalariedFlag is not null)
	OR ([VacationHours] = @VacationHours AND @VacationHours is not null)
	OR ([SickLeaveHours] = @SickLeaveHours AND @SickLeaveHours is not null)
	OR ([CurrentFlag] = @CurrentFlag AND @CurrentFlag is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="HumanResources" name="usp_adwTiers_Employee_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Employee table using a dynamically generated query.
-- Table Comment: Employee information such as salary, department, and title.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [EmployeeID]
					, [NationalIDNumber]
					, [ContactID]
					, [LoginID]
					, [ManagerID]
					, [Title]
					, [BirthDate]
					, [MaritalStatus]
					, [Gender]
					, [HireDate]
					, [SalariedFlag]
					, [VacationHours]
					, [SickLeaveHours]
					, [CurrentFlag]
					, [rowguid]
					, [ModifiedDate]
					FROM [HumanResources].[Employee] {0}
				)
				SELECT
				       [EmployeeID],
				       [NationalIDNumber],
				       [ContactID],
				       [LoginID],
				       [ManagerID],
				       [Title],
				       [BirthDate],
				       [MaritalStatus],
				       [Gender],
				       [HireDate],
				       [SalariedFlag],
				       [VacationHours],
				       [SickLeaveHours],
				       [CurrentFlag],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[Employee] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductDocument table
-- Table Comment: Cross-reference table mapping products to related product documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[DocumentID],
					[ModifiedDate]
				FROM
					[Production].[ProductDocument]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductDocument table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping products to related product documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [DocumentID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductDocument]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [DocumentID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductDocument]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductDocument table
-- Table Comment: Cross-reference table mapping products to related product documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductDocument]
					(
					[ProductID]
					,[DocumentID]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@DocumentId
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductDocument table
-- Table Comment: Cross-reference table mapping products to related product documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalDocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductDocument]
				SET
					[ProductID] = @ProductId
					,[DocumentID] = @DocumentId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductID] = @OriginalProductId 
AND [DocumentID] = @OriginalDocumentId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductDocument table
-- Table Comment: Cross-reference table mapping products to related product documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductDocument] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					AND [DocumentID] = @DocumentId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_GetByDocumentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[DocumentID],
					[ModifiedDate]
				FROM
					[Production].[ProductDocument]
				WHERE
					[DocumentID] = @DocumentId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[DocumentID],
					[ModifiedDate]
				FROM
					[Production].[ProductDocument]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_GetByProductIdDocumentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductDocument table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[DocumentID],
					[ModifiedDate]
				FROM
					[Production].[ProductDocument]
				WHERE
					[ProductID] = @ProductId
					AND [DocumentID] = @DocumentId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductDocument table passing nullable parameters
-- Table Comment: Cross-reference table mapping products to related product documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DocumentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [DocumentID]
	, [ModifiedDate]
    FROM
	[Production].[ProductDocument]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([DocumentID] = @DocumentId OR @DocumentId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [DocumentID]
	, [ModifiedDate]
    FROM
	[Production].[ProductDocument]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([DocumentID] = @DocumentId AND @DocumentId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductDocument_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductDocument table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping products to related product documents.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [DocumentID]
					, [ModifiedDate]
					FROM [Production].[ProductDocument] {0}
				)
				SELECT
				       [ProductID],
				       [DocumentID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductDocument] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the EmployeeAddress table
-- Table Comment: Cross-reference table mapping employees to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[AddressID],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeAddress]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the EmployeeAddress table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping employees to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [AddressID]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[EmployeeAddress]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [AddressID],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[EmployeeAddress]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the EmployeeAddress table
-- Table Comment: Cross-reference table mapping employees to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [HumanResources].[EmployeeAddress]
					(
					[EmployeeID]
					,[AddressID]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@EmployeeId
					,@AddressId
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the EmployeeAddress table
-- Table Comment: Cross-reference table mapping employees to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalEmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalAddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[HumanResources].[EmployeeAddress]
				SET
					[EmployeeID] = @EmployeeId
					,[AddressID] = @AddressId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[EmployeeID] = @OriginalEmployeeId 
AND [AddressID] = @OriginalAddressId 
				
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the EmployeeAddress table
-- Table Comment: Cross-reference table mapping employees to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [HumanResources].[EmployeeAddress] WITH (ROWLOCK) 
				WHERE
					[EmployeeID] = @EmployeeId
					AND [AddressID] = @AddressId
					
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_GetByAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeAddress table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[AddressID],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeAddress]
				WHERE
					[AddressID] = @AddressId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeAddress table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[AddressID],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeAddress]
				WHERE
					[EmployeeID] = @EmployeeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeAddress table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[AddressID],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeAddress]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_GetByEmployeeIdAddressId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeAddress table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[AddressID],
					[rowguid],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeAddress]
				WHERE
					[EmployeeID] = @EmployeeId
					AND [AddressID] = @AddressId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the EmployeeAddress table passing nullable parameters
-- Table Comment: Cross-reference table mapping employees to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [EmployeeID]
	, [AddressID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[HumanResources].[EmployeeAddress]
    WHERE 
	 ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([AddressID] = @AddressId OR @AddressId IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [EmployeeID]
	, [AddressID]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[HumanResources].[EmployeeAddress]
    WHERE 
	 ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([AddressID] = @AddressId AND @AddressId is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeAddress_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the EmployeeAddress table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping employees to their address(es).
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [EmployeeID]
					, [AddressID]
					, [rowguid]
					, [ModifiedDate]
					FROM [HumanResources].[EmployeeAddress] {0}
				)
				SELECT
				       [EmployeeID],
				       [AddressID],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[EmployeeAddress] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductInventory table
-- Table Comment: Product inventory information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[LocationID],
					[Shelf],
					[Bin],
					[Quantity],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductInventory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductInventory table passing page index and page count parameters
-- Table Comment: Product inventory information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [LocationID]'
				SET @SQL = @SQL + ', [Shelf]'
				SET @SQL = @SQL + ', [Bin]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductInventory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [LocationID],'
				SET @SQL = @SQL + ' [Shelf],'
				SET @SQL = @SQL + ' [Bin],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductInventory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductInventory table
-- Table Comment: Product inventory information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Shelf" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Bin" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Production].[ProductInventory]
					(
					[ProductID]
					,[LocationID]
					,[Shelf]
					,[Bin]
					,[Quantity]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@ProductId
					,@LocationId
					,@Shelf
					,@Bin
					,@Quantity
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductInventory table
-- Table Comment: Product inventory information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalLocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Shelf" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Bin" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@Quantity" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductInventory]
				SET
					[ProductID] = @ProductId
					,[LocationID] = @LocationId
					,[Shelf] = @Shelf
					,[Bin] = @Bin
					,[Quantity] = @Quantity
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductID] = @OriginalProductId 
AND [LocationID] = @OriginalLocationId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductInventory table
-- Table Comment: Product inventory information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductInventory] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					AND [LocationID] = @LocationId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_GetByLocationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductInventory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[LocationID],
					[Shelf],
					[Bin],
					[Quantity],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductInventory]
				WHERE
					[LocationID] = @LocationId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductInventory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[LocationID],
					[Shelf],
					[Bin],
					[Quantity],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductInventory]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_GetByProductIdLocationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductInventory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[LocationID],
					[Shelf],
					[Bin],
					[Quantity],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductInventory]
				WHERE
					[ProductID] = @ProductId
					AND [LocationID] = @LocationId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductInventory table passing nullable parameters
-- Table Comment: Product inventory information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Shelf" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Bin" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@Quantity" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [LocationID]
	, [Shelf]
	, [Bin]
	, [Quantity]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductInventory]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([LocationID] = @LocationId OR @LocationId IS NULL)
	AND ([Shelf] = @Shelf OR @Shelf IS NULL)
	AND ([Bin] = @Bin OR @Bin IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [LocationID]
	, [Shelf]
	, [Bin]
	, [Quantity]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductInventory]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([LocationID] = @LocationId AND @LocationId is not null)
	OR ([Shelf] = @Shelf AND @Shelf is not null)
	OR ([Bin] = @Bin AND @Bin is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductInventory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductInventory table using a dynamically generated query.
-- Table Comment: Product inventory information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [LocationID]
					, [Shelf]
					, [Bin]
					, [Quantity]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[ProductInventory] {0}
				)
				SELECT
				       [ProductID],
				       [LocationID],
				       [Shelf],
				       [Bin],
				       [Quantity],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductInventory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductDescription table
-- Table Comment: Product descriptions in several languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductDescriptionID],
					[Description],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductDescription]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductDescription table passing page index and page count parameters
-- Table Comment: Product descriptions in several languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductDescriptionID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductDescriptionID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductDescription]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductDescriptionID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductDescription]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductDescription table
-- Table Comment: Product descriptions in several languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductDescriptionId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Production].[ProductDescription]
					(
					[Description]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Description
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @ProductDescriptionId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductDescription table
-- Table Comment: Product descriptions in several languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductDescription]
				SET
					[Description] = @Description
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductDescriptionID] = @ProductDescriptionId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductDescription table
-- Table Comment: Product descriptions in several languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductDescription] WITH (ROWLOCK) 
				WHERE
					[ProductDescriptionID] = @ProductDescriptionId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductDescription table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductDescriptionID],
					[Description],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductDescription]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_GetByProductDescriptionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductDescription table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductDescriptionID],
					[Description],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[ProductDescription]
				WHERE
					[ProductDescriptionID] = @ProductDescriptionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_GetByCultureIdFromProductModelProductDescriptionCulture" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CultureId" type="nchar" direction="Input" size="6" precision="0" scale="0" param="(6)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[ProductDescription].[ProductDescriptionID]
       ,Production.[ProductDescription].[Description]
       ,Production.[ProductDescription].[rowguid]
       ,Production.[ProductDescription].[ModifiedDate]
  FROM Production.[ProductDescription]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelProductDescriptionCulture] 
                WHERE Production.[ProductModelProductDescriptionCulture].[CultureID] = @CultureId
                  AND Production.[ProductModelProductDescriptionCulture].[ProductDescriptionID] = Production.[ProductDescription].[ProductDescriptionID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_GetByProductModelIdFromProductModelProductDescriptionCulture" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[ProductDescription].[ProductDescriptionID]
       ,Production.[ProductDescription].[Description]
       ,Production.[ProductDescription].[rowguid]
       ,Production.[ProductDescription].[ModifiedDate]
  FROM Production.[ProductDescription]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelProductDescriptionCulture] 
                WHERE Production.[ProductModelProductDescriptionCulture].[ProductModelID] = @ProductModelId
                  AND Production.[ProductModelProductDescriptionCulture].[ProductDescriptionID] = Production.[ProductDescription].[ProductDescriptionID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductDescription table passing nullable parameters
-- Table Comment: Product descriptions in several languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductDescriptionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductDescriptionID]
	, [Description]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductDescription]
    WHERE 
	 ([ProductDescriptionID] = @ProductDescriptionId OR @ProductDescriptionId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductDescriptionID]
	, [Description]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Production].[ProductDescription]
    WHERE 
	 ([ProductDescriptionID] = @ProductDescriptionId AND @ProductDescriptionId is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductDescription_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductDescription table using a dynamically generated query.
-- Table Comment: Product descriptions in several languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductDescriptionID]
					, [Description]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[ProductDescription] {0}
				)
				SELECT
				       [ProductDescriptionID],
				       [Description],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductDescription] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductModelIllustration table
-- Table Comment: Cross-reference table mapping product models and illustrations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductModelID],
					[IllustrationID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelIllustration]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductModelIllustration table passing page index and page count parameters
-- Table Comment: Cross-reference table mapping product models and illustrations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductModelID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductModelID]'
				SET @SQL = @SQL + ', [IllustrationID]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductModelIllustration]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductModelID],'
				SET @SQL = @SQL + ' [IllustrationID],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductModelIllustration]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductModelIllustration table
-- Table Comment: Cross-reference table mapping product models and illustrations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductModelIllustration]
					(
					[ProductModelID]
					,[IllustrationID]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductModelId
					,@IllustrationId
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductModelIllustration table
-- Table Comment: Cross-reference table mapping product models and illustrations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalIllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductModelIllustration]
				SET
					[ProductModelID] = @ProductModelId
					,[IllustrationID] = @IllustrationId
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductModelID] = @OriginalProductModelId 
AND [IllustrationID] = @OriginalIllustrationId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductModelIllustration table
-- Table Comment: Cross-reference table mapping product models and illustrations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductModelIllustration] WITH (ROWLOCK) 
				WHERE
					[ProductModelID] = @ProductModelId
					AND [IllustrationID] = @IllustrationId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_GetByIllustrationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModelIllustration table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductModelID],
					[IllustrationID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelIllustration]
				WHERE
					[IllustrationID] = @IllustrationId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_GetByProductModelId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModelIllustration table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductModelID],
					[IllustrationID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelIllustration]
				WHERE
					[ProductModelID] = @ProductModelId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_GetByProductModelIdIllustrationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductModelIllustration table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductModelID],
					[IllustrationID],
					[ModifiedDate]
				FROM
					[Production].[ProductModelIllustration]
				WHERE
					[ProductModelID] = @ProductModelId
					AND [IllustrationID] = @IllustrationId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductModelIllustration table passing nullable parameters
-- Table Comment: Cross-reference table mapping product models and illustrations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductModelID]
	, [IllustrationID]
	, [ModifiedDate]
    FROM
	[Production].[ProductModelIllustration]
    WHERE 
	 ([ProductModelID] = @ProductModelId OR @ProductModelId IS NULL)
	AND ([IllustrationID] = @IllustrationId OR @IllustrationId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductModelID]
	, [IllustrationID]
	, [ModifiedDate]
    FROM
	[Production].[ProductModelIllustration]
    WHERE 
	 ([ProductModelID] = @ProductModelId AND @ProductModelId is not null)
	OR ([IllustrationID] = @IllustrationId AND @IllustrationId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductModelIllustration_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductModelIllustration table using a dynamically generated query.
-- Table Comment: Cross-reference table mapping product models and illustrations.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductModelID]
					, [IllustrationID]
					, [ModifiedDate]
					FROM [Production].[ProductModelIllustration] {0}
				)
				SELECT
				       [ProductModelID],
				       [IllustrationID],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductModelIllustration] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductListPriceHistory table
-- Table Comment: Changes in the list price of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[StartDate],
					[EndDate],
					[ListPrice],
					[ModifiedDate]
				FROM
					[Production].[ProductListPriceHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductListPriceHistory table passing page index and page count parameters
-- Table Comment: Changes in the list price of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [ListPrice]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductListPriceHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [ListPrice],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductListPriceHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductListPriceHistory table
-- Table Comment: Changes in the list price of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ListPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductListPriceHistory]
					(
					[ProductID]
					,[StartDate]
					,[EndDate]
					,[ListPrice]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@StartDate
					,@EndDate
					,@ListPrice
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductListPriceHistory table
-- Table Comment: Changes in the list price of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ListPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductListPriceHistory]
				SET
					[ProductID] = @ProductId
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[ListPrice] = @ListPrice
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductID] = @OriginalProductId 
AND [StartDate] = @OriginalStartDate 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductListPriceHistory table
-- Table Comment: Changes in the list price of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductListPriceHistory] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					AND [StartDate] = @StartDate
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductListPriceHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[StartDate],
					[EndDate],
					[ListPrice],
					[ModifiedDate]
				FROM
					[Production].[ProductListPriceHistory]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_GetByProductIdStartDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductListPriceHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[StartDate],
					[EndDate],
					[ListPrice],
					[ModifiedDate]
				FROM
					[Production].[ProductListPriceHistory]
				WHERE
					[ProductID] = @ProductId
					AND [StartDate] = @StartDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductListPriceHistory table passing nullable parameters
-- Table Comment: Changes in the list price of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ListPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [StartDate]
	, [EndDate]
	, [ListPrice]
	, [ModifiedDate]
    FROM
	[Production].[ProductListPriceHistory]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([ListPrice] = @ListPrice OR @ListPrice IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [StartDate]
	, [EndDate]
	, [ListPrice]
	, [ModifiedDate]
    FROM
	[Production].[ProductListPriceHistory]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([ListPrice] = @ListPrice AND @ListPrice is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductListPriceHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductListPriceHistory table using a dynamically generated query.
-- Table Comment: Changes in the list price of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [StartDate]
					, [EndDate]
					, [ListPrice]
					, [ModifiedDate]
					FROM [Production].[ProductListPriceHistory] {0}
				)
				SELECT
				       [ProductID],
				       [StartDate],
				       [EndDate],
				       [ListPrice],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductListPriceHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ProductCostHistory table
-- Table Comment: Changes in the cost of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[StartDate],
					[EndDate],
					[StandardCost],
					[ModifiedDate]
				FROM
					[Production].[ProductCostHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductCostHistory table passing page index and page count parameters
-- Table Comment: Changes in the cost of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [StandardCost]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[ProductCostHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [StandardCost],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[ProductCostHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ProductCostHistory table
-- Table Comment: Changes in the cost of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@StandardCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[ProductCostHistory]
					(
					[ProductID]
					,[StartDate]
					,[EndDate]
					,[StandardCost]
					,[ModifiedDate]
					)
				VALUES
					(
					@ProductId
					,@StartDate
					,@EndDate
					,@StandardCost
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ProductCostHistory table
-- Table Comment: Changes in the cost of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@StandardCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[ProductCostHistory]
				SET
					[ProductID] = @ProductId
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[StandardCost] = @StandardCost
					,[ModifiedDate] = @ModifiedDate
				WHERE
[ProductID] = @OriginalProductId 
AND [StartDate] = @OriginalStartDate 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ProductCostHistory table
-- Table Comment: Changes in the cost of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[ProductCostHistory] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					AND [StartDate] = @StartDate
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductCostHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ProductID],
					[StartDate],
					[EndDate],
					[StandardCost],
					[ModifiedDate]
				FROM
					[Production].[ProductCostHistory]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_GetByProductIdStartDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ProductCostHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[StartDate],
					[EndDate],
					[StandardCost],
					[ModifiedDate]
				FROM
					[Production].[ProductCostHistory]
				WHERE
					[ProductID] = @ProductId
					AND [StartDate] = @StartDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ProductCostHistory table passing nullable parameters
-- Table Comment: Changes in the cost of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@StandardCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [StartDate]
	, [EndDate]
	, [StandardCost]
	, [ModifiedDate]
    FROM
	[Production].[ProductCostHistory]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([StandardCost] = @StandardCost OR @StandardCost IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [StartDate]
	, [EndDate]
	, [StandardCost]
	, [ModifiedDate]
    FROM
	[Production].[ProductCostHistory]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([StandardCost] = @StandardCost AND @StandardCost is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_ProductCostHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ProductCostHistory table using a dynamically generated query.
-- Table Comment: Changes in the cost of a product over time.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [StartDate]
					, [EndDate]
					, [StandardCost]
					, [ModifiedDate]
					FROM [Production].[ProductCostHistory] {0}
				)
				SELECT
				       [ProductID],
				       [StartDate],
				       [EndDate],
				       [StandardCost],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[ProductCostHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the WorkOrderRouting table
-- Table Comment: Work order details.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkOrderID],
					[ProductID],
					[OperationSequence],
					[LocationID],
					[ScheduledStartDate],
					[ScheduledEndDate],
					[ActualStartDate],
					[ActualEndDate],
					[ActualResourceHrs],
					[PlannedCost],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[WorkOrderRouting]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the WorkOrderRouting table passing page index and page count parameters
-- Table Comment: Work order details.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkOrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkOrderID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [OperationSequence]'
				SET @SQL = @SQL + ', [LocationID]'
				SET @SQL = @SQL + ', [ScheduledStartDate]'
				SET @SQL = @SQL + ', [ScheduledEndDate]'
				SET @SQL = @SQL + ', [ActualStartDate]'
				SET @SQL = @SQL + ', [ActualEndDate]'
				SET @SQL = @SQL + ', [ActualResourceHrs]'
				SET @SQL = @SQL + ', [PlannedCost]'
				SET @SQL = @SQL + ', [ActualCost]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[WorkOrderRouting]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkOrderID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [OperationSequence],'
				SET @SQL = @SQL + ' [LocationID],'
				SET @SQL = @SQL + ' [ScheduledStartDate],'
				SET @SQL = @SQL + ' [ScheduledEndDate],'
				SET @SQL = @SQL + ' [ActualStartDate],'
				SET @SQL = @SQL + ' [ActualEndDate],'
				SET @SQL = @SQL + ' [ActualResourceHrs],'
				SET @SQL = @SQL + ' [PlannedCost],'
				SET @SQL = @SQL + ' [ActualCost],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[WorkOrderRouting]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the WorkOrderRouting table
-- Table Comment: Work order details.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OperationSequence" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ScheduledStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ScheduledEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActualStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActualEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActualResourceHrs" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@PlannedCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[WorkOrderRouting]
					(
					[WorkOrderID]
					,[ProductID]
					,[OperationSequence]
					,[LocationID]
					,[ScheduledStartDate]
					,[ScheduledEndDate]
					,[ActualStartDate]
					,[ActualEndDate]
					,[ActualResourceHrs]
					,[PlannedCost]
					,[ActualCost]
					,[ModifiedDate]
					)
				VALUES
					(
					@WorkOrderId
					,@ProductId
					,@OperationSequence
					,@LocationId
					,@ScheduledStartDate
					,@ScheduledEndDate
					,@ActualStartDate
					,@ActualEndDate
					,@ActualResourceHrs
					,@PlannedCost
					,@ActualCost
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the WorkOrderRouting table
-- Table Comment: Work order details.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalWorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OperationSequence" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalOperationSequence" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ScheduledStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ScheduledEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActualStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActualEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ActualResourceHrs" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault=""/>
				<parameter name="@PlannedCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[WorkOrderRouting]
				SET
					[WorkOrderID] = @WorkOrderId
					,[ProductID] = @ProductId
					,[OperationSequence] = @OperationSequence
					,[LocationID] = @LocationId
					,[ScheduledStartDate] = @ScheduledStartDate
					,[ScheduledEndDate] = @ScheduledEndDate
					,[ActualStartDate] = @ActualStartDate
					,[ActualEndDate] = @ActualEndDate
					,[ActualResourceHrs] = @ActualResourceHrs
					,[PlannedCost] = @PlannedCost
					,[ActualCost] = @ActualCost
					,[ModifiedDate] = @ModifiedDate
				WHERE
[WorkOrderID] = @OriginalWorkOrderId 
AND [ProductID] = @OriginalProductId 
AND [OperationSequence] = @OriginalOperationSequence 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the WorkOrderRouting table
-- Table Comment: Work order details.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OperationSequence" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[WorkOrderRouting] WITH (ROWLOCK) 
				WHERE
					[WorkOrderID] = @WorkOrderId
					AND [ProductID] = @ProductId
					AND [OperationSequence] = @OperationSequence
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_GetByLocationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the WorkOrderRouting table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[WorkOrderID],
					[ProductID],
					[OperationSequence],
					[LocationID],
					[ScheduledStartDate],
					[ScheduledEndDate],
					[ActualStartDate],
					[ActualEndDate],
					[ActualResourceHrs],
					[PlannedCost],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[WorkOrderRouting]
				WHERE
					[LocationID] = @LocationId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_GetByWorkOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the WorkOrderRouting table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[WorkOrderID],
					[ProductID],
					[OperationSequence],
					[LocationID],
					[ScheduledStartDate],
					[ScheduledEndDate],
					[ActualStartDate],
					[ActualEndDate],
					[ActualResourceHrs],
					[PlannedCost],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[WorkOrderRouting]
				WHERE
					[WorkOrderID] = @WorkOrderId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the WorkOrderRouting table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[WorkOrderID],
					[ProductID],
					[OperationSequence],
					[LocationID],
					[ScheduledStartDate],
					[ScheduledEndDate],
					[ActualStartDate],
					[ActualEndDate],
					[ActualResourceHrs],
					[PlannedCost],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[WorkOrderRouting]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_GetByWorkOrderIdProductIdOperationSequence" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the WorkOrderRouting table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OperationSequence" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[WorkOrderID],
					[ProductID],
					[OperationSequence],
					[LocationID],
					[ScheduledStartDate],
					[ScheduledEndDate],
					[ActualStartDate],
					[ActualEndDate],
					[ActualResourceHrs],
					[PlannedCost],
					[ActualCost],
					[ModifiedDate]
				FROM
					[Production].[WorkOrderRouting]
				WHERE
					[WorkOrderID] = @WorkOrderId
					AND [ProductID] = @ProductId
					AND [OperationSequence] = @OperationSequence
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the WorkOrderRouting table passing nullable parameters
-- Table Comment: Work order details.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@WorkOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@OperationSequence" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@LocationId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ScheduledStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ScheduledEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ActualStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ActualEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ActualResourceHrs" type="decimal" direction="Input" size="5" precision="9" scale="4" param="(9, 4)" nulldefault="null"/>
				<parameter name="@PlannedCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ActualCost" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [WorkOrderID]
	, [ProductID]
	, [OperationSequence]
	, [LocationID]
	, [ScheduledStartDate]
	, [ScheduledEndDate]
	, [ActualStartDate]
	, [ActualEndDate]
	, [ActualResourceHrs]
	, [PlannedCost]
	, [ActualCost]
	, [ModifiedDate]
    FROM
	[Production].[WorkOrderRouting]
    WHERE 
	 ([WorkOrderID] = @WorkOrderId OR @WorkOrderId IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([OperationSequence] = @OperationSequence OR @OperationSequence IS NULL)
	AND ([LocationID] = @LocationId OR @LocationId IS NULL)
	AND ([ScheduledStartDate] = @ScheduledStartDate OR @ScheduledStartDate IS NULL)
	AND ([ScheduledEndDate] = @ScheduledEndDate OR @ScheduledEndDate IS NULL)
	AND ([ActualStartDate] = @ActualStartDate OR @ActualStartDate IS NULL)
	AND ([ActualEndDate] = @ActualEndDate OR @ActualEndDate IS NULL)
	AND ([ActualResourceHrs] = @ActualResourceHrs OR @ActualResourceHrs IS NULL)
	AND ([PlannedCost] = @PlannedCost OR @PlannedCost IS NULL)
	AND ([ActualCost] = @ActualCost OR @ActualCost IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [WorkOrderID]
	, [ProductID]
	, [OperationSequence]
	, [LocationID]
	, [ScheduledStartDate]
	, [ScheduledEndDate]
	, [ActualStartDate]
	, [ActualEndDate]
	, [ActualResourceHrs]
	, [PlannedCost]
	, [ActualCost]
	, [ModifiedDate]
    FROM
	[Production].[WorkOrderRouting]
    WHERE 
	 ([WorkOrderID] = @WorkOrderId AND @WorkOrderId is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([OperationSequence] = @OperationSequence AND @OperationSequence is not null)
	OR ([LocationID] = @LocationId AND @LocationId is not null)
	OR ([ScheduledStartDate] = @ScheduledStartDate AND @ScheduledStartDate is not null)
	OR ([ScheduledEndDate] = @ScheduledEndDate AND @ScheduledEndDate is not null)
	OR ([ActualStartDate] = @ActualStartDate AND @ActualStartDate is not null)
	OR ([ActualEndDate] = @ActualEndDate AND @ActualEndDate is not null)
	OR ([ActualResourceHrs] = @ActualResourceHrs AND @ActualResourceHrs is not null)
	OR ([PlannedCost] = @PlannedCost AND @PlannedCost is not null)
	OR ([ActualCost] = @ActualCost AND @ActualCost is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_WorkOrderRouting_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the WorkOrderRouting table using a dynamically generated query.
-- Table Comment: Work order details.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [WorkOrderID]
					, [ProductID]
					, [OperationSequence]
					, [LocationID]
					, [ScheduledStartDate]
					, [ScheduledEndDate]
					, [ActualStartDate]
					, [ActualEndDate]
					, [ActualResourceHrs]
					, [PlannedCost]
					, [ActualCost]
					, [ModifiedDate]
					FROM [Production].[WorkOrderRouting] {0}
				)
				SELECT
				       [WorkOrderID],
				       [ProductID],
				       [OperationSequence],
				       [LocationID],
				       [ScheduledStartDate],
				       [ScheduledEndDate],
				       [ActualStartDate],
				       [ActualEndDate],
				       [ActualResourceHrs],
				       [PlannedCost],
				       [ActualCost],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[WorkOrderRouting] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the NullFKeyParent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[NullFKeyParentID],
					[SomeText]
				FROM
					[Test].[NullFKeyParent]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the NullFKeyParent table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[NullFKeyParentID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [NullFKeyParentID]'
				SET @SQL = @SQL + ', [SomeText]'
				SET @SQL = @SQL + ' FROM [Test].[NullFKeyParent]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [NullFKeyParentID],'
				SET @SQL = @SQL + ' [SomeText]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Test].[NullFKeyParent]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the NullFKeyParent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Test].[NullFKeyParent]
					(
					[NullFKeyParentID]
					,[SomeText]
					)
				VALUES
					(
					@NullFkeyParentId
					,@SomeText
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the NullFKeyParent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalNullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Test].[NullFKeyParent]
				SET
					[NullFKeyParentID] = @NullFkeyParentId
					,[SomeText] = @SomeText
				WHERE
[NullFKeyParentID] = @OriginalNullFkeyParentId 
				
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the NullFKeyParent table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Test].[NullFKeyParent] WITH (ROWLOCK) 
				WHERE
					[NullFKeyParentID] = @NullFkeyParentId
					
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_GetByNullFkeyParentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the NullFKeyParent table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[NullFKeyParentID],
					[SomeText]
				FROM
					[Test].[NullFKeyParent]
				WHERE
					[NullFKeyParentID] = @NullFkeyParentId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the NullFKeyParent table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [NullFKeyParentID]
	, [SomeText]
    FROM
	[Test].[NullFKeyParent]
    WHERE 
	 ([NullFKeyParentID] = @NullFkeyParentId OR @NullFkeyParentId IS NULL)
	AND ([SomeText] = @SomeText OR @SomeText IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [NullFKeyParentID]
	, [SomeText]
    FROM
	[Test].[NullFKeyParent]
    WHERE 
	 ([NullFKeyParentID] = @NullFkeyParentId AND @NullFkeyParentId is not null)
	OR ([SomeText] = @SomeText AND @SomeText is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyParent_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the NullFKeyParent table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [NullFKeyParentID]
					, [SomeText]
					FROM [Test].[NullFKeyParent] {0}
				)
				SELECT
				       [NullFKeyParentID],
				       [SomeText]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Test].[NullFKeyParent] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the EmployeePayHistory table
-- Table Comment: Employee pay history.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[RateChangeDate],
					[Rate],
					[PayFrequency],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeePayHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the EmployeePayHistory table passing page index and page count parameters
-- Table Comment: Employee pay history.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [RateChangeDate]'
				SET @SQL = @SQL + ', [Rate]'
				SET @SQL = @SQL + ', [PayFrequency]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[EmployeePayHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [RateChangeDate],'
				SET @SQL = @SQL + ' [Rate],'
				SET @SQL = @SQL + ' [PayFrequency],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[EmployeePayHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the EmployeePayHistory table
-- Table Comment: Employee pay history.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RateChangeDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Rate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@PayFrequency" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [HumanResources].[EmployeePayHistory]
					(
					[EmployeeID]
					,[RateChangeDate]
					,[Rate]
					,[PayFrequency]
					,[ModifiedDate]
					)
				VALUES
					(
					@EmployeeId
					,@RateChangeDate
					,@Rate
					,@PayFrequency
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the EmployeePayHistory table
-- Table Comment: Employee pay history.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalEmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RateChangeDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalRateChangeDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Rate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@PayFrequency" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[HumanResources].[EmployeePayHistory]
				SET
					[EmployeeID] = @EmployeeId
					,[RateChangeDate] = @RateChangeDate
					,[Rate] = @Rate
					,[PayFrequency] = @PayFrequency
					,[ModifiedDate] = @ModifiedDate
				WHERE
[EmployeeID] = @OriginalEmployeeId 
AND [RateChangeDate] = @OriginalRateChangeDate 
				
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the EmployeePayHistory table
-- Table Comment: Employee pay history.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RateChangeDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [HumanResources].[EmployeePayHistory] WITH (ROWLOCK) 
				WHERE
					[EmployeeID] = @EmployeeId
					AND [RateChangeDate] = @RateChangeDate
					
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeePayHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[RateChangeDate],
					[Rate],
					[PayFrequency],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeePayHistory]
				WHERE
					[EmployeeID] = @EmployeeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_GetByEmployeeIdRateChangeDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeePayHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RateChangeDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[RateChangeDate],
					[Rate],
					[PayFrequency],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeePayHistory]
				WHERE
					[EmployeeID] = @EmployeeId
					AND [RateChangeDate] = @RateChangeDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the EmployeePayHistory table passing nullable parameters
-- Table Comment: Employee pay history.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RateChangeDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Rate" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@PayFrequency" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [EmployeeID]
	, [RateChangeDate]
	, [Rate]
	, [PayFrequency]
	, [ModifiedDate]
    FROM
	[HumanResources].[EmployeePayHistory]
    WHERE 
	 ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([RateChangeDate] = @RateChangeDate OR @RateChangeDate IS NULL)
	AND ([Rate] = @Rate OR @Rate IS NULL)
	AND ([PayFrequency] = @PayFrequency OR @PayFrequency IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [EmployeeID]
	, [RateChangeDate]
	, [Rate]
	, [PayFrequency]
	, [ModifiedDate]
    FROM
	[HumanResources].[EmployeePayHistory]
    WHERE 
	 ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([RateChangeDate] = @RateChangeDate AND @RateChangeDate is not null)
	OR ([Rate] = @Rate AND @Rate is not null)
	OR ([PayFrequency] = @PayFrequency AND @PayFrequency is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeePayHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the EmployeePayHistory table using a dynamically generated query.
-- Table Comment: Employee pay history.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [EmployeeID]
					, [RateChangeDate]
					, [Rate]
					, [PayFrequency]
					, [ModifiedDate]
					FROM [HumanResources].[EmployeePayHistory] {0}
				)
				SELECT
				       [EmployeeID],
				       [RateChangeDate],
				       [Rate],
				       [PayFrequency],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[EmployeePayHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the NullFKeyChild table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[NullFKeyChildID],
					[NullFKeyParentID],
					[SomeText]
				FROM
					[Test].[NullFKeyChild]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the NullFKeyChild table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[NullFKeyChildID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [NullFKeyChildID]'
				SET @SQL = @SQL + ', [NullFKeyParentID]'
				SET @SQL = @SQL + ', [SomeText]'
				SET @SQL = @SQL + ' FROM [Test].[NullFKeyChild]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [NullFKeyChildID],'
				SET @SQL = @SQL + ' [NullFKeyParentID],'
				SET @SQL = @SQL + ' [SomeText]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Test].[NullFKeyChild]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the NullFKeyChild table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyChildId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Test].[NullFKeyChild]
					(
					[NullFKeyChildID]
					,[NullFKeyParentID]
					,[SomeText]
					)
				VALUES
					(
					@NullFkeyChildId
					,@NullFkeyParentId
					,@SomeText
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the NullFKeyChild table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyChildId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalNullFkeyChildId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Test].[NullFKeyChild]
				SET
					[NullFKeyChildID] = @NullFkeyChildId
					,[NullFKeyParentID] = @NullFkeyParentId
					,[SomeText] = @SomeText
				WHERE
[NullFKeyChildID] = @OriginalNullFkeyChildId 
				
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the NullFKeyChild table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyChildId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Test].[NullFKeyChild] WITH (ROWLOCK) 
				WHERE
					[NullFKeyChildID] = @NullFkeyChildId
					
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_GetByNullFkeyParentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the NullFKeyChild table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[NullFKeyChildID],
					[NullFKeyParentID],
					[SomeText]
				FROM
					[Test].[NullFKeyChild]
				WHERE
					[NullFKeyParentID] = @NullFkeyParentId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_GetByNullFkeyChildId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the NullFKeyChild table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@NullFkeyChildId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[NullFKeyChildID],
					[NullFKeyParentID],
					[SomeText]
				FROM
					[Test].[NullFKeyChild]
				WHERE
					[NullFKeyChildID] = @NullFkeyChildId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the NullFKeyChild table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@NullFkeyChildId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@NullFkeyParentId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@SomeText" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [NullFKeyChildID]
	, [NullFKeyParentID]
	, [SomeText]
    FROM
	[Test].[NullFKeyChild]
    WHERE 
	 ([NullFKeyChildID] = @NullFkeyChildId OR @NullFkeyChildId IS NULL)
	AND ([NullFKeyParentID] = @NullFkeyParentId OR @NullFkeyParentId IS NULL)
	AND ([SomeText] = @SomeText OR @SomeText IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [NullFKeyChildID]
	, [NullFKeyParentID]
	, [SomeText]
    FROM
	[Test].[NullFKeyChild]
    WHERE 
	 ([NullFKeyChildID] = @NullFkeyChildId AND @NullFkeyChildId is not null)
	OR ([NullFKeyParentID] = @NullFkeyParentId AND @NullFkeyParentId is not null)
	OR ([SomeText] = @SomeText AND @SomeText is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Test" name="usp_adwTiers_NullFKeyChild_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the NullFKeyChild table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [NullFKeyChildID]
					, [NullFKeyParentID]
					, [SomeText]
					FROM [Test].[NullFKeyChild] {0}
				)
				SELECT
				       [NullFKeyChildID],
				       [NullFKeyParentID],
				       [SomeText]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Test].[NullFKeyChild] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the ErrorLog table
-- Table Comment: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ErrorLogID],
					[ErrorTime],
					[UserName],
					[ErrorNumber],
					[ErrorSeverity],
					[ErrorState],
					[ErrorProcedure],
					[ErrorLine],
					[ErrorMessage]
				FROM
					[dbo].[ErrorLog]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ErrorLog table passing page index and page count parameters
-- Table Comment: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ErrorLogID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ErrorLogID]'
				SET @SQL = @SQL + ', [ErrorTime]'
				SET @SQL = @SQL + ', [UserName]'
				SET @SQL = @SQL + ', [ErrorNumber]'
				SET @SQL = @SQL + ', [ErrorSeverity]'
				SET @SQL = @SQL + ', [ErrorState]'
				SET @SQL = @SQL + ', [ErrorProcedure]'
				SET @SQL = @SQL + ', [ErrorLine]'
				SET @SQL = @SQL + ', [ErrorMessage]'
				SET @SQL = @SQL + ' FROM [dbo].[ErrorLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ErrorLogID],'
				SET @SQL = @SQL + ' [ErrorTime],'
				SET @SQL = @SQL + ' [UserName],'
				SET @SQL = @SQL + ' [ErrorNumber],'
				SET @SQL = @SQL + ' [ErrorSeverity],'
				SET @SQL = @SQL + ' [ErrorState],'
				SET @SQL = @SQL + ' [ErrorProcedure],'
				SET @SQL = @SQL + ' [ErrorLine],'
				SET @SQL = @SQL + ' [ErrorMessage]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ErrorLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the ErrorLog table
-- Table Comment: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ErrorLogId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UserName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@ErrorNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorSeverity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorState" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorProcedure" type="nvarchar" direction="Input" size="126" precision="0" scale="0" param="(126)" nulldefault=""/>
				<parameter name="@ErrorLine" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorMessage" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[ErrorLog]
					(
					[ErrorTime]
					,[UserName]
					,[ErrorNumber]
					,[ErrorSeverity]
					,[ErrorState]
					,[ErrorProcedure]
					,[ErrorLine]
					,[ErrorMessage]
					)
				VALUES
					(
					@ErrorTime
					,@UserName
					,@ErrorNumber
					,@ErrorSeverity
					,@ErrorState
					,@ErrorProcedure
					,@ErrorLine
					,@ErrorMessage
					)
				
				-- Get the identity value
				SET @ErrorLogId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the ErrorLog table
-- Table Comment: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ErrorLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UserName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@ErrorNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorSeverity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorState" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorProcedure" type="nvarchar" direction="Input" size="126" precision="0" scale="0" param="(126)" nulldefault=""/>
				<parameter name="@ErrorLine" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ErrorMessage" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ErrorLog]
				SET
					[ErrorTime] = @ErrorTime
					,[UserName] = @UserName
					,[ErrorNumber] = @ErrorNumber
					,[ErrorSeverity] = @ErrorSeverity
					,[ErrorState] = @ErrorState
					,[ErrorProcedure] = @ErrorProcedure
					,[ErrorLine] = @ErrorLine
					,[ErrorMessage] = @ErrorMessage
				WHERE
[ErrorLogID] = @ErrorLogId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the ErrorLog table
-- Table Comment: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ErrorLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ErrorLog] WITH (ROWLOCK) 
				WHERE
					[ErrorLogID] = @ErrorLogId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_GetByErrorLogId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the ErrorLog table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ErrorLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ErrorLogID],
					[ErrorTime],
					[UserName],
					[ErrorNumber],
					[ErrorSeverity],
					[ErrorState],
					[ErrorProcedure],
					[ErrorLine],
					[ErrorMessage]
				FROM
					[dbo].[ErrorLog]
				WHERE
					[ErrorLogID] = @ErrorLogId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the ErrorLog table passing nullable parameters
-- Table Comment: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ErrorLogId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ErrorTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UserName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@ErrorNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ErrorSeverity" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ErrorState" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ErrorProcedure" type="nvarchar" direction="Input" size="126" precision="0" scale="0" param="(126)" nulldefault="null"/>
				<parameter name="@ErrorLine" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ErrorMessage" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ErrorLogID]
	, [ErrorTime]
	, [UserName]
	, [ErrorNumber]
	, [ErrorSeverity]
	, [ErrorState]
	, [ErrorProcedure]
	, [ErrorLine]
	, [ErrorMessage]
    FROM
	[dbo].[ErrorLog]
    WHERE 
	 ([ErrorLogID] = @ErrorLogId OR @ErrorLogId IS NULL)
	AND ([ErrorTime] = @ErrorTime OR @ErrorTime IS NULL)
	AND ([UserName] = @UserName OR @UserName IS NULL)
	AND ([ErrorNumber] = @ErrorNumber OR @ErrorNumber IS NULL)
	AND ([ErrorSeverity] = @ErrorSeverity OR @ErrorSeverity IS NULL)
	AND ([ErrorState] = @ErrorState OR @ErrorState IS NULL)
	AND ([ErrorProcedure] = @ErrorProcedure OR @ErrorProcedure IS NULL)
	AND ([ErrorLine] = @ErrorLine OR @ErrorLine IS NULL)
	AND ([ErrorMessage] = @ErrorMessage OR @ErrorMessage IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ErrorLogID]
	, [ErrorTime]
	, [UserName]
	, [ErrorNumber]
	, [ErrorSeverity]
	, [ErrorState]
	, [ErrorProcedure]
	, [ErrorLine]
	, [ErrorMessage]
    FROM
	[dbo].[ErrorLog]
    WHERE 
	 ([ErrorLogID] = @ErrorLogId AND @ErrorLogId is not null)
	OR ([ErrorTime] = @ErrorTime AND @ErrorTime is not null)
	OR ([UserName] = @UserName AND @UserName is not null)
	OR ([ErrorNumber] = @ErrorNumber AND @ErrorNumber is not null)
	OR ([ErrorSeverity] = @ErrorSeverity AND @ErrorSeverity is not null)
	OR ([ErrorState] = @ErrorState AND @ErrorState is not null)
	OR ([ErrorProcedure] = @ErrorProcedure AND @ErrorProcedure is not null)
	OR ([ErrorLine] = @ErrorLine AND @ErrorLine is not null)
	OR ([ErrorMessage] = @ErrorMessage AND @ErrorMessage is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="usp_adwTiers_ErrorLog_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the ErrorLog table using a dynamically generated query.
-- Table Comment: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ErrorLogID]
					, [ErrorTime]
					, [UserName]
					, [ErrorNumber]
					, [ErrorSeverity]
					, [ErrorState]
					, [ErrorProcedure]
					, [ErrorLine]
					, [ErrorMessage]
					FROM [dbo].[ErrorLog] {0}
				)
				SELECT
				       [ErrorLogID],
				       [ErrorTime],
				       [UserName],
				       [ErrorNumber],
				       [ErrorSeverity],
				       [ErrorState],
				       [ErrorProcedure],
				       [ErrorLine],
				       [ErrorMessage]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ErrorLog] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the EmployeeDepartmentHistory table
-- Table Comment: Employee department transfers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[DepartmentID],
					[ShiftID],
					[StartDate],
					[EndDate],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeDepartmentHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the EmployeeDepartmentHistory table passing page index and page count parameters
-- Table Comment: Employee department transfers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [DepartmentID]'
				SET @SQL = @SQL + ', [ShiftID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[EmployeeDepartmentHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [DepartmentID],'
				SET @SQL = @SQL + ' [ShiftID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[EmployeeDepartmentHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the EmployeeDepartmentHistory table
-- Table Comment: Employee department transfers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [HumanResources].[EmployeeDepartmentHistory]
					(
					[EmployeeID]
					,[DepartmentID]
					,[ShiftID]
					,[StartDate]
					,[EndDate]
					,[ModifiedDate]
					)
				VALUES
					(
					@EmployeeId
					,@DepartmentId
					,@ShiftId
					,@StartDate
					,@EndDate
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the EmployeeDepartmentHistory table
-- Table Comment: Employee department transfers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalEmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalDepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@OriginalStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[HumanResources].[EmployeeDepartmentHistory]
				SET
					[EmployeeID] = @EmployeeId
					,[DepartmentID] = @DepartmentId
					,[ShiftID] = @ShiftId
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[ModifiedDate] = @ModifiedDate
				WHERE
[EmployeeID] = @OriginalEmployeeId 
AND [StartDate] = @OriginalStartDate 
AND [DepartmentID] = @OriginalDepartmentId 
AND [ShiftID] = @OriginalShiftId 
				
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the EmployeeDepartmentHistory table
-- Table Comment: Employee department transfers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [HumanResources].[EmployeeDepartmentHistory] WITH (ROWLOCK) 
				WHERE
					[EmployeeID] = @EmployeeId
					AND [StartDate] = @StartDate
					AND [DepartmentID] = @DepartmentId
					AND [ShiftID] = @ShiftId
					
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeDepartmentHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[DepartmentID],
					[ShiftID],
					[StartDate],
					[EndDate],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeDepartmentHistory]
				WHERE
					[EmployeeID] = @EmployeeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_GetByDepartmentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeDepartmentHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[DepartmentID],
					[ShiftID],
					[StartDate],
					[EndDate],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeDepartmentHistory]
				WHERE
					[DepartmentID] = @DepartmentId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_GetByShiftId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeDepartmentHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[DepartmentID],
					[ShiftID],
					[StartDate],
					[EndDate],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeDepartmentHistory]
				WHERE
					[ShiftID] = @ShiftId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_GetByEmployeeIdStartDateDepartmentIdShiftId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the EmployeeDepartmentHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[DepartmentID],
					[ShiftID],
					[StartDate],
					[EndDate],
					[ModifiedDate]
				FROM
					[HumanResources].[EmployeeDepartmentHistory]
				WHERE
					[EmployeeID] = @EmployeeId
					AND [StartDate] = @StartDate
					AND [DepartmentID] = @DepartmentId
					AND [ShiftID] = @ShiftId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the EmployeeDepartmentHistory table passing nullable parameters
-- Table Comment: Employee department transfers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DepartmentId" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShiftId" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [EmployeeID]
	, [DepartmentID]
	, [ShiftID]
	, [StartDate]
	, [EndDate]
	, [ModifiedDate]
    FROM
	[HumanResources].[EmployeeDepartmentHistory]
    WHERE 
	 ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([DepartmentID] = @DepartmentId OR @DepartmentId IS NULL)
	AND ([ShiftID] = @ShiftId OR @ShiftId IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [EmployeeID]
	, [DepartmentID]
	, [ShiftID]
	, [StartDate]
	, [EndDate]
	, [ModifiedDate]
    FROM
	[HumanResources].[EmployeeDepartmentHistory]
    WHERE 
	 ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([DepartmentID] = @DepartmentId AND @DepartmentId is not null)
	OR ([ShiftID] = @ShiftId AND @ShiftId is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="HumanResources" name="usp_adwTiers_EmployeeDepartmentHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the EmployeeDepartmentHistory table using a dynamically generated query.
-- Table Comment: Employee department transfers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [EmployeeID]
					, [DepartmentID]
					, [ShiftID]
					, [StartDate]
					, [EndDate]
					, [ModifiedDate]
					FROM [HumanResources].[EmployeeDepartmentHistory] {0}
				)
				SELECT
				       [EmployeeID],
				       [DepartmentID],
				       [ShiftID],
				       [StartDate],
				       [EndDate],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[EmployeeDepartmentHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the JobCandidate table
-- Table Comment: Résumés submitted to Human Resources by job applicants.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[JobCandidateID],
					[EmployeeID],
					[Resume],
					[ModifiedDate]
				FROM
					[HumanResources].[JobCandidate]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the JobCandidate table passing page index and page count parameters
-- Table Comment: Résumés submitted to Human Resources by job applicants.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[JobCandidateID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [JobCandidateID]'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [Resume]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[JobCandidate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [JobCandidateID],'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [Resume],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[JobCandidate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the JobCandidate table
-- Table Comment: Résumés submitted to Human Resources by job applicants.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@JobCandidateId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Resume" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [HumanResources].[JobCandidate]
					(
					[EmployeeID]
					,[Resume]
					,[ModifiedDate]
					)
				VALUES
					(
					@EmployeeId
					,@Resume
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @JobCandidateId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the JobCandidate table
-- Table Comment: Résumés submitted to Human Resources by job applicants.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@JobCandidateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Resume" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[HumanResources].[JobCandidate]
				SET
					[EmployeeID] = @EmployeeId
					,[Resume] = @Resume
					,[ModifiedDate] = @ModifiedDate
				WHERE
[JobCandidateID] = @JobCandidateId 
				
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the JobCandidate table
-- Table Comment: Résumés submitted to Human Resources by job applicants.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@JobCandidateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [HumanResources].[JobCandidate] WITH (ROWLOCK) 
				WHERE
					[JobCandidateID] = @JobCandidateId
					
			]]></body>
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the JobCandidate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[JobCandidateID],
					[EmployeeID],
					[Resume],
					[ModifiedDate]
				FROM
					[HumanResources].[JobCandidate]
				WHERE
					[EmployeeID] = @EmployeeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_GetByJobCandidateId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the JobCandidate table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@JobCandidateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[JobCandidateID],
					[EmployeeID],
					[Resume],
					[ModifiedDate]
				FROM
					[HumanResources].[JobCandidate]
				WHERE
					[JobCandidateID] = @JobCandidateId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the JobCandidate table passing nullable parameters
-- Table Comment: Résumés submitted to Human Resources by job applicants.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@JobCandidateId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Resume" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [JobCandidateID]
	, [EmployeeID]
	, [Resume]
	, [ModifiedDate]
    FROM
	[HumanResources].[JobCandidate]
    WHERE 
	 ([JobCandidateID] = @JobCandidateId OR @JobCandidateId IS NULL)
	AND ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [JobCandidateID]
	, [EmployeeID]
	, [Resume]
	, [ModifiedDate]
    FROM
	[HumanResources].[JobCandidate]
    WHERE 
	 ([JobCandidateID] = @JobCandidateId AND @JobCandidateId is not null)
	OR ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="HumanResources" name="usp_adwTiers_JobCandidate_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the JobCandidate table using a dynamically generated query.
-- Table Comment: Résumés submitted to Human Resources by job applicants.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [JobCandidateID]
					, [EmployeeID]
					, [Resume]
					, [ModifiedDate]
					FROM [HumanResources].[JobCandidate] {0}
				)
				SELECT
				       [JobCandidateID],
				       [EmployeeID],
				       [Resume],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[JobCandidate] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Illustration_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Illustration table
-- Table Comment: Bicycle assembly diagrams.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[IllustrationID],
					[Diagram],
					[ModifiedDate]
				FROM
					[Production].[Illustration]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_Illustration_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Illustration table passing page index and page count parameters
-- Table Comment: Bicycle assembly diagrams.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[IllustrationID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [IllustrationID]'
				SET @SQL = @SQL + ', [Diagram]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[Illustration]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [IllustrationID],'
				SET @SQL = @SQL + ' [Diagram],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[Illustration]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_Illustration_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Illustration table
-- Table Comment: Bicycle assembly diagrams.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@IllustrationId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Diagram" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Production].[Illustration]
					(
					[Diagram]
					,[ModifiedDate]
					)
				VALUES
					(
					@Diagram
					,@ModifiedDate
					)
				
				-- Get the identity value
				SET @IllustrationId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Illustration_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Illustration table
-- Table Comment: Bicycle assembly diagrams.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Diagram" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Production].[Illustration]
				SET
					[Diagram] = @Diagram
					,[ModifiedDate] = @ModifiedDate
				WHERE
[IllustrationID] = @IllustrationId 
				
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Illustration_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Illustration table
-- Table Comment: Bicycle assembly diagrams.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Production].[Illustration] WITH (ROWLOCK) 
				WHERE
					[IllustrationID] = @IllustrationId
					
			]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Illustration_GetByIllustrationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Illustration table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[IllustrationID],
					[Diagram],
					[ModifiedDate]
				FROM
					[Production].[Illustration]
				WHERE
					[IllustrationID] = @IllustrationId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Illustration_GetByProductModelIdFromProductModelIllustration" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductModelId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Production.[Illustration].[IllustrationID]
       ,Production.[Illustration].[Diagram]
       ,Production.[Illustration].[ModifiedDate]
  FROM Production.[Illustration]
 WHERE EXISTS (SELECT 1
                 FROM Production.[ProductModelIllustration] 
                WHERE Production.[ProductModelIllustration].[ProductModelID] = @ProductModelId
                  AND Production.[ProductModelIllustration].[IllustrationID] = Production.[Illustration].[IllustrationID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Production" name="usp_adwTiers_Illustration_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Illustration table passing nullable parameters
-- Table Comment: Bicycle assembly diagrams.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IllustrationId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Diagram" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [IllustrationID]
	, [Diagram]
	, [ModifiedDate]
    FROM
	[Production].[Illustration]
    WHERE 
	 ([IllustrationID] = @IllustrationId OR @IllustrationId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [IllustrationID]
	, [Diagram]
	, [ModifiedDate]
    FROM
	[Production].[Illustration]
    WHERE 
	 ([IllustrationID] = @IllustrationId AND @IllustrationId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Production" name="usp_adwTiers_Illustration_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Illustration table using a dynamically generated query.
-- Table Comment: Bicycle assembly diagrams.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [IllustrationID]
					, [Diagram]
					, [ModifiedDate]
					FROM [Production].[Illustration] {0}
				)
				SELECT
				       [IllustrationID],
				       [Diagram],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[Illustration] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_AddressType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the AddressType table
-- Table Comment: Types of addresses stored in the Address table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[AddressTypeID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[AddressType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the AddressType table passing page index and page count parameters
-- Table Comment: Types of addresses stored in the Address table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[AddressTypeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [AddressTypeID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Person].[AddressType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [AddressTypeID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[AddressType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_AddressType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the AddressType table
-- Table Comment: Types of addresses stored in the Address table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressTypeId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				Declare @IdentityRowGuids table (Rowguid uniqueidentifier	)
				INSERT INTO [Person].[AddressType]
					(
					[Name]
					,[ModifiedDate]
					)
						OUTPUT INSERTED.rowguid INTO @IdentityRowGuids
					
				VALUES
					(
					@Name
					,@ModifiedDate
					)
				
				SELECT @Rowguid=Rowguid	 from @IdentityRowGuids
				-- Get the identity value
				SET @AddressTypeId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the AddressType table
-- Table Comment: Types of addresses stored in the Address table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Person].[AddressType]
				SET
					[Name] = @Name
					,[ModifiedDate] = @ModifiedDate
				WHERE
[AddressTypeID] = @AddressTypeId 
				
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the AddressType table
-- Table Comment: Types of addresses stored in the Address table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Person].[AddressType] WITH (ROWLOCK) 
				WHERE
					[AddressTypeID] = @AddressTypeId
					
			]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the AddressType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AddressTypeID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[AddressType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetByRowguid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the AddressType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AddressTypeID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[AddressType]
				WHERE
					[rowguid] = @Rowguid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetByAddressTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the AddressType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AddressTypeID],
					[Name],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[AddressType]
				WHERE
					[AddressTypeID] = @AddressTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetByAddressIdFromCustomerAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[AddressType].[AddressTypeID]
       ,Person.[AddressType].[Name]
       ,Person.[AddressType].[rowguid]
       ,Person.[AddressType].[ModifiedDate]
  FROM Person.[AddressType]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[CustomerAddress] 
                WHERE Sales.[CustomerAddress].[AddressID] = @AddressId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetByCustomerIdFromCustomerAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[AddressType].[AddressTypeID]
       ,Person.[AddressType].[Name]
       ,Person.[AddressType].[rowguid]
       ,Person.[AddressType].[ModifiedDate]
  FROM Person.[AddressType]
 WHERE EXISTS (SELECT 1
                 FROM Sales.[CustomerAddress] 
                WHERE Sales.[CustomerAddress].[CustomerID] = @CustomerId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetByAddressIdFromVendorAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AddressId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[AddressType].[AddressTypeID]
       ,Person.[AddressType].[Name]
       ,Person.[AddressType].[rowguid]
       ,Person.[AddressType].[ModifiedDate]
  FROM Person.[AddressType]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorAddress] 
                WHERE Purchasing.[VendorAddress].[AddressID] = @AddressId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_GetByVendorIdFromVendorAddress" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VendorId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT Person.[AddressType].[AddressTypeID]
       ,Person.[AddressType].[Name]
       ,Person.[AddressType].[rowguid]
       ,Person.[AddressType].[ModifiedDate]
  FROM Person.[AddressType]
 WHERE EXISTS (SELECT 1
                 FROM Purchasing.[VendorAddress] 
                WHERE Purchasing.[VendorAddress].[VendorID] = @VendorId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="Person" name="usp_adwTiers_AddressType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the AddressType table passing nullable parameters
-- Table Comment: Types of addresses stored in the Address table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@AddressTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Rowguid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [AddressTypeID]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[AddressType]
    WHERE 
	 ([AddressTypeID] = @AddressTypeId OR @AddressTypeId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([rowguid] = @Rowguid OR @Rowguid IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [AddressTypeID]
	, [Name]
	, [rowguid]
	, [ModifiedDate]
    FROM
	[Person].[AddressType]
    WHERE 
	 ([AddressTypeID] = @AddressTypeId AND @AddressTypeId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([rowguid] = @Rowguid AND @Rowguid is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Person" name="usp_adwTiers_AddressType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the AddressType table using a dynamically generated query.
-- Table Comment: Types of addresses stored in the Address table. 
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [AddressTypeID]
					, [Name]
					, [rowguid]
					, [ModifiedDate]
					FROM [Person].[AddressType] {0}
				)
				SELECT
				       [AddressTypeID],
				       [Name],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[AddressType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Individual_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the Individual table
-- Table Comment: Demographic data about customers that purchase Adventure Works products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[ContactID],
					[Demographics],
					[ModifiedDate]
				FROM
					[Sales].[Individual]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_Individual_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Individual table passing page index and page count parameters
-- Table Comment: Demographic data about customers that purchase Adventure Works products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [Demographics]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Sales].[Individual]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [Demographics],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[Individual]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_Individual_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Inserts a record into the Individual table
-- Table Comment: Demographic data about customers that purchase Adventure Works products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [Sales].[Individual]
					(
					[CustomerID]
					,[ContactID]
					,[Demographics]
					,[ModifiedDate]
					)
				VALUES
					(
					@CustomerId
					,@ContactId
					,@Demographics
					,@ModifiedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Individual_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Updates a record in the Individual table
-- Table Comment: Demographic data about customers that purchase Adventure Works products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[Sales].[Individual]
				SET
					[CustomerID] = @CustomerId
					,[ContactID] = @ContactId
					,[Demographics] = @Demographics
					,[ModifiedDate] = @ModifiedDate
				WHERE
[CustomerID] = @OriginalCustomerId 
				
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Individual_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Deletes a record in the Individual table
-- Table Comment: Demographic data about customers that purchase Adventure Works products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [Sales].[Individual] WITH (ROWLOCK) 
				WHERE
					[CustomerID] = @CustomerId
					
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Individual_GetByContactId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Individual table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CustomerID],
					[ContactID],
					[Demographics],
					[ModifiedDate]
				FROM
					[Sales].[Individual]
				WHERE
					[ContactID] = @ContactId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Individual_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Individual table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[ContactID],
					[Demographics],
					[ModifiedDate]
				FROM
					[Sales].[Individual]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Individual_GetByDemographics" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Select records from the Individual table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[ContactID],
					[Demographics],
					[ModifiedDate]
				FROM
					[Sales].[Individual]
				WHERE
					[Demographics] = @Demographics
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="Sales" name="usp_adwTiers_Individual_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Finds records in the Individual table passing nullable parameters
-- Table Comment: Demographic data about customers that purchase Adventure Works products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ContactId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Demographics" type="xml" direction="Input" size="-1" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerID]
	, [ContactID]
	, [Demographics]
	, [ModifiedDate]
    FROM
	[Sales].[Individual]
    WHERE 
	 ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ContactID] = @ContactId OR @ContactId IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerID]
	, [ContactID]
	, [Demographics]
	, [ModifiedDate]
    FROM
	[Sales].[Individual]
    WHERE 
	 ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ContactID] = @ContactId AND @ContactId is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="Sales" name="usp_adwTiers_Individual_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the Individual table using a dynamically generated query.
-- Table Comment: Demographic data about customers that purchase Adventure Works products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerID]
					, [ContactID]
					, [Demographics]
					, [ModifiedDate]
					FROM [Sales].[Individual] {0}
				)
				SELECT
				       [CustomerID],
				       [ContactID],
				       [Demographics],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[Individual] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_vAdditionalContactInfo_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vAdditionalContactInfo view
-- Table Comment: Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ContactID],
					[FirstName],
					[MiddleName],
					[LastName],
					[TelephoneNumber],
					[TelephoneSpecialInstructions],
					[Street],
					[City],
					[StateProvince],
					[PostalCode],
					[CountryRegion],
					[HomeAddressSpecialInstructions],
					[EMailAddress],
					[EMailSpecialInstructions],
					[EMailTelephoneNumber],
					[rowguid],
					[ModifiedDate]
				FROM
					[Person].[vAdditionalContactInfo]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_vAdditionalContactInfo_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vAdditionalContactInfo view passing page index and page count parameters
-- Table Comment: Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ContactID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ContactID]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [TelephoneNumber]'
				SET @SQL = @SQL + ', [TelephoneSpecialInstructions]'
				SET @SQL = @SQL + ', [Street]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [StateProvince]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CountryRegion]'
				SET @SQL = @SQL + ', [HomeAddressSpecialInstructions]'
				SET @SQL = @SQL + ', [EMailAddress]'
				SET @SQL = @SQL + ', [EMailSpecialInstructions]'
				SET @SQL = @SQL + ', [EMailTelephoneNumber]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Person].[vAdditionalContactInfo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ContactID],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [TelephoneNumber],'
				SET @SQL = @SQL + ' [TelephoneSpecialInstructions],'
				SET @SQL = @SQL + ' [Street],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [StateProvince],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CountryRegion],'
				SET @SQL = @SQL + ' [HomeAddressSpecialInstructions],'
				SET @SQL = @SQL + ' [EMailAddress],'
				SET @SQL = @SQL + ' [EMailSpecialInstructions],'
				SET @SQL = @SQL + ' [EMailTelephoneNumber],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[vAdditionalContactInfo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_vAdditionalContactInfo_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vAdditionalContactInfo table using a dynamically generated query.
-- Table Comment: Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ContactID]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [TelephoneNumber]
					, [TelephoneSpecialInstructions]
					, [Street]
					, [City]
					, [StateProvince]
					, [PostalCode]
					, [CountryRegion]
					, [HomeAddressSpecialInstructions]
					, [EMailAddress]
					, [EMailSpecialInstructions]
					, [EMailTelephoneNumber]
					, [rowguid]
					, [ModifiedDate]
					FROM [Person].[vAdditionalContactInfo] {0}
				)
				SELECT
				       [ContactID],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [TelephoneNumber],
				       [TelephoneSpecialInstructions],
				       [Street],
				       [City],
				       [StateProvince],
				       [PostalCode],
				       [CountryRegion],
				       [HomeAddressSpecialInstructions],
				       [EMailAddress],
				       [EMailSpecialInstructions],
				       [EMailTelephoneNumber],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[vAdditionalContactInfo] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployee_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vEmployee view
-- Table Comment: Employee names and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[JobTitle],
					[Phone],
					[EmailAddress],
					[EmailPromotion],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceName],
					[PostalCode],
					[CountryRegionName],
					[AdditionalContactInfo]
				FROM
					[HumanResources].[vEmployee]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployee_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vEmployee view passing page index and page count parameters
-- Table Comment: Employee names and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [JobTitle]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [EmailPromotion]'
				SET @SQL = @SQL + ', [AddressLine1]'
				SET @SQL = @SQL + ', [AddressLine2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [StateProvinceName]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CountryRegionName]'
				SET @SQL = @SQL + ', [AdditionalContactInfo]'
				SET @SQL = @SQL + ' FROM [HumanResources].[vEmployee]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [JobTitle],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [EmailPromotion],'
				SET @SQL = @SQL + ' [AddressLine1],'
				SET @SQL = @SQL + ' [AddressLine2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [StateProvinceName],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CountryRegionName],'
				SET @SQL = @SQL + ' [AdditionalContactInfo]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[vEmployee]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployee_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vEmployee table using a dynamically generated query.
-- Table Comment: Employee names and addresses.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [EmployeeID]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [JobTitle]
					, [Phone]
					, [EmailAddress]
					, [EmailPromotion]
					, [AddressLine1]
					, [AddressLine2]
					, [City]
					, [StateProvinceName]
					, [PostalCode]
					, [CountryRegionName]
					, [AdditionalContactInfo]
					FROM [HumanResources].[vEmployee] {0}
				)
				SELECT
				       [EmployeeID],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [JobTitle],
				       [Phone],
				       [EmailAddress],
				       [EmailPromotion],
				       [AddressLine1],
				       [AddressLine2],
				       [City],
				       [StateProvinceName],
				       [PostalCode],
				       [CountryRegionName],
				       [AdditionalContactInfo]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[vEmployee] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployeeDepartment_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vEmployeeDepartment view
-- Table Comment: Returns employee name, title, and current department.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[JobTitle],
					[Department],
					[GroupName],
					[StartDate]
				FROM
					[HumanResources].[vEmployeeDepartment]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployeeDepartment_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vEmployeeDepartment view passing page index and page count parameters
-- Table Comment: Returns employee name, title, and current department.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [JobTitle]'
				SET @SQL = @SQL + ', [Department]'
				SET @SQL = @SQL + ', [GroupName]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[vEmployeeDepartment]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [JobTitle],'
				SET @SQL = @SQL + ' [Department],'
				SET @SQL = @SQL + ' [GroupName],'
				SET @SQL = @SQL + ' [StartDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[vEmployeeDepartment]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployeeDepartment_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vEmployeeDepartment table using a dynamically generated query.
-- Table Comment: Returns employee name, title, and current department.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [EmployeeID]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [JobTitle]
					, [Department]
					, [GroupName]
					, [StartDate]
					FROM [HumanResources].[vEmployeeDepartment] {0}
				)
				SELECT
				       [EmployeeID],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [JobTitle],
				       [Department],
				       [GroupName],
				       [StartDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[vEmployeeDepartment] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployeeDepartmentHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vEmployeeDepartmentHistory view
-- Table Comment: Returns employee name and current and previous departments.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[Shift],
					[Department],
					[GroupName],
					[StartDate],
					[EndDate]
				FROM
					[HumanResources].[vEmployeeDepartmentHistory]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployeeDepartmentHistory_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vEmployeeDepartmentHistory view passing page index and page count parameters
-- Table Comment: Returns employee name and current and previous departments.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [Shift]'
				SET @SQL = @SQL + ', [Department]'
				SET @SQL = @SQL + ', [GroupName]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[vEmployeeDepartmentHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [Shift],'
				SET @SQL = @SQL + ' [Department],'
				SET @SQL = @SQL + ' [GroupName],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[vEmployeeDepartmentHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_vEmployeeDepartmentHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vEmployeeDepartmentHistory table using a dynamically generated query.
-- Table Comment: Returns employee name and current and previous departments.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [EmployeeID]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [Shift]
					, [Department]
					, [GroupName]
					, [StartDate]
					, [EndDate]
					FROM [HumanResources].[vEmployeeDepartmentHistory] {0}
				)
				SELECT
				       [EmployeeID],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [Shift],
				       [Department],
				       [GroupName],
				       [StartDate],
				       [EndDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[vEmployeeDepartmentHistory] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vIndividualCustomer_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vIndividualCustomer view
-- Table Comment: Individual customers (names and addresses) that purchase Adventure Works Cycles products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[Phone],
					[EmailAddress],
					[EmailPromotion],
					[AddressType],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceName],
					[PostalCode],
					[CountryRegionName],
					[Demographics]
				FROM
					[Sales].[vIndividualCustomer]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vIndividualCustomer_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vIndividualCustomer view passing page index and page count parameters
-- Table Comment: Individual customers (names and addresses) that purchase Adventure Works Cycles products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [EmailPromotion]'
				SET @SQL = @SQL + ', [AddressType]'
				SET @SQL = @SQL + ', [AddressLine1]'
				SET @SQL = @SQL + ', [AddressLine2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [StateProvinceName]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CountryRegionName]'
				SET @SQL = @SQL + ', [Demographics]'
				SET @SQL = @SQL + ' FROM [Sales].[vIndividualCustomer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [EmailPromotion],'
				SET @SQL = @SQL + ' [AddressType],'
				SET @SQL = @SQL + ' [AddressLine1],'
				SET @SQL = @SQL + ' [AddressLine2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [StateProvinceName],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CountryRegionName],'
				SET @SQL = @SQL + ' [Demographics]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[vIndividualCustomer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_vIndividualCustomer_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vIndividualCustomer table using a dynamically generated query.
-- Table Comment: Individual customers (names and addresses) that purchase Adventure Works Cycles products online.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [CustomerID]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [Phone]
					, [EmailAddress]
					, [EmailPromotion]
					, [AddressType]
					, [AddressLine1]
					, [AddressLine2]
					, [City]
					, [StateProvinceName]
					, [PostalCode]
					, [CountryRegionName]
					, [Demographics]
					FROM [Sales].[vIndividualCustomer] {0}
				)
				SELECT
				       [CustomerID],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [Phone],
				       [EmailAddress],
				       [EmailPromotion],
				       [AddressType],
				       [AddressLine1],
				       [AddressLine2],
				       [City],
				       [StateProvinceName],
				       [PostalCode],
				       [CountryRegionName],
				       [Demographics]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[vIndividualCustomer] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vIndividualDemographics_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vIndividualDemographics view
-- Table Comment: Displays the content from each element in the xml column Demographics for each customer in the Sales.Individual table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[TotalPurchaseYTD],
					[DateFirstPurchase],
					[BirthDate],
					[MaritalStatus],
					[YearlyIncome],
					[Gender],
					[TotalChildren],
					[NumberChildrenAtHome],
					[Education],
					[Occupation],
					[HomeOwnerFlag],
					[NumberCarsOwned]
				FROM
					[Sales].[vIndividualDemographics]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vIndividualDemographics_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vIndividualDemographics view passing page index and page count parameters
-- Table Comment: Displays the content from each element in the xml column Demographics for each customer in the Sales.Individual table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [TotalPurchaseYTD]'
				SET @SQL = @SQL + ', [DateFirstPurchase]'
				SET @SQL = @SQL + ', [BirthDate]'
				SET @SQL = @SQL + ', [MaritalStatus]'
				SET @SQL = @SQL + ', [YearlyIncome]'
				SET @SQL = @SQL + ', [Gender]'
				SET @SQL = @SQL + ', [TotalChildren]'
				SET @SQL = @SQL + ', [NumberChildrenAtHome]'
				SET @SQL = @SQL + ', [Education]'
				SET @SQL = @SQL + ', [Occupation]'
				SET @SQL = @SQL + ', [HomeOwnerFlag]'
				SET @SQL = @SQL + ', [NumberCarsOwned]'
				SET @SQL = @SQL + ' FROM [Sales].[vIndividualDemographics]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [TotalPurchaseYTD],'
				SET @SQL = @SQL + ' [DateFirstPurchase],'
				SET @SQL = @SQL + ' [BirthDate],'
				SET @SQL = @SQL + ' [MaritalStatus],'
				SET @SQL = @SQL + ' [YearlyIncome],'
				SET @SQL = @SQL + ' [Gender],'
				SET @SQL = @SQL + ' [TotalChildren],'
				SET @SQL = @SQL + ' [NumberChildrenAtHome],'
				SET @SQL = @SQL + ' [Education],'
				SET @SQL = @SQL + ' [Occupation],'
				SET @SQL = @SQL + ' [HomeOwnerFlag],'
				SET @SQL = @SQL + ' [NumberCarsOwned]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[vIndividualDemographics]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_vIndividualDemographics_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vIndividualDemographics table using a dynamically generated query.
-- Table Comment: Displays the content from each element in the xml column Demographics for each customer in the Sales.Individual table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [CustomerID]
					, [TotalPurchaseYTD]
					, [DateFirstPurchase]
					, [BirthDate]
					, [MaritalStatus]
					, [YearlyIncome]
					, [Gender]
					, [TotalChildren]
					, [NumberChildrenAtHome]
					, [Education]
					, [Occupation]
					, [HomeOwnerFlag]
					, [NumberCarsOwned]
					FROM [Sales].[vIndividualDemographics] {0}
				)
				SELECT
				       [CustomerID],
				       [TotalPurchaseYTD],
				       [DateFirstPurchase],
				       [BirthDate],
				       [MaritalStatus],
				       [YearlyIncome],
				       [Gender],
				       [TotalChildren],
				       [NumberChildrenAtHome],
				       [Education],
				       [Occupation],
				       [HomeOwnerFlag],
				       [NumberCarsOwned]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[vIndividualDemographics] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidate_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vJobCandidate view
-- Table Comment: Job candidate names and resumes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[JobCandidateID],
					[EmployeeID],
					[Name.Prefix],
					[Name.First],
					[Name.Middle],
					[Name.Last],
					[Name.Suffix],
					[Skills],
					[Addr.Type],
					[Addr.Loc.CountryRegion],
					[Addr.Loc.State],
					[Addr.Loc.City],
					[Addr.PostalCode],
					[EMail],
					[WebSite],
					[ModifiedDate]
				FROM
					[HumanResources].[vJobCandidate]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidate_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vJobCandidate view passing page index and page count parameters
-- Table Comment: Job candidate names and resumes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[JobCandidateID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [JobCandidateID]'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [Name.Prefix]'
				SET @SQL = @SQL + ', [Name.First]'
				SET @SQL = @SQL + ', [Name.Middle]'
				SET @SQL = @SQL + ', [Name.Last]'
				SET @SQL = @SQL + ', [Name.Suffix]'
				SET @SQL = @SQL + ', [Skills]'
				SET @SQL = @SQL + ', [Addr.Type]'
				SET @SQL = @SQL + ', [Addr.Loc.CountryRegion]'
				SET @SQL = @SQL + ', [Addr.Loc.State]'
				SET @SQL = @SQL + ', [Addr.Loc.City]'
				SET @SQL = @SQL + ', [Addr.PostalCode]'
				SET @SQL = @SQL + ', [EMail]'
				SET @SQL = @SQL + ', [WebSite]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [HumanResources].[vJobCandidate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [JobCandidateID],'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [Name.Prefix],'
				SET @SQL = @SQL + ' [Name.First],'
				SET @SQL = @SQL + ' [Name.Middle],'
				SET @SQL = @SQL + ' [Name.Last],'
				SET @SQL = @SQL + ' [Name.Suffix],'
				SET @SQL = @SQL + ' [Skills],'
				SET @SQL = @SQL + ' [Addr.Type],'
				SET @SQL = @SQL + ' [Addr.Loc.CountryRegion],'
				SET @SQL = @SQL + ' [Addr.Loc.State],'
				SET @SQL = @SQL + ' [Addr.Loc.City],'
				SET @SQL = @SQL + ' [Addr.PostalCode],'
				SET @SQL = @SQL + ' [EMail],'
				SET @SQL = @SQL + ' [WebSite],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[vJobCandidate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidate_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vJobCandidate table using a dynamically generated query.
-- Table Comment: Job candidate names and resumes.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [JobCandidateID]
					, [EmployeeID]
					, [Name.Prefix]
					, [Name.First]
					, [Name.Middle]
					, [Name.Last]
					, [Name.Suffix]
					, [Skills]
					, [Addr.Type]
					, [Addr.Loc.CountryRegion]
					, [Addr.Loc.State]
					, [Addr.Loc.City]
					, [Addr.PostalCode]
					, [EMail]
					, [WebSite]
					, [ModifiedDate]
					FROM [HumanResources].[vJobCandidate] {0}
				)
				SELECT
				       [JobCandidateID],
				       [EmployeeID],
				       [Name.Prefix],
				       [Name.First],
				       [Name.Middle],
				       [Name.Last],
				       [Name.Suffix],
				       [Skills],
				       [Addr.Type],
				       [Addr.Loc.CountryRegion],
				       [Addr.Loc.State],
				       [Addr.Loc.City],
				       [Addr.PostalCode],
				       [EMail],
				       [WebSite],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[vJobCandidate] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidateEducation_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vJobCandidateEducation view
-- Table Comment: Displays the content from each education related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[JobCandidateID],
					[Edu.Level],
					[Edu.StartDate],
					[Edu.EndDate],
					[Edu.Degree],
					[Edu.Major],
					[Edu.Minor],
					[Edu.GPA],
					[Edu.GPAScale],
					[Edu.School],
					[Edu.Loc.CountryRegion],
					[Edu.Loc.State],
					[Edu.Loc.City]
				FROM
					[HumanResources].[vJobCandidateEducation]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidateEducation_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vJobCandidateEducation view passing page index and page count parameters
-- Table Comment: Displays the content from each education related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[JobCandidateID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [JobCandidateID]'
				SET @SQL = @SQL + ', [Edu.Level]'
				SET @SQL = @SQL + ', [Edu.StartDate]'
				SET @SQL = @SQL + ', [Edu.EndDate]'
				SET @SQL = @SQL + ', [Edu.Degree]'
				SET @SQL = @SQL + ', [Edu.Major]'
				SET @SQL = @SQL + ', [Edu.Minor]'
				SET @SQL = @SQL + ', [Edu.GPA]'
				SET @SQL = @SQL + ', [Edu.GPAScale]'
				SET @SQL = @SQL + ', [Edu.School]'
				SET @SQL = @SQL + ', [Edu.Loc.CountryRegion]'
				SET @SQL = @SQL + ', [Edu.Loc.State]'
				SET @SQL = @SQL + ', [Edu.Loc.City]'
				SET @SQL = @SQL + ' FROM [HumanResources].[vJobCandidateEducation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [JobCandidateID],'
				SET @SQL = @SQL + ' [Edu.Level],'
				SET @SQL = @SQL + ' [Edu.StartDate],'
				SET @SQL = @SQL + ' [Edu.EndDate],'
				SET @SQL = @SQL + ' [Edu.Degree],'
				SET @SQL = @SQL + ' [Edu.Major],'
				SET @SQL = @SQL + ' [Edu.Minor],'
				SET @SQL = @SQL + ' [Edu.GPA],'
				SET @SQL = @SQL + ' [Edu.GPAScale],'
				SET @SQL = @SQL + ' [Edu.School],'
				SET @SQL = @SQL + ' [Edu.Loc.CountryRegion],'
				SET @SQL = @SQL + ' [Edu.Loc.State],'
				SET @SQL = @SQL + ' [Edu.Loc.City]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[vJobCandidateEducation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidateEducation_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vJobCandidateEducation table using a dynamically generated query.
-- Table Comment: Displays the content from each education related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [JobCandidateID]
					, [Edu.Level]
					, [Edu.StartDate]
					, [Edu.EndDate]
					, [Edu.Degree]
					, [Edu.Major]
					, [Edu.Minor]
					, [Edu.GPA]
					, [Edu.GPAScale]
					, [Edu.School]
					, [Edu.Loc.CountryRegion]
					, [Edu.Loc.State]
					, [Edu.Loc.City]
					FROM [HumanResources].[vJobCandidateEducation] {0}
				)
				SELECT
				       [JobCandidateID],
				       [Edu.Level],
				       [Edu.StartDate],
				       [Edu.EndDate],
				       [Edu.Degree],
				       [Edu.Major],
				       [Edu.Minor],
				       [Edu.GPA],
				       [Edu.GPAScale],
				       [Edu.School],
				       [Edu.Loc.CountryRegion],
				       [Edu.Loc.State],
				       [Edu.Loc.City]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[vJobCandidateEducation] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidateEmployment_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vJobCandidateEmployment view
-- Table Comment: Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[JobCandidateID],
					[Emp.StartDate],
					[Emp.EndDate],
					[Emp.OrgName],
					[Emp.JobTitle],
					[Emp.Responsibility],
					[Emp.FunctionCategory],
					[Emp.IndustryCategory],
					[Emp.Loc.CountryRegion],
					[Emp.Loc.State],
					[Emp.Loc.City]
				FROM
					[HumanResources].[vJobCandidateEmployment]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidateEmployment_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vJobCandidateEmployment view passing page index and page count parameters
-- Table Comment: Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[JobCandidateID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [JobCandidateID]'
				SET @SQL = @SQL + ', [Emp.StartDate]'
				SET @SQL = @SQL + ', [Emp.EndDate]'
				SET @SQL = @SQL + ', [Emp.OrgName]'
				SET @SQL = @SQL + ', [Emp.JobTitle]'
				SET @SQL = @SQL + ', [Emp.Responsibility]'
				SET @SQL = @SQL + ', [Emp.FunctionCategory]'
				SET @SQL = @SQL + ', [Emp.IndustryCategory]'
				SET @SQL = @SQL + ', [Emp.Loc.CountryRegion]'
				SET @SQL = @SQL + ', [Emp.Loc.State]'
				SET @SQL = @SQL + ', [Emp.Loc.City]'
				SET @SQL = @SQL + ' FROM [HumanResources].[vJobCandidateEmployment]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [JobCandidateID],'
				SET @SQL = @SQL + ' [Emp.StartDate],'
				SET @SQL = @SQL + ' [Emp.EndDate],'
				SET @SQL = @SQL + ' [Emp.OrgName],'
				SET @SQL = @SQL + ' [Emp.JobTitle],'
				SET @SQL = @SQL + ' [Emp.Responsibility],'
				SET @SQL = @SQL + ' [Emp.FunctionCategory],'
				SET @SQL = @SQL + ' [Emp.IndustryCategory],'
				SET @SQL = @SQL + ' [Emp.Loc.CountryRegion],'
				SET @SQL = @SQL + ' [Emp.Loc.State],'
				SET @SQL = @SQL + ' [Emp.Loc.City]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [HumanResources].[vJobCandidateEmployment]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="HumanResources" name="usp_adwTiers_vJobCandidateEmployment_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vJobCandidateEmployment table using a dynamically generated query.
-- Table Comment: Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [JobCandidateID]
					, [Emp.StartDate]
					, [Emp.EndDate]
					, [Emp.OrgName]
					, [Emp.JobTitle]
					, [Emp.Responsibility]
					, [Emp.FunctionCategory]
					, [Emp.IndustryCategory]
					, [Emp.Loc.CountryRegion]
					, [Emp.Loc.State]
					, [Emp.Loc.City]
					FROM [HumanResources].[vJobCandidateEmployment] {0}
				)
				SELECT
				       [JobCandidateID],
				       [Emp.StartDate],
				       [Emp.EndDate],
				       [Emp.OrgName],
				       [Emp.JobTitle],
				       [Emp.Responsibility],
				       [Emp.FunctionCategory],
				       [Emp.IndustryCategory],
				       [Emp.Loc.CountryRegion],
				       [Emp.Loc.State],
				       [Emp.Loc.City]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [HumanResources].[vJobCandidateEmployment] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_vProductAndDescription_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vProductAndDescription view
-- Table Comment: Product names and descriptions. Product descriptions are provided in multiple languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[Name],
					[ProductModel],
					[CultureID],
					[Description]
				FROM
					[Production].[vProductAndDescription]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_vProductAndDescription_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vProductAndDescription view passing page index and page count parameters
-- Table Comment: Product names and descriptions. Product descriptions are provided in multiple languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ProductModel]'
				SET @SQL = @SQL + ', [CultureID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [Production].[vProductAndDescription]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ProductModel],'
				SET @SQL = @SQL + ' [CultureID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[vProductAndDescription]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_vProductAndDescription_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vProductAndDescription table using a dynamically generated query.
-- Table Comment: Product names and descriptions. Product descriptions are provided in multiple languages.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ProductID]
					, [Name]
					, [ProductModel]
					, [CultureID]
					, [Description]
					FROM [Production].[vProductAndDescription] {0}
				)
				SELECT
				       [ProductID],
				       [Name],
				       [ProductModel],
				       [CultureID],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[vProductAndDescription] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_vProductModelCatalogDescription_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vProductModelCatalogDescription view
-- Table Comment: Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductModelID],
					[Name],
					[Summary],
					[Manufacturer],
					[Copyright],
					[ProductURL],
					[WarrantyPeriod],
					[WarrantyDescription],
					[NoOfYears],
					[MaintenanceDescription],
					[Wheel],
					[Saddle],
					[Pedal],
					[BikeFrame],
					[Crankset],
					[PictureAngle],
					[PictureSize],
					[ProductPhotoID],
					[Material],
					[Color],
					[ProductLine],
					[Style],
					[RiderExperience],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[vProductModelCatalogDescription]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_vProductModelCatalogDescription_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vProductModelCatalogDescription view passing page index and page count parameters
-- Table Comment: Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductModelID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductModelID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Summary]'
				SET @SQL = @SQL + ', [Manufacturer]'
				SET @SQL = @SQL + ', [Copyright]'
				SET @SQL = @SQL + ', [ProductURL]'
				SET @SQL = @SQL + ', [WarrantyPeriod]'
				SET @SQL = @SQL + ', [WarrantyDescription]'
				SET @SQL = @SQL + ', [NoOfYears]'
				SET @SQL = @SQL + ', [MaintenanceDescription]'
				SET @SQL = @SQL + ', [Wheel]'
				SET @SQL = @SQL + ', [Saddle]'
				SET @SQL = @SQL + ', [Pedal]'
				SET @SQL = @SQL + ', [BikeFrame]'
				SET @SQL = @SQL + ', [Crankset]'
				SET @SQL = @SQL + ', [PictureAngle]'
				SET @SQL = @SQL + ', [PictureSize]'
				SET @SQL = @SQL + ', [ProductPhotoID]'
				SET @SQL = @SQL + ', [Material]'
				SET @SQL = @SQL + ', [Color]'
				SET @SQL = @SQL + ', [ProductLine]'
				SET @SQL = @SQL + ', [Style]'
				SET @SQL = @SQL + ', [RiderExperience]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[vProductModelCatalogDescription]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductModelID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Summary],'
				SET @SQL = @SQL + ' [Manufacturer],'
				SET @SQL = @SQL + ' [Copyright],'
				SET @SQL = @SQL + ' [ProductURL],'
				SET @SQL = @SQL + ' [WarrantyPeriod],'
				SET @SQL = @SQL + ' [WarrantyDescription],'
				SET @SQL = @SQL + ' [NoOfYears],'
				SET @SQL = @SQL + ' [MaintenanceDescription],'
				SET @SQL = @SQL + ' [Wheel],'
				SET @SQL = @SQL + ' [Saddle],'
				SET @SQL = @SQL + ' [Pedal],'
				SET @SQL = @SQL + ' [BikeFrame],'
				SET @SQL = @SQL + ' [Crankset],'
				SET @SQL = @SQL + ' [PictureAngle],'
				SET @SQL = @SQL + ' [PictureSize],'
				SET @SQL = @SQL + ' [ProductPhotoID],'
				SET @SQL = @SQL + ' [Material],'
				SET @SQL = @SQL + ' [Color],'
				SET @SQL = @SQL + ' [ProductLine],'
				SET @SQL = @SQL + ' [Style],'
				SET @SQL = @SQL + ' [RiderExperience],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[vProductModelCatalogDescription]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_vProductModelCatalogDescription_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vProductModelCatalogDescription table using a dynamically generated query.
-- Table Comment: Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ProductModelID]
					, [Name]
					, [Summary]
					, [Manufacturer]
					, [Copyright]
					, [ProductURL]
					, [WarrantyPeriod]
					, [WarrantyDescription]
					, [NoOfYears]
					, [MaintenanceDescription]
					, [Wheel]
					, [Saddle]
					, [Pedal]
					, [BikeFrame]
					, [Crankset]
					, [PictureAngle]
					, [PictureSize]
					, [ProductPhotoID]
					, [Material]
					, [Color]
					, [ProductLine]
					, [Style]
					, [RiderExperience]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[vProductModelCatalogDescription] {0}
				)
				SELECT
				       [ProductModelID],
				       [Name],
				       [Summary],
				       [Manufacturer],
				       [Copyright],
				       [ProductURL],
				       [WarrantyPeriod],
				       [WarrantyDescription],
				       [NoOfYears],
				       [MaintenanceDescription],
				       [Wheel],
				       [Saddle],
				       [Pedal],
				       [BikeFrame],
				       [Crankset],
				       [PictureAngle],
				       [PictureSize],
				       [ProductPhotoID],
				       [Material],
				       [Color],
				       [ProductLine],
				       [Style],
				       [RiderExperience],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[vProductModelCatalogDescription] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_vProductModelInstructions_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vProductModelInstructions view
-- Table Comment: Displays the content from each element in the xml column Instructions for each product in the Production.ProductModel table that has manufacturing instructions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductModelID],
					[Name],
					[Instructions],
					[LocationID],
					[SetupHours],
					[MachineHours],
					[LaborHours],
					[LotSize],
					[Step],
					[rowguid],
					[ModifiedDate]
				FROM
					[Production].[vProductModelInstructions]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Production" name="usp_adwTiers_vProductModelInstructions_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vProductModelInstructions view passing page index and page count parameters
-- Table Comment: Displays the content from each element in the xml column Instructions for each product in the Production.ProductModel table that has manufacturing instructions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductModelID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductModelID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Instructions]'
				SET @SQL = @SQL + ', [LocationID]'
				SET @SQL = @SQL + ', [SetupHours]'
				SET @SQL = @SQL + ', [MachineHours]'
				SET @SQL = @SQL + ', [LaborHours]'
				SET @SQL = @SQL + ', [LotSize]'
				SET @SQL = @SQL + ', [Step]'
				SET @SQL = @SQL + ', [rowguid]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ' FROM [Production].[vProductModelInstructions]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductModelID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Instructions],'
				SET @SQL = @SQL + ' [LocationID],'
				SET @SQL = @SQL + ' [SetupHours],'
				SET @SQL = @SQL + ' [MachineHours],'
				SET @SQL = @SQL + ' [LaborHours],'
				SET @SQL = @SQL + ' [LotSize],'
				SET @SQL = @SQL + ' [Step],'
				SET @SQL = @SQL + ' [rowguid],'
				SET @SQL = @SQL + ' [ModifiedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Production].[vProductModelInstructions]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Production" name="usp_adwTiers_vProductModelInstructions_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vProductModelInstructions table using a dynamically generated query.
-- Table Comment: Displays the content from each element in the xml column Instructions for each product in the Production.ProductModel table that has manufacturing instructions.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [ProductModelID]
					, [Name]
					, [Instructions]
					, [LocationID]
					, [SetupHours]
					, [MachineHours]
					, [LaborHours]
					, [LotSize]
					, [Step]
					, [rowguid]
					, [ModifiedDate]
					FROM [Production].[vProductModelInstructions] {0}
				)
				SELECT
				       [ProductModelID],
				       [Name],
				       [Instructions],
				       [LocationID],
				       [SetupHours],
				       [MachineHours],
				       [LaborHours],
				       [LotSize],
				       [Step],
				       [rowguid],
				       [ModifiedDate]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Production].[vProductModelInstructions] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vSalesPerson_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vSalesPerson view
-- Table Comment: Sales representiatives (names and addresses) and their sales-related information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesPersonID],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[JobTitle],
					[Phone],
					[EmailAddress],
					[EmailPromotion],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceName],
					[PostalCode],
					[CountryRegionName],
					[TerritoryName],
					[TerritoryGroup],
					[SalesQuota],
					[SalesYTD],
					[SalesLastYear]
				FROM
					[Sales].[vSalesPerson]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vSalesPerson_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vSalesPerson view passing page index and page count parameters
-- Table Comment: Sales representiatives (names and addresses) and their sales-related information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesPersonID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [JobTitle]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [EmailPromotion]'
				SET @SQL = @SQL + ', [AddressLine1]'
				SET @SQL = @SQL + ', [AddressLine2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [StateProvinceName]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CountryRegionName]'
				SET @SQL = @SQL + ', [TerritoryName]'
				SET @SQL = @SQL + ', [TerritoryGroup]'
				SET @SQL = @SQL + ', [SalesQuota]'
				SET @SQL = @SQL + ', [SalesYTD]'
				SET @SQL = @SQL + ', [SalesLastYear]'
				SET @SQL = @SQL + ' FROM [Sales].[vSalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [JobTitle],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [EmailPromotion],'
				SET @SQL = @SQL + ' [AddressLine1],'
				SET @SQL = @SQL + ' [AddressLine2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [StateProvinceName],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CountryRegionName],'
				SET @SQL = @SQL + ' [TerritoryName],'
				SET @SQL = @SQL + ' [TerritoryGroup],'
				SET @SQL = @SQL + ' [SalesQuota],'
				SET @SQL = @SQL + ' [SalesYTD],'
				SET @SQL = @SQL + ' [SalesLastYear]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[vSalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_vSalesPerson_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vSalesPerson table using a dynamically generated query.
-- Table Comment: Sales representiatives (names and addresses) and their sales-related information.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [SalesPersonID]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [JobTitle]
					, [Phone]
					, [EmailAddress]
					, [EmailPromotion]
					, [AddressLine1]
					, [AddressLine2]
					, [City]
					, [StateProvinceName]
					, [PostalCode]
					, [CountryRegionName]
					, [TerritoryName]
					, [TerritoryGroup]
					, [SalesQuota]
					, [SalesYTD]
					, [SalesLastYear]
					FROM [Sales].[vSalesPerson] {0}
				)
				SELECT
				       [SalesPersonID],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [JobTitle],
				       [Phone],
				       [EmailAddress],
				       [EmailPromotion],
				       [AddressLine1],
				       [AddressLine2],
				       [City],
				       [StateProvinceName],
				       [PostalCode],
				       [CountryRegionName],
				       [TerritoryName],
				       [TerritoryGroup],
				       [SalesQuota],
				       [SalesYTD],
				       [SalesLastYear]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[vSalesPerson] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vSalesPersonSalesByFiscalYears_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vSalesPersonSalesByFiscalYears view
-- Table Comment: Uses PIVOT to return aggregated sales information for each sales representative.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SalesPersonID],
					[FullName],
					[Title],
					[SalesTerritory],
					[2002],
					[2003],
					[2004]
				FROM
					[Sales].[vSalesPersonSalesByFiscalYears]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vSalesPersonSalesByFiscalYears_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vSalesPersonSalesByFiscalYears view passing page index and page count parameters
-- Table Comment: Uses PIVOT to return aggregated sales information for each sales representative.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SalesPersonID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [FullName]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [SalesTerritory]'
				SET @SQL = @SQL + ', [2002]'
				SET @SQL = @SQL + ', [2003]'
				SET @SQL = @SQL + ', [2004]'
				SET @SQL = @SQL + ' FROM [Sales].[vSalesPersonSalesByFiscalYears]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [FullName],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [SalesTerritory],'
				SET @SQL = @SQL + ' [2002],'
				SET @SQL = @SQL + ' [2003],'
				SET @SQL = @SQL + ' [2004]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[vSalesPersonSalesByFiscalYears]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_vSalesPersonSalesByFiscalYears_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vSalesPersonSalesByFiscalYears table using a dynamically generated query.
-- Table Comment: Uses PIVOT to return aggregated sales information for each sales representative.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [SalesPersonID]
					, [FullName]
					, [Title]
					, [SalesTerritory]
					, [2002]
					, [2003]
					, [2004]
					FROM [Sales].[vSalesPersonSalesByFiscalYears] {0}
				)
				SELECT
				       [SalesPersonID],
				       [FullName],
				       [Title],
				       [SalesTerritory],
				       [2002],
				       [2003],
				       [2004]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[vSalesPersonSalesByFiscalYears] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_vStateProvinceCountryRegion_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vStateProvinceCountryRegion view
-- Table Comment: Joins StateProvince table with CountryRegion table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[StateProvinceID],
					[StateProvinceCode],
					[IsOnlyStateProvinceFlag],
					[StateProvinceName],
					[TerritoryID],
					[CountryRegionCode],
					[CountryRegionName]
				FROM
					[Person].[vStateProvinceCountryRegion]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Person" name="usp_adwTiers_vStateProvinceCountryRegion_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vStateProvinceCountryRegion view passing page index and page count parameters
-- Table Comment: Joins StateProvince table with CountryRegion table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[StateProvinceID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [StateProvinceID]'
				SET @SQL = @SQL + ', [StateProvinceCode]'
				SET @SQL = @SQL + ', [IsOnlyStateProvinceFlag]'
				SET @SQL = @SQL + ', [StateProvinceName]'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [CountryRegionCode]'
				SET @SQL = @SQL + ', [CountryRegionName]'
				SET @SQL = @SQL + ' FROM [Person].[vStateProvinceCountryRegion]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [StateProvinceID],'
				SET @SQL = @SQL + ' [StateProvinceCode],'
				SET @SQL = @SQL + ' [IsOnlyStateProvinceFlag],'
				SET @SQL = @SQL + ' [StateProvinceName],'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [CountryRegionCode],'
				SET @SQL = @SQL + ' [CountryRegionName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Person].[vStateProvinceCountryRegion]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Person" name="usp_adwTiers_vStateProvinceCountryRegion_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vStateProvinceCountryRegion table using a dynamically generated query.
-- Table Comment: Joins StateProvince table with CountryRegion table.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [StateProvinceID]
					, [StateProvinceCode]
					, [IsOnlyStateProvinceFlag]
					, [StateProvinceName]
					, [TerritoryID]
					, [CountryRegionCode]
					, [CountryRegionName]
					FROM [Person].[vStateProvinceCountryRegion] {0}
				)
				SELECT
				       [StateProvinceID],
				       [StateProvinceCode],
				       [IsOnlyStateProvinceFlag],
				       [StateProvinceName],
				       [TerritoryID],
				       [CountryRegionCode],
				       [CountryRegionName]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Person].[vStateProvinceCountryRegion] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vStoreWithDemographics_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vStoreWithDemographics view
-- Table Comment: Stores (names and addresses) that sell Adventure Works Cycles products to consumers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[Name],
					[ContactType],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[Phone],
					[EmailAddress],
					[EmailPromotion],
					[AddressType],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceName],
					[PostalCode],
					[CountryRegionName],
					[AnnualSales],
					[AnnualRevenue],
					[BankName],
					[BusinessType],
					[YearOpened],
					[Specialty],
					[SquareFeet],
					[Brands],
					[Internet],
					[NumberEmployees]
				FROM
					[Sales].[vStoreWithDemographics]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Sales" name="usp_adwTiers_vStoreWithDemographics_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vStoreWithDemographics view passing page index and page count parameters
-- Table Comment: Stores (names and addresses) that sell Adventure Works Cycles products to consumers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ContactType]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [EmailPromotion]'
				SET @SQL = @SQL + ', [AddressType]'
				SET @SQL = @SQL + ', [AddressLine1]'
				SET @SQL = @SQL + ', [AddressLine2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [StateProvinceName]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CountryRegionName]'
				SET @SQL = @SQL + ', [AnnualSales]'
				SET @SQL = @SQL + ', [AnnualRevenue]'
				SET @SQL = @SQL + ', [BankName]'
				SET @SQL = @SQL + ', [BusinessType]'
				SET @SQL = @SQL + ', [YearOpened]'
				SET @SQL = @SQL + ', [Specialty]'
				SET @SQL = @SQL + ', [SquareFeet]'
				SET @SQL = @SQL + ', [Brands]'
				SET @SQL = @SQL + ', [Internet]'
				SET @SQL = @SQL + ', [NumberEmployees]'
				SET @SQL = @SQL + ' FROM [Sales].[vStoreWithDemographics]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ContactType],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [EmailPromotion],'
				SET @SQL = @SQL + ' [AddressType],'
				SET @SQL = @SQL + ' [AddressLine1],'
				SET @SQL = @SQL + ' [AddressLine2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [StateProvinceName],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CountryRegionName],'
				SET @SQL = @SQL + ' [AnnualSales],'
				SET @SQL = @SQL + ' [AnnualRevenue],'
				SET @SQL = @SQL + ' [BankName],'
				SET @SQL = @SQL + ' [BusinessType],'
				SET @SQL = @SQL + ' [YearOpened],'
				SET @SQL = @SQL + ' [Specialty],'
				SET @SQL = @SQL + ' [SquareFeet],'
				SET @SQL = @SQL + ' [Brands],'
				SET @SQL = @SQL + ' [Internet],'
				SET @SQL = @SQL + ' [NumberEmployees]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Sales].[vStoreWithDemographics]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Sales" name="usp_adwTiers_vStoreWithDemographics_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vStoreWithDemographics table using a dynamically generated query.
-- Table Comment: Stores (names and addresses) that sell Adventure Works Cycles products to consumers.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [CustomerID]
					, [Name]
					, [ContactType]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [Phone]
					, [EmailAddress]
					, [EmailPromotion]
					, [AddressType]
					, [AddressLine1]
					, [AddressLine2]
					, [City]
					, [StateProvinceName]
					, [PostalCode]
					, [CountryRegionName]
					, [AnnualSales]
					, [AnnualRevenue]
					, [BankName]
					, [BusinessType]
					, [YearOpened]
					, [Specialty]
					, [SquareFeet]
					, [Brands]
					, [Internet]
					, [NumberEmployees]
					FROM [Sales].[vStoreWithDemographics] {0}
				)
				SELECT
				       [CustomerID],
				       [Name],
				       [ContactType],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [Phone],
				       [EmailAddress],
				       [EmailPromotion],
				       [AddressType],
				       [AddressLine1],
				       [AddressLine2],
				       [City],
				       [StateProvinceName],
				       [PostalCode],
				       [CountryRegionName],
				       [AnnualSales],
				       [AnnualRevenue],
				       [BankName],
				       [BusinessType],
				       [YearOpened],
				       [Specialty],
				       [SquareFeet],
				       [Brands],
				       [Internet],
				       [NumberEmployees]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Sales].[vStoreWithDemographics] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_vVendor_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets all records from the vVendor view
-- Table Comment: Vendor (company) names and addresses and the names of vendor employees to contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[VendorID],
					[Name],
					[ContactType],
					[Title],
					[FirstName],
					[MiddleName],
					[LastName],
					[Suffix],
					[Phone],
					[EmailAddress],
					[EmailPromotion],
					[AddressLine1],
					[AddressLine2],
					[City],
					[StateProvinceName],
					[PostalCode],
					[CountryRegionName]
				FROM
					[Purchasing].[vVendor]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="Purchasing" name="usp_adwTiers_vVendor_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vVendor view passing page index and page count parameters
-- Table Comment: Vendor (company) names and addresses and the names of vendor employees to contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[VendorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [VendorID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ContactType]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [MiddleName]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [Suffix]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [EmailPromotion]'
				SET @SQL = @SQL + ', [AddressLine1]'
				SET @SQL = @SQL + ', [AddressLine2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [StateProvinceName]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CountryRegionName]'
				SET @SQL = @SQL + ' FROM [Purchasing].[vVendor]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [VendorID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ContactType],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [MiddleName],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [Suffix],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [EmailPromotion],'
				SET @SQL = @SQL + ' [AddressLine1],'
				SET @SQL = @SQL + ' [AddressLine2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [StateProvinceName],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CountryRegionName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [Purchasing].[vVendor]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="Purchasing" name="usp_adwTiers_vVendor_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: Nettiers Sample (http://www.nettiers.com)
-- Purpose: Gets records from the vVendor table using a dynamically generated query.
-- Table Comment: Vendor (company) names and addresses and the names of vendor employees to contact.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [VendorID]
					, [Name]
					, [ContactType]
					, [Title]
					, [FirstName]
					, [MiddleName]
					, [LastName]
					, [Suffix]
					, [Phone]
					, [EmailAddress]
					, [EmailPromotion]
					, [AddressLine1]
					, [AddressLine2]
					, [City]
					, [StateProvinceName]
					, [PostalCode]
					, [CountryRegionName]
					FROM [Purchasing].[vVendor] {0}
				)
				SELECT
				       [VendorID],
				       [Name],
				       [ContactType],
				       [Title],
				       [FirstName],
				       [MiddleName],
				       [LastName],
				       [Suffix],
				       [Phone],
				       [EmailAddress],
				       [EmailPromotion],
				       [AddressLine1],
				       [AddressLine2],
				       [City],
				       [StateProvinceName],
				       [PostalCode],
				       [CountryRegionName]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [Purchasing].[vVendor] {0};
				
				END
			]]></body>
		</procedure>
		
</procedures>
</root>
