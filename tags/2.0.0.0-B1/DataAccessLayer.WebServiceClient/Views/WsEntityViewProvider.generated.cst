<%--
 * $Id: WsEntityViewProvider.generated.cst,v 1.1 2006/01/23 13:08:04 jroland Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006-03-16 16:53:08 -0600 (Thu, 16 Mar 2006) $
 * $Revision: 62 $
--%>
<%@ CodeTemplate Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." ResponseEncoding="UTF-8" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>
<%@ Property Name="CustomProcedureStartsWith" Type="System.String" Default="_{0}_" Category="Options" Description="If you include custom stored procedures, this is the pattern that NetTiers will look for your custom stored procedures. A string format will be used to match the procedure pattern.  So, {0}=TableName, {1}=StoredProc Prefix.  By default NetTiers will look at tables that starts with '_{0}_', which means it will detect the procedure _TableName_GetByBirthdate and will be detected and generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="WebReferenceName" Type="System.String" Default="" Category="Decoration" Description="The WebService Proxy Class Name." %>
<%@ Property Name="ProxyClassName" Type="System.String" Default="WsProxy" Optional="True" Category="Decoration" Description="The WebService Proxy Class Name." %>

<%
	// Name of the table being worked on.
	string name = SourceView.Name;
		
	
	string className = GetClassName(SourceView.Name);
	string abstractRepositoryClassName = "Ws" + GetProviderName(SourceView.Name);
	string providerName = GetProviderName(SourceView.Name);
	string providerBaseName = GetProviderBaseName(SourceView.Name);
	string collectionClassName = GetViewCollectionClassName(SourceView.Name);
		
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region "Using directives"

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using <%=NameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>.WebServiceClient
{

	/// <summary>
	///	This class is the base repository for the CRUD operations on the <%=className%> objects.
	/// </summary>
	public partial class <%=abstractRepositoryClassName%> : <%=providerBaseName%>
	{
		#region "Declarations"	
			
		/// <summary>
		/// the Url of the webservice.
		/// </summary>
		protected string _url;
			
		#endregion "Declarations"
		
		#region "Constructors"
	
		/// <summary>
		/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		public <%=abstractRepositoryClassName%>()
		{		
		}
		
		/// <summary>
		/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
		/// Uses connection string to connect to datasource.
		/// </summary>
		/// <param name="url">The url to the webservice.</param>
		public <%=abstractRepositoryClassName%>(string url)
		{
			this._url = url;
		}
			
		#endregion "Constructors"	
			
		
		public string Url
        {
        	get {return this._url;}
        	set {this._url = value;}
        }
	
		#region "Convertion utility"
		
		/// <summary>
		/// Convert a collection from the ws proxy to a nettiers collection.
		/// </summary>
		public static <%=collectionClassName%> Convert(<%=WebReferenceName + "." + GetClassName(SourceView.Name) %>[] items)
		{
			<%=collectionClassName%> outItems = new <%=collectionClassName%>();
			foreach(<%=WebReferenceName + "." + GetClassName(SourceView.Name)%> item in items)
			{
				outItems.Add(Convert(item));
			}
			return outItems;
		}
		
		/// <summary>
		/// Convert a nettiers collection to the ws proxy collection.
		/// </summary>
		public static <%=className%> Convert(<%=WebReferenceName+"."+GetClassName(SourceView.Name)%> item)
		{			
			<%=className%> outItem = new <%=className%>();			
			<% for(int i=0; i<SourceView.Columns.Count; i++) { %>
			outItem.<%= GetPropertyName(SourceView.Columns[i].Name) %> = item.<%= GetPropertyName(SourceView.Columns[i].Name) %>;
			<% } %>				
							
			outItem.AcceptChanges();			
			return outItem;
		}
		
		/// <summary>
		/// Convert a nettiers entity to the ws proxy entity.
		/// </summary>
		public static <%=WebReferenceName+"."+GetClassName(SourceView.Name)%> Convert(<%=className%> item)
		{			
			<%=WebReferenceName+"."+GetClassName(SourceView.Name)%> outItem = new <%=WebReferenceName+"."+GetClassName(SourceView.Name)%>();			
			<% for(int i=0; i<SourceView.Columns.Count; i++) { %>
			outItem.<%= GetPropertyName(SourceView.Columns[i].Name) %> = item.<%= GetPropertyName(SourceView.Columns[i].Name) %>;
			<% } %>				
							
			return outItem;
		}
		
		#endregion
	
		<% if (IncludeGetList) { %>
		#region "GetList Functions"
						
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> GetAll(TransactionManager transactionManager, int start, int pageLength)
		{
			<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
			proxy.Url = this._url;
				
			<%=WebReferenceName%>.<%=GetClassName(SourceView.Name)%>[] items = proxy.<%=providerName%>_GetAll(start, pageLength);			
			return Convert(items); 
		}
		
		#endregion
	
		#region "Get filterd and sorted"
			
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> Get(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength)
		{
			<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
			proxy.Url = this._url;
					
			<%=WebReferenceName%>.<%=GetClassName(SourceView.Name)%>[] items = proxy.<%=providerName%>_Get(whereClause, orderBy, start, pageLength);
				
			return Convert(items); 
		}
		
		#endregion
	
<%
 	} //end IncludeGetList
%>
	

<%/*---------------------------------------------------------------------------------
							CUSTOM STORED PROCEDURES
  -------------------------------------------------------------------------------*/%>

<% if (IncludeCustoms) { %>

	#region "Custom Methods"
	
<% 
	string prefix = string.Format(CustomProcedureStartsWith, SourceView.Name, ProcedurePrefix);
	foreach(CommandSchema command in SourceView.Database.Commands)
	{
		//Response.WriteLine("// " + command.Name);
	
		// If the stored procedure is targeting the current table.
		if (command.Name.StartsWith(prefix))
		{
			string methodName = command.Name.Substring(prefix.Length);
			string returnType = "void";
						
			if (IsMatching(command, SourceView))
			{
				returnType = collectionClassName;
			}
			else	// client can not use IDataReader
			{
				returnType = "DataSet";
			}
%>
	#region "<%=command.Name%>"

	/// <summary>
	///	This method wrap the '<%=command.Name%>' stored procedure. 
	/// </summary><%=TransformStoredProcedureInputsToMethodComments(command.InputParameters)%>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generate from a stored procedure.</remark>
	/// <returns>A <see cref="<%=returnType%>"/> instance.</returns>
	public override <%=returnType%> <%=methodName%>(TransactionManager transactionManager, int start, int pageLength <%=TransformStoredProcedureInputsToMethod(true, command.InputParameters)%>)
	{
		<%=WebReferenceName%>.<%=ProxyClassName%> proxy = new <%=WebReferenceName%>.<%=ProxyClassName%>();
		proxy.Url = this._url;
		
		<% if (returnType == "DataSet") { %>
		return proxy.<%=providerName%>_<%=methodName%>(start, pageLength<%=TransformStoredProcedureInputsToDataAccess(true, command.InputParameters)%>);
		<% } else {%>
		<%=WebReferenceName%>.<%=GetClassName(SourceView.Name)%>[] items = proxy.<%=providerName%>_<%=methodName%>(start, pageLength<%=TransformStoredProcedureInputsToDataAccess(true, command.InputParameters)%>);
		return Convert(items); 
		<% } %>
	}	
	
	#endregion	
	
<%
		}
	}
%>

	#endregion

<% } // endif IncludeCustoms %>
	
	
	}//end class
} // end namespace