<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.PolicyInjection</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ApplyNoPoliciesAttribute">
            <summary>
            Attribute used to indicate that no interception should be applied to
            the attribute target.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.AttributeDrivenPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy"/> class that reads and constructs handlers
            based on <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerAttribute"/> on the target.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy">
            <summary>
            Base class for Policies that specifies which handlers apply to which methods of an object.
            </summary>
            <remarks>
            <para>This base class always enforces the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ApplyNoPoliciesMatchingRule"/> before
            passing the checks onto derived classes. This way, derived classes do not need to
            worry about implementing this check.</para>
            <para>It also means that derived classes cannot override this rule. This is considered a feature.</para></remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.#ctor">
            <summary>
            Creates a new empty Policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.#ctor(System.String)">
            <summary>
            Creates a new empty policy with the given name.
            </summary>
            <param name="name">Name of the policy.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.AppliesTo(System.Type)">
            <summary>
            Checks to see if this policy contains rules that match members
            of the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>true if any of the members of type t match the ruleset for this policy, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks if the rules in this policy match the given member info.
            </summary>
            <param name="member">MemberInfo to check against.</param>
            <returns>true if ruleset matches, false if it does not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.GetHandlersFor(System.Reflection.MethodBase)">
            <summary>
            Returns ordered collection of handlers in order that apply to the given member.
            </summary>
            <param name="member">Member that may or may not be assigned handlers by this policy.</param>
            <returns>Collection of handlers (possibly empty) that apply to this member.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.DoesApplyTo(System.Type)">
            <summary>
            Derived classes implement this method to calculate if the policy
            provides any handlers for any methods on the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>true if the policy applies to this type, false if it does not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.DoesMatch(System.Reflection.MethodBase)">
            <summary>
            Derived classes implement this method to calculate if the policy
            will provide any handler to the specified member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if policy applies to this member, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.DoGetHandlersFor(System.Reflection.MethodBase)">
            <summary>
            Derived classes implement this method to supply the list of handlers for
            this specific member.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <returns>Enumerable collection of handlers for this method.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.OnPolicyChanged(System.Object,System.EventArgs)">
            <summary>
            This method fires the <see cref="E:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.PolicyChanged"/> event. Derived classes
            may override this method to perform actions when the policy has changed.
            </summary>
            <remarks>Derived classes must call this base class method in their override or
            the event will no longer fire.</remarks>
            <param name="sender">Source of the event</param>
            <param name="e"><see cref="T:System.EventArgs"/>. Always empty.</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.PolicyChanged">
            <summary>
            This event fires when the contents of the policy has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy.Name">
            <summary>
            Gets the name of this policy.
            </summary>
            <value>The name of the policy.</value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.AttributeDrivenPolicy.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.AttributeDrivenPolicy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.AttributeDrivenPolicy.DoesApplyTo(System.Type)">
            <summary>
            Derived classes implement this method to calculate if the policy
            provides any handlers for any methods on the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>true if the policy applies to this type, false if it does not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.AttributeDrivenPolicy.DoesMatch(System.Reflection.MethodBase)">
            <summary>
            Derived classes implement this method to calculate if the policy
            will provide any handler to the specified member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if policy applies to this member, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.AttributeDrivenPolicy.DoGetHandlersFor(System.Reflection.MethodBase)">
            <summary>
            Derived classes implement this method to supply the list of handlers for
            this specific member.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <returns>Enumerable collection of handlers for this method.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that stores information about a single
            matchable item. Specifically, the string to match, and whether it is case
            sensitive or not.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.#ctor">
            <summary>
            Constructs an empty <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> with the given matching string.
            </summary>
            <param name="match">String to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> with the given matching string and case-sensitivity flag.
            </summary>
            <param name="match">String to match.</param>
            <param name="ignoreCase">true to do case insensitive comparison, false to do case sensitive.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.Match">
            <summary>
            Gets or sets the string to match against.
            </summary>
            <value>The "match" attribute value out of the config file.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.IgnoreCase">
            <summary>
            Gets or sets the case sensitivity flag.
            </summary>
            <value>The "ignoreCase" attribute value out of the config file.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> storing <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> elements,
            or elements derived from <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/>.
            </summary>
            <typeparam name="T">Type of element contained in the collection. Must be <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> or derived from <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.CreateNewElement">
            <summary>
            Creates a new empty item to store into the collection.
            </summary>
            <returns>The created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key value from the stored element.
            </summary>
            <param name="element">Element to retrieve key from.</param>
            <returns>The value of the "match" property.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Add(`0)">
            <summary>
            Adds the given element to the collection.
            </summary>
            <param name="match">Element to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the given index.
            </summary>
            <param name="index">Index to remove from.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Remove(System.String)">
            <summary>
            Removes the match from the element with the given name.
            </summary>
            <param name="match">Match string to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> to do a foreach over
            the contents of the collection.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index.
            </summary>
            <param name="index">Index to get/set item from.</param>
            <returns>Item at index.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData">
            <summary>
            A configuration element storing config information for an instance of
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData">
            <summary>
            A configuration element base class that stores config information about a matching rule.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData.#ctor(System.String,System.Type)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Name of the rule in config.</param>
            <param name="matchingRuleType">The underlying type of matching rule this object configures.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> to match against.
            If any of them match, the rule matches.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.Matches">
            <summary>
            The collection of parameter types to match against.
            </summary>
            <value>The "matches" subelement.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData">
            <summary>
            An extended <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> class that also includes the
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> of the parameter to match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
            <param name="match">Parameter type to match. Kind is InputOrOutput.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
            <param name="match">Parameter type to match.</param>
            <param name="kind"><see cref="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
            <param name="match">Parameter type to match.</param>
            <param name="kind"><see cref="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> to match.</param>
            <param name="ignoreCase">If false, type name comparisons are case sensitive. If true, 
            comparisons are case insensitive.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind">
            <summary>
            What kind of parameter is this? See <see cref="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> for available values.
            </summary>
            <value>The "parameterKind" config attribute.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleAssembler">
            <summary>
            Helper class used by ObjectBuilder to construct a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule"/>
            instance from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of IMatchingRule type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerAttribute">
            <summary>
            Base class for handler attributes used in the attribute-driven
            interception policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerAttribute.CreateHandler">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <returns>A new call handler object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AttributeDrivenPolicyMatchingRule">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> that checks to see if the
            member (or type containing that member) have any <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerAttribute"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule">
            <summary>
            This interface is implemented by the matching rule classes.
            A Matching rule is used to see if a particular policy should
            be applied to a class member.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <param name="member">Member to test.</param>
            <returns>true if the rule applies, false if it doesn't.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AttributeDrivenPolicyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks to see if <paramref name="member"/> matches the rule.
            </summary>
            <remarks>Returns true if any <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerAttribute"/>s are present on the method
            or the type containing that method.</remarks>
            <param name="member">Member to check.</param>
            <returns>true if member matches, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo">
            <summary>
            Class used for storing information about a single name/ignoreCase
            pair. This class is also used as a base class for other classes that
            need this pair plus some other properties.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo.#ctor">
            <summary>
            Constructs an empty <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo"/> object with empty
            string and ignoreCase = false.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo"/> object that matches the given
            string. IgnoreCase is false.
            </summary>
            <param name="nameToMatch">The name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo"/> object that matches the
            given string, setting the ignoreCase flag to the given value.
            </summary>
            <param name="nameToMatch">The name to match.</param>
            <param name="ignoreCase">true to do case insensitive comparison, false to do case sensitive.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo.Match">
            <summary>
            Gets or sets the name to match.
            </summary>
            <value>The name to match.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo.IgnoreCase">
            <summary>
            Gets or sets whether to do case sensitive comparisons of Match.
            </summary>
            <value>If false, case sensitive comparison. If true, case insensitive comparisons.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> that matches methods that have any parameters
            of the given types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule"/> that matches if any of
            the method parameters match ones in the given collection.
            </summary>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo"/> that
            describes the types to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check the given member to see if it has any matching parameters.
            </summary>
            <param name="member">Member to match.</param>
            <returns>true if member matches, false if it doesn't.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule.ParameterMatches">
            <summary>
            The list of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo"/> describing the parameter types to match.
            </summary>
            <value>The collection of matches.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind">
            <summary>
            Describes the type of parameter to match.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind.Input">
            <summary>
            Input parameter
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind.Output">
            <summary>
            Output parameter
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind.InputOrOutput">
            <summary>
            Input or output parameter
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind.ReturnValue">
            <summary>
            Method return value
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo">
            <summary>
            A class that stores information about a single type to match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo.#ctor">
            <summary>
            Creates a new uninitialized <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo.#ctor(Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo"/> matching the given kind of parameter.
            </summary>
            <param name="kind"><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo"/> matching the given parameter
            type and kind.
            </summary>
            <param name="nameToMatch">Parameter <see cref="T:System.Type"/> name to match.</param>
            <param name="kind"><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo.#ctor(System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo"/> matching the given parameter
            type and kind.
            </summary>
            <param name="nameToMatch">Parameter <see cref="T:System.Type"/> name to match.</param>
            <param name="ignoreCase">If false, compare type names using case-sensitive comparison.
            If true, compare type names using case-insensitive comparison.</param>
            <param name="kind"><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingInfo.Kind">
            <summary>
            What kind of parameter to match.
            </summary>
            <value><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterKind"/> indicating which kind of parameters to match.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1">
            <summary>
            An extended version of the generic Collection&lt;T&gt; class
            that adds some of the functional style methods from List, along with
            supporting an event that fires when the collection changes.
            </summary>
            <typeparam name="T">Type stored in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.#ctor">
            <summary>
            Creates a new empty <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1"/> instance which contains
            the items provided.
            </summary>
            <param name="list">List of items to seed the collection.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts a new item into the collection.
            </summary>
            <param name="index">0-based index for the insertion point. If
            index is equal to Count, then insert at the end of the collection.
            </param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item at the given index.
            </summary>
            <param name="index">0-based index of item to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item in the collection at the given index with a new
            item.
            </summary>
            <param name="index">0-based index of item to replace.</param>
            <param name="item">New item to store in the collection.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.OnCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            This method is called when the contents of the collection changes.
            </summary>
            <remarks>If you override this method, be sure to call the base class
            version or the CollectionChanged event will not fire.</remarks>
            <param name="sender">set to this.</param>
            <param name="e">Extra information about the change.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a collection of items to the list at the end.
            </summary>
            <param name="items">Items to add to the end of the list.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the CollectionEx contains elements that match the conditions
             defined by the specified predicate. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions
             of the elements to search for.
            </param>
            <returns>true if the CollectionEx contains one or more elements that match the
             conditions defined by the specified predicate; otherwise, false. </returns>
            <remarks>The Predicate is a delegate to a method that returns true if the object
             passed to it matches the conditions defined in the delegate. The elements of the
             current CollectionEx are individually passed to the Predicate delegate, and
             processing is stopped when a match is found. 
             This method performs a linear search; therefore, this method is an O(n) operation, 
             where n is Count.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the first occurrence within the
            entire CollectionEx.
            </summary>
            <param name="match">The Predicate delegate that defines the
            conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by
            the specified predicate, if found; otherwise, the default value
            for type T. </returns>
            <remarks>
            <para>
            The Predicate is a delegate to a method that returns true if the
            object passed to it matches the conditions defined in the delegate.
            The elements of the current List are individually passed to the
            Predicate delegate, moving forward in the List, starting with the
            first element and ending with the last element. Processing is
            stopped when a match is found.
            </para>
            <para>
            Important: When searching a list containing value types, make sure
            the default value for the type does not satisfy the search predicate.
            Otherwise, there is no way to distinguish between a default value
            indicating that no match was found and a list element that happens
            to have the default value for the type. If the default value
            satisfies the search predicate, use the FindIndex method instead.
            </para>
            <para>
            This method performs a linear search; therefore, this method is an
            O(n) operation, where n is Count.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the first 
            occurrence within the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1"/>. 
            </summary>
            <remarks>
            <para>
            The collection is searched forward starting at the first element and
            ending at the last element.
            </para>
            <para>
            The <see cref="T:System.Predicate`1"/> is a delegate to a method that returns
            true if the object passed to it matches the conditions defined in 
            the delegate. The elements of the current collection are individually
            passed to the Predicate delegate.
            </para>
            <para>
             This method performs a linear search; therefore, this method is 
             an O(n) operation, where n is Count.
            </para>
            </remarks>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines 
            the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the first 
            occurrence within the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1"/>. 
            </summary>
            <remarks>
            <para>
            The collection is searched forward starting at the first element and
            ending at the last element.
            </para>
            <para>
            The <see cref="T:System.Predicate`1"/> is a delegate to a method that returns
            true if the object passed to it matches the conditions defined in 
            the delegate. The elements of the current collection are individually
            passed to the Predicate delegate.
            </para>
            <para>
             This method performs a linear search; therefore, this method is 
             an O(n) operation, where n is Count.
            </para>
            </remarks>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines 
            the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the first 
            occurrence within the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1"/>. 
            </summary>
            <remarks>
            <para>
            The collection is searched forward starting at the first element and
            ending at the last element.
            </para>
            <para>
            The <see cref="T:System.Predicate`1"/> is a delegate to a method that returns
            true if the object passed to it matches the conditions defined in 
            the delegate. The elements of the current collection are individually
            passed to the Predicate delegate.
            </para>
            <para>
             This method performs a linear search; therefore, this method is 
             an O(n) operation, where n is Count.
            </para>
            </remarks>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines 
            the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the CollectionEx.
            </summary>
            <param name="action">The Action delegate to perform on each
            element of the List.
            </param>
            <remarks>
            The Action is a delegate to a method that performs an action on
            the object passed to it. The elements of the current List are
            individually passed to the Action delegate.
            This method is an O(n) operation, where n is Count.
            </remarks>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.CollectionEx`1.CollectionChanged">
            <summary>
            Event that fires when the contents of the collection changes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData">
            <summary>
            Configuration element for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData.#ctor">
            <summary>
            Constructs an <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData"/> with default settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs an <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData"/> instance with the given
            rule name and assembly name pattern to match.
            </summary>
            <param name="matchingRuleName">Name of rule from the config file.</param>
            <param name="assemblyName">Assembly name to match.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData.Match">
            <summary>
            The assembly name to match.
            </summary>
            <value>Assembly name to match.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleAssembler">
            <summary>
            Assembler class used to create the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule"/> from configuration data.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Create the matching rule from the configuration data.
            </summary>
            <param name="context">Build context.</param>
            <param name="objectConfiguration">Configuration element object from config file.</param>
            <param name="configurationSource">Source of the configuration information.</param>
            <param name="reflectionCache">Unused.</param>
            <returns>Constructed <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData">
            <summary>
            Configuration element for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule"/> configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule.</param>
            <param name="attributeType">Attribute to find on the target.</param>
            <param name="searchInheritanceChain">Should we search the inheritance chain to find the attribute?</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule.</param>
            <param name="attributeTypeName">Name of the attribute type to match on the target.</param>
            <param name="searchInheritanceChain">Should we search the inheritance chain to find the attribute?</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.SearchInheritanceChain">
            <summary>
            Should we search the inheritance chain to find the attribute?
            </summary>
            <value>The "searchInheritanceChain" config attribute.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.AttributeTypeName">
            <summary>
            Name of attribute type to match.
            </summary>
            <value>The "attributeType" config attribute.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.AttributeType">
            <summary>
            The underlying type object for the attribute we want to search for.
            </summary>
            <value>This wraps the AttributeTypeName property in a type converter.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleAssembler">
            <summary>
            A class used by ObjectBuilder to construct a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule"/>
            instance from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of <typeparamref name="TObject"/> type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the <typeparamref name="TObject"/> subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData">
            <summary>
            A configuration element that supports the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in config file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in config file.</param>
            <param name="match">Member name pattern to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in config file.</param>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> containing the patterns
            to match. If any pattern matches, the rule matches.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.Matches">
            <summary>
            The collection of patterns to match.
            </summary>
            <value>The "matches" child element in config.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleAssembler">
            <summary>
            A class used by ObjectBuilder to construct <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule"/>
            instances from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of the IMatching type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData">
            <summary>
            Configuration element that stores the configuration information for an instance
            of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData">
            <summary>
            Base class for matching rule config data for those rules that take
            a single match instance consisting of a string to match and an
            ignore case flag.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.#ctor(System.String,System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Name of the matching rule</param>
            <param name="matches">String to match.</param>
            <param name="matchingRuleType">Type of the underlying matching rule.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.Match">
            <summary>
            The string to match.
            </summary>
            <value>The "match" configuration attribute.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.IgnoreCase">
            <summary>
            Should comparisons be case sensitive?
            </summary>
            <value>The "ignoreCase" configuration attribute. If false, comparison is
            case sensitive. If true, comparison is case insensitive.</value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Name of matching rule in config.</param>
            <param name="memberName">Method name pattern to match.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData.Parameters">
            <summary>
            The collection of parameters that make up the matching method signature.
            </summary>
            <value>The "parameters" child element.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleAssembler">
            <summary>
            Class used by ObjectBuilder to construct a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule"/> instance
            from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of IMatchingRule type that the receiver knows how to build, based on 
            an a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection">
            <summary>
            A configuration element that stores a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.CreateNewElement">
            <summary>
            Creates a new element to store in the collection.
            </summary>
            <returns>The new element.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key from the element.
            </summary>
            <param name="element">Element to retrieve key from.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> to the collection.
            </summary>
            <param name="parameterTypeElement">The element to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.Get(System.Int32)">
            <summary>
            Gets the element at the given index.
            </summary>
            <param name="index">Index of desired element.</param>
            <returns>The element at that index.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="index">Index of element to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement">
            <summary>
            A configuration element representing a single parameter in a method signature.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> instance.
            </summary>
            <param name="name">unique identifier for this parameter. The name does
            NOT need to match the target's parameter name.</param>
            <param name="parameterType">Expected type of parameter</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.Name">
            <summary>
            A unique ID for this parameter. This name does not need to match
            the corresponding parameter in the target types; only the type is
            used.
            </summary>
            <value>A name for this property that is unique in this rule's configuration.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.ParameterTypeName">
            <summary>
            The parameter type required.
            </summary>
            <value>The "typeName" config attribute.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData">
            <summary>
            Configuration element that stores the config information for an instance
            of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in config file.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in config file.</param>
            <param name="namespaceName">Namespace pattern to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in config file.</param>
            <param name="matches">Collection of namespace patterns to match. If any
            of the patterns match then the rule matches.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.Matches">
            <summary>
            The collection of match data containing patterns to match.
            </summary>
            <value>The "matches" child element.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleAssembler">
            <summary>
            Class used by ObjectBuilder to create instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule"/>
            from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of IMatchingRule type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData">
            <summary>
            A configuration element class that stores config information for instances
            of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> containing
            property patterns to match.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.Matches">
            <summary>
            The collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> containing property names to match.
            </summary>
            <value>The "matches" config subelement.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData">
            <summary>
            A derived <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> which adds storage for which methods
            on the property to match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
            <param name="match">Property name pattern to match. The rule will match both getter and setter methods of a property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
            <param name="match">Property name pattern to match.</param>
            <param name="option">Which of the property methods to match. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption"/>
            for the valid options.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
            <param name="match">Property name pattern to match.</param>
            <param name="option">Which of the property methods to match. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption"/>
            for the valid options.</param>
            <param name="ignoreCase">If false, type name comparisons are case sensitive. If true, 
            comparisons are case insensitive.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.MatchOption">
            <summary>
            Which methods of the property to match. Default is to match both getters and setters.
            </summary>
            <value>The "matchOption" config attribute.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleAssembler">
            <summary>
            A class used by ObjectBuilder to construct instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule"/>
            from instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of IMatchingRule type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData">
            <summary>
            A configuration element that stores config information about an
            instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="returnTypeName">Return type to match.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleAssembler">
            <summary>
            A class used by ObjectBuilder to construct instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule"/>
            from instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of IMatchingRule type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData">
            <summary>
            A configuration element that stores configuration information for
            an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="tagToMatch">Tag string to match.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleAssembler">
            <summary>
            A class used by ObjectBuilder to construct instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule"/>
            from instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of IMatchingRule type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use for retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData">
            <summary>
            Configuration element that stores configuration information for
            an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="typeName">Type name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> containing
            types to match. If any one matches, the rule matches.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.Matches">
            <summary>
            The collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> giving the types to match.
            </summary>
            <value>The "matches" configuration subelement.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleAssembler">
            <summary>
            A class used by ObjectBuilder to construct instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/>
            from instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Builds an instance of the subtype of IMatchingRule type the receiver knows how to build, based on 
            a configuration object.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="objectConfiguration">The configuration object that describes the object to build.</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A fully initialized instance of the IMatchingRule subtype.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ApplyNoPoliciesMatchingRule">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> implementation that fails to match
            if the method in question has the ApplyNoPolicies attribute on it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ApplyNoPoliciesMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check if the <paramref name="member"/> matches this rule.
            </summary>
            <remarks>This rule returns true if the member does NOT have the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ApplyNoPoliciesAttribute"/>
            on it, or a containing type doesn't have the attribute.</remarks>
            <param name="member">Member to check.</param>
            <returns>True if the rule matches, false if it doesn't.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> that matches the assembly name of the
            given member.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule"/> with the given
            assembly name (or partial name).
            </summary>
            <param name="assemblyName">Assembly name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule"/> that matches
            against the given assembly.
            </summary>
            <param name="assembly">Assembly to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Determines if the supplied <paramref name="member"/> matches the rule.
            </summary>
            <remarks>
            This rule matches if the assembly containing the given <paramref name="member"/>
            matches the name given. The rule used for matches lets you include the parts
            of the assembly name in order. You can specify assembly name only, assembly and version,
            assembly, version and culture, or the fully qualified assembly name.
            </remarks>
            <param name="member">Member to check.</param>
            <returns>true if <paramref name="member"/> is in a matching assembly, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> that checks to see if
            the member tested has an arbitrary attribute applied.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule"/>.
            </summary>
            <param name="attributeType">Attribute to match.</param>
            <param name="inherited">If true, checks the base class for attributes as well.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks to see if the given <paramref name="member"/> matches the rule.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if it matches, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob">
            <summary>
            A &quot;glob&quot; is a string matching pattern. It is similar to the
            matches available in the file system (*.cs, for example). The Glob
            class implements this string matching.
            </summary>
            <remarks>Glob supports the following metacharacters:
                * - match zero or more characters
                ? - match any one character
            [abc] - match one character if it's in the characters inside the brackets.
            All other characters in the glob are literals.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob"/> instance that matches the given pattern.
            </summary>
            <remarks>
            The pattern match is case sensitive by default.
            </remarks>
            <param name="pattern">Pattern to use. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob"/> summary for
            details of the pattern.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob"/> instance that matches the given pattern.
            </summary>
            <param name="pattern">The pattern to use. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob"/> summary for
            details of the patterns supported.</param>
            <param name="caseSensitive">If true, perform a case sensitive match. 
            If false, perform a case insensitive comparison.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.Glob.IsMatch(System.String)">
            <summary>
            Checks to see if the given string matches the pattern.
            </summary>
            <param name="s">String to check.</param>
            <returns>True if it matches, false if it doesn't.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule">
            <summary>
            Match methods with the given names and method signature.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule"/> that matches methods
            with the given name, with parameter types matching the given list.
            </summary>
            <param name="methodName">Method name to match. Wildcards are allowed.</param>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule"/> that matches methods
            with the given name, with parameter types matching the given list.
            </summary>
            <remarks>Name comparisons are case sensitive.</remarks>
            <param name="methodName">Method name to match. Wildcards are allowed.</param>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule"/> that matches any method
            with parameter types matching the given list.
            </summary>
            <remarks>Name comparisons are case sensitive.</remarks>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule"/> that matches any method
            with parameter types matching the given list.
            </summary>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given method matches the name and signature.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if match, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> that matches members in a given namespace. You can
            specify either a single namespace (e.g. <c>System.Data</c>) or a namespace root
            (e.g. <c>System.Data.*</c> to match types in that namespace or below.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule"/> that matches the given
            namespace.
            </summary>
            <param name="namespaceName">namespace name to match. Comparison is case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule"/> that matches the given
            namespace.
            </summary>
            <param name="namespaceName">namespace name to match.</param>
            <param name="ignoreCase">If false, comparison is case sensitive. If true, comparison is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule"/> that matches any of
            the given namespace names.
            </summary>
            <param name="matches">Collection of namespace names to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given <paramref name="member"/> is in a namespace
            matched by any of our given namespace names.
            </summary>
            <param name="member">member to check.</param>
            <returns>True if member is contained in a matching namespace, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.NamespaceMatchingInfo">
            <summary>
            A helper class that encapsulates the name to match, case sensitivity flag,
            and the wildcard rules for matching namespaces.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.NamespaceMatchingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.NamespaceMatchingInfo"/> that matches the
            given namespace name.
            </summary>
            <param name="match">Namespace name to match.</param>
            <param name="ignoreCase">If false, comparison is case sensitive. If true, comparison is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.NamespaceMatchingInfo.Matches(System.Type)">
            <summary>
            Check if the given type <paramref name="t"/> is in a matching namespace.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if type is in a matching namespace, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> implementation that matches properties
            by name. You can match the getter, setter, or both.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule"/> that matches the
            getter or setter of the given property.
            </summary>
            <param name="propertyName">Name of the property. Name comparison is case sensitive. Wildcards are allowed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule"/> that matches the
            given method of the given property.
            </summary>
            <param name="propertyName">Name of the property. Name comparison is case sensitive. Wildcards are allowed.</param>
            <param name="option">Match the getter, setter, or both.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule"/> that matches the
            given method of the given property.
            </summary>
            <param name="propertyName">Name of the property to match. Wildcards are allowed.</param>
            <param name="option">Match the getter, setter, or both.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, name comparison is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule"/> that matches any of the
            given properties.
            </summary>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo"/> defining which
            properties to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks if the given member matches the rule.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if it matches, false if it does not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption">
            <summary>
            Specifies which methods of a property should be matches by
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption.Get">
            <summary>
            Match the property getter method.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption.Set">
            <summary>
            Match the property setter method.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption.GetOrSet">
            <summary>
            Match either the getter or setter method.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo">
            <summary>
            Information about a property match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo"/> that matches the get or set methods
            of the given property name, and does a case-sensitive comparison.
            </summary>
            <param name="match">Property name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo"/> that matches the given methods of
            the given property name, doing a case-sensitive comparison.
            </summary>
            <param name="match">Property name to match.</param>
            <param name="option"><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption"/> specifying which methods of the property to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption,System.Boolean)">
            <summary>
            Construt a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo"/> that matches the given methods of
            the given property name.
            </summary>
            <param name="match">Property name to match.</param>
            <param name="option"><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption"/> specifying which methods of the property to match.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, name comparison is case insensitive.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingInfo.Option">
            <summary>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingOption"/> to use when doing name comparisons on this property.
            </summary>
            <value>Specifies which methods of the property to match.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> that checks to see if a member has a specified
            type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule"/> that matches
            members with the given return type.
            </summary>
            <param name="returnType">Type to look for.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule"/> that matches
            the given return type by name.
            </summary>
            <remarks>See the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/> class for details on how
            type name matches are done.</remarks>
            <param name="returnTypeName">Type name to match. Name comparisons are case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule"/> that matches
            the given return type by name.
            </summary>
            <remarks>See the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/> class for details on how
            type name matches are done.</remarks>
            <param name="returnTypeName">Type name to match.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, comparison
            is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given member has a matching return type.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if return types match, false if they don't.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation">
            <summary>
            This interface is used to represent the call to a method.
            An implementation of IMethodInvocation is passed to the
            call handlers so that they may manipulate the call
            (typically by changing the parameters) before the final target
            gets called.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation.Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodReturn">
            <summary>
            This interface is used to represent the return value from a method.
            An implementation of IMethodReturn is returned by call handlers, and
            each handler can manipulate the parameters, return value, or add an
            exception on the way out.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodReturn.ReturnValue">
            <summary>
            Returns value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection">
            <summary>
            A static facade class that provides the main entry point into the
            Policy Injection Application Block. Methods on this class
            create intercepted objects, or wrap existing instances with
            interceptors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create``1(System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified in
            the default policy configuration.
            </summary>
            <typeparam name="TObject">Type of object to create.</typeparam>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified in
            the policy configuration supplied in <paramref name="configurationSource"/>.
            </summary>
            <typeparam name="TObject">Type of object to create.</typeparam>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing the policy configuration.</param>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create``2(System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified in
            the default policy configuration.
            </summary>
            <typeparam name="TObject">Concrete object type to create.</typeparam>
            <typeparam name="TInterface">Type of reference to return. Must be an interface the object implements.</typeparam>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create``2(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified in
            the policy configuration supplied in <paramref name="configurationSource"/>.
            </summary>
            <typeparam name="TObject">Concrete object type to create.</typeparam>
            <typeparam name="TInterface">Type of reference to return. Must be an interface the object implements.</typeparam>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing the policy configuration.</param>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Wrap``1(System.Object)">
            <summary>
            Creates a proxy for the given object that adds interception policies as
            defined in the default configuration source.
            </summary>
            <remarks>
            Despite the name of the <typeparamref name="TInterface"/> parameter, this
            may be any type that the instance is assignable to, including both interfaces
            that it implements and the concrete type of the object.
            </remarks>
            <typeparam name="TInterface">Type of the proxy to return.</typeparam>
            <param name="instance">Instance object to wrap.</param>
            <returns>The proxy for the instance, or the raw object if no policies apply.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Wrap``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Object)">
            <summary>
            Creates a proxy for the given object that adds interception policies as
            defined in <paramref name="configurationSource"/>.
            </summary>
            <remarks>
            Despite the name of the <typeparamref name="TInterface"/> parameter, this
            may be any type that the instance is assignable to, including both interfaces
            that it implements and the concrete type of the object.
            </remarks>
            <typeparam name="TInterface">Type of the proxy to return.</typeparam>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing the policy configuration.</param>
            <param name="instance">Instance object to wrap.</param>
            <returns>The proxy for the instance, or the raw object if no policies apply.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector">
            <summary>
            This class holds onto a <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> and can
            inject that policy into either a newly created object or
            an existing object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector"/> with an 
            empty <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.#ctor(Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector"/> with the
            given <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.
            </summary>
            <param name="policies"><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> to use when 
            creating object or wrapping existing ones.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Wrap(System.Object,System.Type)">
            <summary>
            Takes an existing object and returns a new reference that includes
            the policies specified in the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.
            </summary>
            <param name="instance">The object to wrap.</param>
            <param name="typeToReturn">Type to return. This can be either an
            interface implemented by the object, or its concrete class.</param>
            <returns>A new reference to the object that includes the policies.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create(System.Type,System.Type,System.Object[])">
            <summary>
            Creates a new instance of typeToCreate and then applies policy.
            </summary>
            <param name="typeToCreate">The concrete type of the object to be created.</param>
            <param name="typeToReturn">The type of the reference to return. This can either
            be a concrete type, or the type of an interface that typeToCreate implements. If
            an interface type is specified, policy interception will only occur on calls
            to that interface.</param>
            <param name="args">Arguments to pass to the constructor.</param>
            <returns>The wrapped object instance of type typeToReturn.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create(System.Type,System.Object[])">
            <summary>
            Creates a new instance of typeToCreate and then applies policy.
            </summary>
            <param name="typeToCreate">The type of object to be created.</param>
            <param name="args">Arguments to be passed to the constructor.</param>
            <returns>The wrapped object instance of type typeToCreate.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Wrap``1(System.Object)">
            <summary>
            Takes an existing object and returns a new reference that includes
            the policies specified in the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.
            </summary>
            <typeparam name="TInterface">The type of wrapper to return. Can be either
            an interface implemented by the target instance or its entire concrete type.</typeparam>
            <param name="instance">The object to wrap.</param>
            <returns>A new reference to the object that includes the policies.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create``2(System.Object[])">
            <summary>
            Creates new instance of type TObject and applies policy to it.
            </summary>
            <typeparam name="TObject">Type of object to create.</typeparam>
            <typeparam name="TInterface">Type of reference to return. If an interface type is
            specified here, policy is only applied to the methods of that interface.</typeparam>
            <param name="args">Constructor arguments.</param>
            <returns>A reference to the created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create``1(System.Object[])">
            <summary>
            Creates new instance of type TObject and applies policy to it.
            </summary>
            <typeparam name="TObject">Type of object to create.</typeparam>
            <param name="args">Constructor arguments.</param>
            <returns>A reference to the created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.TypeRequiresInterception(System.Type)">
            <summary>
            Checks to see if the given type has any policies that apply to it.
            </summary>
            <param name="t">Type to check.</param>
            <returns>true if the current set of policies will require interception to be added,
            false if no policies apply to type t</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.PolicyRequiresInterception(Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet)">
            <summary>
            Checks to see if the given policy set requires interception on targets that it is applied to.
            </summary>
            <param name="policies">Policy set to check.</param>
            <returns>True if policy set contains anything, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.TypeSupportsInterception(System.Type)">
            <summary>
            Checks to see if the given type can be intercepted.
            </summary>
            <remarks>In this implementation, only interfaces and types derived from MarshalByRefObject
            can have policies applied.</remarks>
            <param name="t">Type to check.</param>
            <returns>True if this type can be intercepted, false if it cannot.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.EnsureTypeIsInterceptable(System.Type,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet)">
            <summary>
            Checks to see if the given type requires interception and if so if it
            is actually interceptable or not. If not, throws <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="typeToReturn">Type to check.</param>
            <param name="policiesForThisType">Policy set specific to typeToReturn.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.DoWrap(System.Object,System.Type,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet)">
            <summary>
            Wraps the given instance in a proxy with interception hooked up if it
            is required by policy. If not required, returns the unwrapped instance.
            </summary>
            <param name="instance">object to wrap.</param>
            <param name="typeToReturn">Type of the reference to return.</param>
            <param name="policiesForThisType">Policy set specific to typeToReturn.</param>
            <returns>The object with policy added.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Policies">
            <summary>
            Gets or sets the policy set used when creating the proxies for objects.
            </summary>
            <value><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> defining rules and handler to apply.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection">
            <summary>
            This interface represents a list of either input or output
            parameters. It implements a fixed size list, plus a couple
            of other utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection.ParameterName(System.Int32)">
            <summary>
            Gets the name of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the name for.</param>
            <returns>Name of the requested parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            Gets the ParameterInfo for a particular parameter by index.
            </summary>
            <param name="index">Index for this parameter.</param>
            <returns>ParameterInfo object describing the parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection.GetParameterInfo(System.String)">
            <summary>
            Gets the ParameterInfo for a particular parameter by name.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <returns>ParameterInfo object for the named parameter.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="paramName">parameter name.</param>
            <returns>value of the named parameter.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.TagAttribute">
            <summary>
            A simple attribute used to "tag" classes, methods, or properties with a
            string that can later be matched via the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.TagAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.TagAttribute"/> with the given string.
            </summary>
            <param name="tag">The tag string.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.TagAttribute.Tag">
            <summary>
            The string tag for this attribute.
            </summary>
            <value>the tag.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> that checks a member for the presence
            of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.TagAttribute"/> on the method, property, or class, and
            that the given string matches.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule"/>, looking for
            the given string. The comparison is case sensitive.
            </summary>
            <param name="tagToMatch">tag string to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule"/>, looking for
            the given string. The comparison is case sensitive if <paramref name="ignoreCase"/> is
            false, case insensitive if <paramref name="ignoreCase"/> is true.
            </summary>
            <param name="tagToMatch">tag string to match.</param>
            <param name="ignoreCase">if false, case-senstive comparison. If true, case-insensitive comparison.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check the given member for the presence of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.TagAttribute"/> and
            match the strings.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if tag strings match, false if they don't.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule">
            <summary>
            A matching rule that matches when the given member name is
            the same as the one supplied in the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule"/> that matches the
            given member name. Wildcards are allowed.
            </summary>
            <param name="nameToMatch">Name to match against. Comparison is case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule"/> that matches the
            given member name. Wildcards are allowed.
            </summary>
            <param name="nameToMatch">Name to match against.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule"/> that matches the
            given member names. Wildcards are allowed.
            </summary>
            <param name="namesToMatch">collections of names to match. If any of these patterns match, the rule matches. Comparisons are case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule"/> that matches the
            given member names. Wildcards are allowed.
            </summary>
            <param name="namesToMatch">Collections of names to match. If any of these patterns match, the rule matches. </param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule"/> that matches
            one of the given member names. Wildcards are allowed.
            </summary>
            <param name="matches">List of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo"/> objects containing
            the pattern to match and case sensitivity flag.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check if the given <paramref name="member"/> matches one of this
            object's matching patterns.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if matches, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.IPolicyInjectionPolicy">
            <summary>
            ObjectBuilder policy used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionStrategy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.IPolicyInjectionPolicy.SetPolicyConfigurationSource(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Stores the configuration source used to retrieve the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>
            from configuration.
            </summary>
            <param name="configSource">Configuration source to read policies from.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.IPolicyInjectionPolicy.ApplyProxy(System.Object,System.Type)">
            <summary>
            Creates interception for the given instance.
            </summary>
            <param name="instanceToProxy">Target object to create interception for.</param>
            <param name="typeToProxy">Interface or class type to return.</param>
            <returns>The proxy to the target, or the raw instance if no proxying is required.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.IPolicyInjectionPolicy.ApplyPolicies">
            <summary>
            Should policies be applied at all?
            </summary>
            <remarks>true if yes, false if no.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionPolicy">
            <summary>
            An implementation of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.IPolicyInjectionPolicy"/> interface that
            uses the remoting interception mechanism.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionPolicy.#ctor(System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionPolicy"/> with the
            given flag to determine if policies should be applied.
            </summary>
            <param name="applyPolicies">if true, policies should be applied. If false, they should not be.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionPolicy.SetPolicyConfigurationSource(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Stores the configuration source that should be used to derive the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> for interception.
            </summary>
            <param name="configSource">The configuration source.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionPolicy.ApplyProxy(System.Object,System.Type)">
            <summary>
            Applies interception to the given object.
            </summary>
            <param name="instanceToProxy">The object to intercept.</param>
            <param name="typeToProxy">The interceptable interface or type or return.</param>
            <returns>The proxy to the object.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionPolicy.ApplyPolicies">
            <summary>
            Gets a flag indicating if the strategy should apply policies or not.
            </summary>
            <value>the flag.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionStrategy">
            <summary>
            An ObjectBuilder strategy class that runs objects through PIAB as part of construction.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ObjectBuilder.PolicyInjectionStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Creates an object, running it through PIAB if the policy set applies.
            </summary>
            <param name="context">ObjectBuilder context.</param>
            <param name="typeToBuild">Type to create.</param>
            <param name="existing">An existing object (to wrap if necessary).</param>
            <param name="idToBuild">ObjectBuilder ID to create.</param>
            <returns>The created object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy">
            <summary>
            A policy is a combination of a matching rule set and a set of handlers.
            If the policy applies to a member, then the handlers will be enabled for
            that member.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy"/> object with the given name.
            </summary>
            <param name="name">Name of the policy.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy.DoesApplyTo(System.Type)">
            <summary>
            Checks to see if this policy contains rules that match members
            of the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>true if any of the members of type match the ruleset for this policy, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy.DoesMatch(System.Reflection.MethodBase)">
            <summary>
            Checks if the rules in this policy match the given member info.
            </summary>
            <param name="member">MemberInfo to check against.</param>
            <returns>true if ruleset matches, false if it does not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy.DoGetHandlersFor(System.Reflection.MethodBase)">
            <summary>
            Return ordered collection of handlers in order that apply to the given member.
            </summary>
            <param name="member">Member that may or may not be assigned handlers by this policy.</param>
            <returns>Collection of handlers (possibly empty) that apply to this member.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy.RuleSet">
            <summary>
            Gets the collection of MatchingRules that the policy uses to know when
            to apply handlers.
            </summary>
            <value>The rule set collection.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RuleDrivenPolicy.Handlers">
            <summary>
            Gets the collections of ICallHandlers that this policy applies when it matches.
            </summary>
            <value>The call handler collection.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetCustomFactory">
            <summary>
            A factory class used by ObjectBuilder and the config system to construct
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> objects based on configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetCustomFactory.CreateObject(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            Create the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> based on the configuration settings.
            </summary>
            <param name="context">Builder context.</param>
            <param name="name">Name of object to create.</param>
            <param name="configurationSource">Configuration source.</param>
            <param name="reflectionCache">reflection cache, unused in this method.</param>
            <returns>The constructed <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRuleCustomFactory">
            <summary>
            A factory that creates <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMatchingRule"/> instances based on configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRuleCustomFactory.Instance">
            <summary>
            Singleton instance of this factory.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlerCustomFactory">
            <summary>
            A factory that creates <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ICallHandler"/> instances based on configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlerCustomFactory.Instance">
            <summary>
            Singleton instance of this factory.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetFactory">
            <summary>
            A factory class that can create <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>s from configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetFactory.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetFactory"/> that creates <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>s
            based on the default configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetFactory"/> that creates <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>s
            based on the given configuration source.
            </summary> 
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to get the
            configuration information from.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySetFactory.Create">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> from configuration.
            </summary>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData">
            <summary>
            A configuration element that allows you to configure arbitrary
            call handlers that don't otherwise have configuration support.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CallHandlerData">
            <summary>
            Base class for configuration information stored about a call handler.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CallHandlerData.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CallHandlerData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CallHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of handler entry.</param>
            <param name="handlerType">Type of handler to create.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="type">Type of handler to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="typeName">Name of the handler type to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomCallHandlerData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Gets the given property value.</param>
            <returns>the requested property's value</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomCallHandlerData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Sets the given property.</param>
            <param name="value">New value for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomCallHandlerData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="sourceElement">Source configuration element</param>
            <param name="parentElement">Parent configuration element</param>
            <param name="saveMode">ConfigurationSaveMode</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomCallHandlerData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="parentElement">Parent element</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomCallHandlerData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
            <returns>True if element has been modified, false if not.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
            <value>Collection of attributes.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomCallHandlerData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData">
            <summary>
            A configuration element that lets you configure matching rules
            that don't have any explicit configuration support.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule instance.</param>
            <param name="type">Type of the matching rule to create.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule instance.</param>
            <param name="typeName">Name of type of matching rule to create.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">The property to get.</param>
            <returns>The value of the requested property.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Property to set.</param>
            <param name="value">New value for property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="sourceElement">Source configuration element</param>
            <param name="parentElement">Parent configuration element</param>
            <param name="saveMode">ConfigurationSaveMode</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="parentElement">Parent element</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
            <returns>True if element has been modified, false if not.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
            <value>The attribute collection.</value>        		
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that maps the information about
            a policy from the configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData"/> with the given name.
            </summary>
            <param name="policyName">Name of the policy.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData"/> with no name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.MatchingRules">
            <summary>
            Gets or sets the collection of matching rules from configuration.
            </summary>
            <value>The matching rule data collection.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.Handlers">
            <summary>
            Get or sets the collection of handlers from configuration.
            </summary>
            <value>The handler data collection.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> that stores the policy set in configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.SectionName">
            <summary>
            Section name as it appears in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.Policies">
            <summary>
            Gets or sets the collection of Policies from configuration.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData"/> collection.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerPipeline">
            <summary>
            The HandlerPipeline class encapsulates a list of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ICallHandler"/>s
            and manages calling them in the proper order with the right inputs.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerPipeline.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerPipeline"/> with an empty pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerPipeline.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ICallHandler})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerPipeline"/> with the given collection
            of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ICallHandler"/>s.
            </summary>
            <param name="handlers">Collection of handlers to add to the pipeline.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerPipeline.Invoke(Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.InvokeHandlerDelegate)">
            <summary>
            Execute the pipeline with the given input.
            </summary>
            <param name="input">Input to the method call.</param>
            <param name="target">The ultimate target of the call.</param>
            <returns>Return value from the pipeline.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ICallHandler">
            <summary>
            Handlers implement this interface and are called for each
            invocation of the pipelines that they're included in.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.ICallHandler.Invoke(Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.GetNextHandlerDelegate)">
            <summary>
            Implement this method to execute your handler processing.
            </summary>
            <param name="input">Inputs to the current call to the target.</param>
            <param name="getNext">Delegate to execute to get the next delegate in the handler
            chain.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.InvokeHandlerDelegate">
            <summary>
            This delegate type is the type that points to the next
            method to execute in the current pipeline.
            </summary>
            <param name="input">Inputs to the current method call.</param>
            <param name="getNext">Delegate to get the next handler in the chain.</param>
            <returns>Return from the next method in the chain.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.GetNextHandlerDelegate">
            <summary>
            This delegate type is passed to each handler's Invoke method.
            Call the delegate to get the next delegate to call to continue
            the chain.
            </summary>
            <returns>Next delegate in the handler chain to call.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.InterceptingRealProxy">
            <summary>
            This class provides the remoting-based interception mechanism. It is
            invoked by a call on the corresponding TransparentProxy
            object. The InterceptingRealProxy reads the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> at
            construction time, sets up the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.HandlerPipeline"/>s,
            and routes calls through the handlers at invocation time.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.InterceptingRealProxy.#ctor(System.Object,System.Type,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.InterceptingRealProxy"/> instance that applies
            the given policies to the given target object.
            </summary>
            <param name="target">Target object to intercept calls to.</param>
            <param name="classToProxy">Type to return as the type being proxied.</param>
            <param name="policies"><see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> that determines which
            handlers are installed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.InterceptingRealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Executes a method call represented by the <paramref name="msg"/>
            parameter. The CLR will call this method when a method is called
            on the TransparentProxy. This method runs the invocation through
            the call handler pipeline and finally sends it down to the
            target object, and then back through the pipeline. 
            </summary>
            <param name="msg">An <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> object that contains the information
            about the method call.</param>
            <returns>An <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn"/> object contains the
            information about the target method's return value.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.InterceptingRealProxy.CanCastTo(System.Type,System.Object)">
            <summary>
            Checks whether the proxy that represents the specified object type can be cast to the type represented by the <see cref="T:System.Runtime.Remoting.IRemotingTypeInfo"></see> interface.
            </summary>
            
            <returns>
            true if cast will succeed; otherwise, false.
            </returns>
            
            <param name="fromType">The type to cast to. </param>
            <param name="o">The object for which to check casting. </param>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.InterceptingRealProxy.Target">
            <summary>
            Returns the target of this intercepted call.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.InterceptingRealProxy.TypeName">
            <summary>
            Gets or sets the fully qualified type name of the server object in a <see cref="T:System.Runtime.Remoting.ObjRef"></see>.
            </summary>
            
            <value>
            The fully qualified type name of the server object in a <see cref="T:System.Runtime.Remoting.ObjRef"></see>.
            </value>
            
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" /></PermissionSet>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRuleSet">
            <summary>
            A <cref see="T:MatchingRuleSet"/> is a matching rule that
            is a collection of other matching rules. All the contained
            rules much match for the set to match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRuleSet.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests the given member against the ruleset. The member matches
            if all contained rules in the ruleset match against it.
            </summary>
            <remarks>If the ruleset is empty, then Matches passes since no rules failed.</remarks>
            <param name="member">MemberInfo to test.</param>
            <returns>true if all contained rules match, false if any fail.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet">
            <summary>
            A collection of Policy objects. The policies within a PolicySet combine using
            an "or" operation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> with no contained policies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.#ctor(Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> containing the given policies.
            </summary>
            <remarks>The policy set always contains an <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.AttributeDrivenPolicy"/>
            as the first policy in the set.</remarks>
            <param name="policies">Policies to put into the policy set.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.AppliesTo(System.Type)">
            <summary>
            Checks to see if any policies in this policy set apply to any members of the
            given type.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to check.</param>
            <returns>true if policies will be applied, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.GetPoliciesFor(System.Type)">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> that contains only the policies
            that apply to the given type.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to get policies for.</param>
            <returns>New policy set. May be empty.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.GetPoliciesFor(System.Reflection.MethodBase)">
            <summary>
            Gets the policies that apply to the given member.
            </summary>
            <param name="member">Member to get policies for.</param>
            <returns>Collection of policies that apply to this member.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.GetPoliciesNotFor(System.Reflection.MethodBase)">
            <summary>
            Gets the policies in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/> that do not
            apply to the given member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>Collection of policies that do not apply to <paramref name="member"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.GetHandlersFor(System.Reflection.MethodBase)">
            <summary>
            Gets the handlers that apply to the given member based on all policies in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <returns>Collection of call handlers for <paramref name="member"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.OnCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            Method called when any of the contained policies change.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.ClearItems">
            <summary>
            Called when all items are removed from the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.InsertItem(System.Int32,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy)">
            <summary>
            Called when an item is inserted or added into the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>.
            </summary>
            <param name="index">Index where item was inserted.</param>
            <param name="item">Policy that was inserted.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.RemoveItem(System.Int32)">
            <summary>
            Called when an item is removed from the <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet"/>. This method
            is called just before the item is actually removed from the collection.
            </summary>
            <param name="index">Index of item to be removed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicySet.SetItem(System.Int32,Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Policy)">
            <summary>
            Called when an item is being replaced with another one.
            </summary>
            <param name="index">Index of item that is being replaced.</param>
            <param name="item">New item.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingInputParameterCollection">
            <summary>
            A class that wraps the inputs of a <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> into the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection"/> that wraps the various
            collections provided by remoting.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.#ctor(System.Object[],System.Reflection.ParameterInfo[],System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection"/> that wraps the
            given array of arguments.
            </summary>
            <param name="arguments">Complete collection of arguments.</param>
            <param name="argumentInfo">Type information about about each parameter.</param>
            <param name="isArgumentPartOfCollection">A <see cref="T:System.Predicate`1"/> that indicates
            whether a particular parameter is part of the collection. Used to filter out only input
            parameters, for example.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            Gets the ParameterInfo for a particular parameter by index.
            </summary>
            <param name="index">Index for this parameter.</param>
            <returns>ParameterInfo object describing the parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.GetParameterInfo(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> for the given named parameter.
            </summary>
            <param name="paramName">Name of parameter.</param>
            <returns><see cref="T:System.Reflection.ParameterInfo"/> for the requested parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.ParameterName(System.Int32)">
            <summary>
            Gets the name of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the name for.</param>
            <returns>Name of the requested parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Add(System.Object)">
            <summary>
            Adds to the collection. This is a read only collection, so this method
            always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Nothing, always throws.</returns>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Contains(System.Object)">
            <summary>
            Checks to see if the collection contains the given object.
            </summary>
            <remarks>Tests for the object using object.Equals.</remarks>
            <param name="value">Object to find.</param>
            <returns>true if object is in collection, false if it is not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Clear">
            <summary>
            Remove all items in the collection. This collection is fixed-size, so this
            method always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">This is always thrown.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of the given object, or -1 if not found.
            </summary>
            <param name="value">Object to find.</param>
            <returns>zero-based index of found object, or -1 if not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="value">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Remove(System.Object)">
            <summary>
            Removes the given item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the given item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of this collection to the given array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">index to start copying from.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.GetEnumerator">
            <summary>
            Gets an enumerator object to support the foreach construct.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="paramName">parameter name.</param>
            <value>value of the named parameter.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Item(System.Int32)">
            <summary>
            Gets the name of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the name for.</param>
            <value>Name of the requested parameter.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.IsReadOnly">
            <summary>
            Is this collection read only?
            </summary>
            <value>No, it is not read only, the contents can change.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.IsFixedSize">
            <summary>
            Is this collection fixed size?
            </summary>
            <value>Yes, it is.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.Count">
            <summary>
            Total number of items in the collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.SyncRoot">
            <summary>
            Gets a synchronized version of this collection. WARNING: Not implemented completely,
            DO NOT USE THIS METHOD.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.IsSynchronized">
            <summary>
            Is the object synchronized for thread safety?
            </summary>
            <value>No, it isn't.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.ArgumentInfo">
            <summary>
            An internal struct that maps the index in the arguments collection to the
            corresponding <see cref="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.ArgumentInfo.ParameterInfo"/> about that argument.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.ArgumentInfo.#ctor(System.Int32,System.Reflection.ParameterInfo)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.ArgumentInfo"/> object linking the
            given index and <see cref="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.ArgumentInfo.ParameterInfo"/> object.
            </summary>
            <param name="index">Index into arguments array (zero-based).</param>
            <param name="parameterInfo"><see cref="F:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingParameterCollection.ArgumentInfo.ParameterInfo"/> for the argument at <paramref name="index"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingInputParameterCollection.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object[])">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingInputParameterCollection"/> that wraps the
            given method call and arguments.
            </summary>
            <param name="callMessage">The call message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation"/> that wraps the
            remoting-based <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> in the PIAB call
            interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodInvocation"/> implementation that wraps
            the given <paramref name="callMessage"/>, with the given ultimate
            target object.
            </summary>
            <param name="callMessage">Remoting call message object.</param>
            <param name="target">Ultimate target of the method call.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <remarks>In this implementation we create an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn"/>.</remarks>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
            <value>The input collection.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.Microsoft#Practices#EnterpriseLibrary#PolicyInjection#IMethodInvocation#Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
            <value>The arguments collection.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <value>The invocation context dictionary.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
            <value>The target method base.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodInvocation.Arguments">
            <summary>
            Gets the collection of arguments being passed to the target.
            </summary>
            <remarks>This method exists becuase the underlying remoting call message
            does not let handlers change the arguments.</remarks>
            <value>Array containing the arguments to the target.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IMethodReturn"/> that wraps the
            remoting call and return messages.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object,System.Object[],System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn"/> object that contains a
            return value.
            </summary>
            <param name="callMessage">The original call message that invoked the method.</param>
            <param name="returnValue">Return value from the method.</param>
            <param name="arguments">Collections of arguments passed to the method (including the new
            values of any out params).</param>
            <param name="invocationContext">Invocation context dictionary passed into the call.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn.#ctor(System.Exception,System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn"/> object that contains an
            exception thrown by the target.
            </summary>
            <param name="ex">Exception that was thrown.</param>
            <param name="callMessage">The original call message that invoked the method.</param>
            <param name="invocationContext">Invocation context dictionary passed into the call.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn.ToMethodReturnMessage">
            <summary>
            Constructs a <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> for the remoting
            infrastructure based on the contents of this object.
            </summary>
            <returns>The <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
            <value>The output parameter collection.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn.ReturnValue">
            <summary>
            Return value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
            <value>The return value.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
            <value>The exception, or null if no exception was thrown.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
            <value>The invocation context dictionary.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingOutputParameterCollection">
            <summary>
            A class that wraps the outputs of a <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> into the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.IParameterCollection"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingOutputParameterCollection.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object[])">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.RemotingInterception.RemotingOutputParameterCollection"/> that wraps the
            given method call and arguments.
            </summary>
            <param name="callMessage">The call message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule">
            <summary>
            A matching rule that matches when the member is declared
            in the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule.#ctor(System.Type)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/> that matches the
            given type.
            </summary>
            <param name="type">The type to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/> that matches types
            with the given name.
            </summary>
            <remarks>Comparisons are case sensitive.</remarks>
            <param name="typeName">Type name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/> that matches types
            with the given name, using the given case sensitivity.
            </summary>
            <param name="typeName">Type name to match.</param>
            <param name="ignoreCase">if false, do case-sensitive comparison. If true, do case-insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MatchingInfo})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule"/> that will match
            any of the type names given in the collection of match information.
            </summary>
            <param name="matches">The match information to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks if the given member matches any of this object's matches.
            </summary>
            <param name="member">Member to match.</param>
            <returns>True if match, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule.Matches(System.Type)">
            <summary>
            Checks if the given type matches any of this object's matches.
            </summary>
            <remarks>Matches may be on the namespace-qualified type name or just the type name.</remarks>
            <param name="t">Type to check.</param>
            <returns>True if it matches, false if it doesn't.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.CouldNotFindPolicyInConfiguration">
            <summary>
              Looks up a localized string similar to The configuration information for Policy &apos;{0}&apos; can not be found in the configuration source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.ExceptionAttributeNoSubclassOfAttribute">
            <summary>
              Looks up a localized string similar to Type must be a subclass of System.Attribute..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.InterceptionNotSupported">
            <summary>
              Looks up a localized string similar to The type {0} is not interceptable..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.NoHandlersInPolicy">
            <summary>
              Looks up a localized string similar to The policy {0} does not have any handlers..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.PolicyInjectionSectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration section for Policy Injection cannot be found in the configuration source..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.TracePoliciesApplied">
            <summary>
              Looks up a localized string similar to Injection Policies applied to object..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.ReflectionHelper">
            <summary>
            A collection of utility functions to encapsulate details of
            reflection and finding attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.ReflectionHelper.GetPropertyFromMethod(System.Reflection.MethodBase)">
            <summary>
            Given a MethodBase for a property's get or set method,
            return the corresponding property info.
            </summary>
            <param name="method">MethodBase for the property's get or set method.</param>
            <returns>PropertyInfo for the property, or null if method is not part of a property.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.ReflectionHelper.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Given a particular MemberInfo, return the custom attributes of the
            given type on that member.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="member">The member to look at.</param>
            <param name="inherits">True to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Utilities.ReflectionHelper.GetAllAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Given a particular MemberInfo, find all the attributes that apply to this
            member. Specifically, it returns the attributes on the type, then (if it's a
            property accessor) on the property, then on the member itself.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="member">The member to look at.</param>
            <param name="inherits">true to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
    </members>
</doc>
