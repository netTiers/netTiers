<%--
	Written By:
		Rizaullah Mohammed (Riza)
	Description:
		This script will create WebService which wraps Component Service Layer (Business Logic Layer) instead of Data Access Layer. 
		It requires stored procedures created from the procedure script. So for this code to work properly you need to run
		the procedure template, the rowobject template, and the rowcollection template on
		the same table. You can also optionally use the main script which will run them all
		for you.

--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="" Debug="True" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Context" Description="views that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>

<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Class Namespace." %>

<%@ Property Name="BLLNameSpace" Type="System.String" Category="Data" Description="BLL Namespace." %>
<%@ Property Name="ComponentsNameSpace" Type="System.String" Category="Data" Description="Component Service Layer Namespace." %>

<%@ Property Name="ClassName" Type="System.String" Category="Style" Description="The Name of the WebService class." %>
<%@ Property Name="WebServiceUrl" Type="System.String" Category="Style" Description="The webservice base URL. The asmx filename will be added programmatically." Default="http://localhost/Services/" %>
<%%@ WebService Language="C#" Class="<%=ClassName%>" %>
<%%@ Assembly Name="<%=BLLNameSpace%>" %>
<%%@ Assembly Name="<%=ComponentsNameSpace%>" %>


using System;
using System.Data;
using System.Web.Services;
using <%=BLLNameSpace%>;
using <%=ComponentsNameSpace%>;



/// <summary>
///	Exposes CRUD webmethods for the <%=ClassName%> Database.
/// </summary>
[WebService(Namespace="<%=WebServiceUrl%>", Description="Exposes CRUD webmethods for the <%=ClassName%> Database.")]
public class <%=ClassName%> : WebService 
{
	<% 
	for (int tableIndex = 0; tableIndex < SourceTables.Count; tableIndex++) 
	{
		// point to the current table
		SchemaExplorer.TableSchema SourceTable = SourceTables[tableIndex];
		
		// True if primary key is AutoGenerated by database.
		//bool IsPkeyReadOnly = false;
		
		// Name of the table being worked on.
		string name = SourceTable.Name;
		string className = NameSpace + "." + GetClassName(SourceTable.Name);
		string serviceClassName = GetServiceClassName(SourceTable.Name);
		string collectionClassName = NameSpace + "." + GetCollectionClassName(SourceTable.Name);
				
		string commandStem = GetCleanName(SourceTable.Name);
		string providerName = GetProviderName(SourceTable.Name);
		
		// Collection of all columns in the table.
		ColumnSchemaCollection cols = SourceTable.Columns;
		
		// Collection of all columns in the table that are not primary keys.
		ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
		
		// Collection of all primary key columns.
		ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns;
		
		// Collection of ForeignKeys. Provides information about the foreign keys 
		//(keys where the current table is the foreign table) contained in the table. 
		TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
		
		//Provides information about the primary keys 
		//(keys where the current table is the primary table) contained in the table. 
		TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
		
		//Provides information about the indexes contained in the table. 
		IndexSchemaCollection indexes = SourceTable.Indexes;
		
		//the first of potentially multiple primary keys
		//ColumnSchema primaryKey = keys[0];
		
		
		// Holds the RowVersion column if there's any
		ColumnSchema RowVersion = null;
	
		foreach (ColumnSchema column in cols)
		{
			if (column.NativeType.ToLower() == "timestamp")
				RowVersion = column;
		}
	 
		// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
		System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>

	#region <%=SourceTable.Name%>

	<% if(IncludeManyToMany) { %>
	#region Get from  Many To Many Relationship Functions
	<%
		TableSchema primaryTable = SourceTable;
		
		foreach(TableKeySchema key in SourceTable.PrimaryKeys)
		{
			// Check that the key is related to a junction table and that this key relate a PK in this junction table
			if ( IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key))
			{
				TableSchema junctionTable = key.ForeignKeyTable;
				
				// Search for the other(s) key(s) of the junction table' primary key
				foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
				{				
					if ( IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
					{
						TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
						string functionname = GetManyToManyName(junctionTableKey, GetCleanName(junctionTable.Name));
%>

	#region GetBy<%=functionname%>
	/// <summary>
	///		Gets <%=primaryTable.Name%> objects from the datasource by <%=junctionTableKey.ForeignKeyMemberColumns[0].Name%> in the
	///		<%=junctionTable.Name%> table. Table <%=primaryTable.Name%> is related to table <%=secondaryTable.Name%>
	///		through the (M:N) relationship defined in the <%=junctionTable.Name%> table.
	/// </summary>
	/// <param name="start">Row number at which to start reading, the first row is 0.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">out parameter to get total records for query</param>
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%>, through the junction table <%=junctionTable.Name%>.")]
	public <%=NameSpace + "." + GetCollectionClassName(primaryTable.Name)%> <%=providerName%>_GetBy<%=functionname%>(<%=GetFunctionHeaderParameters(junctionTableKey.ForeignKeyMemberColumns)%>, int start, int pageLength, out int count)
	{	
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.GetBy<%=functionname%>(<%=GetFunctionCallParameters(junctionTableKey.ForeignKeyMemberColumns)%>, start, pageLength, out count);
	}
	
	#endregion GetBy<%=functionname%>
	
				<%
				} //end if there is many to many relationship.
			} //end foreach			
	 	}// end if(IsJunctionTable(junctionTableKeyForeignKeyTable)) %>
	<%}//end foreach pkey %>
	#endregion	
	<% } %>
	
	<% if (IncludeDelete) {%>
	#region <%= MethodNames.Delete %> Functions
	
	/// <summary>
	/// 	Deletes a row from the DataSource.
	/// </summary>
	<% for (int i = 0; i < keys.Count; i++) { %>
	/// <param name="<%= keys[i].Name%>"><%= keys[i].Description%>. Primary Key.</param>	
	<% } %>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="connectionString">Connection string to datasource.</param>
	/// <remarks>Deletes based on primary key(s).</remarks>
	/// <returns>Returns true if operation suceeded.</returns>
	[WebMethod(Description="Delete a row from the table <%=SourceTable.Name%>.")]
	public bool <%=providerName%>_<%= MethodNames.Delete %>(<%= GetFunctionHeaderParameters(keys) %><% if(RowVersion != null) {Response.Write(", byte[] " + GetPrivateName(RowVersion.Name));}%>)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.<%= MethodNames.Delete %>(<%= GetFunctionCallParameters(keys) %><% if(RowVersion != null) {Response.Write(", " + GetPrivateName(RowVersion.Name));}%>);
	}		
	
	#endregion
	<% } %>
	
	<% if (IncludeFind) { %>
	#region <%= MethodNames.Find %> Functions
	
	/// <summary>
	/// 	Returns rows meeting the whereclause condition from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query.</param>
	/// <remarks></remarks>
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%> with additional query text.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.Find %>(string whereClause, int start, int pageLength, out int count)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.<%= MethodNames.Find %>(whereClause, start, pageLength, out count);
	}
	
	#endregion <%= MethodNames.Find %> Functions
	<% } %>
	
	
	<% if (IncludeGetList) { %>
	#region <%= MethodNames.GetAll %> Functions
		
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
	/// <param name="count">Number of rows in the DataSource.</param>
	/// <returns>Returns a <s>DataSet</s>.</returns>
	[WebMethod(Description="Get all rows from the table <%=SourceTable.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.GetAll %>(int start, int pageLength, out int count)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.<%= MethodNames.GetAll %>(start, pageLength, out count);		
	}
	
	#endregion
	
	#region <%= MethodNames.GetPaged %>
	
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="count">Number of rows in the DataSource.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=ClassName%> objects.</returns>
	[WebMethod(Description="Get all rows from the table <%=SourceTable.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.GetPaged %>(string whereClause, string orderBy, int start, int pageLength, out int count)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.<%= MethodNames.GetPaged %>(whereClause, orderBy, start, pageLength, out count);
	}

	#endregion
	<% } %>
		
	<% if (IncludeGetListByFK) { %>
	#region Get By Foreign Key Functions
<%
		for (int j=0; j < fkeys.Count;j++)
		{	
			if(IsForeignKeyCoveredByIndex(fkeys[j]))
				continue;
									
			getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
%>
	
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=fkeys[j].Name%> key.
	///		<%=fkeys[j].Name%> Description: <%=fkeys[j].Description%>
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
<% for (int i = 0; i < fkeys[j].ForeignKeyMemberColumns.Count; i++) { %>
	/// <param name="<%= fkeys[j].ForeignKeyMemberColumns[i].Name%>"><%=fkeys[j].ForeignKeyMemberColumns[i].Description%></param>
<% } %>
	/// <param name="count">out parameter to get total records for query</param>	
	/// <remarks></remarks>
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from <%=SourceTable.Name%> filtered by the <%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%> column.")]
	public <%=collectionClassName%> <%=providerName%>_GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(<%= GetFunctionHeaderParameters(fkeys[j].ForeignKeyMemberColumns) %>, int start, int pageLength, out int count)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(<%= GetFunctionCallParameters(fkeys[j].ForeignKeyMemberColumns) %>, start, pageLength, out count);
	}
	
<% 		}//endfor %>
#endregion
	<% } %>
	
	<% if (IncludeGetListByIX) { %>	
	#region Get By Index Functions
	<%	
		for (int j=0; j < indexes.Count;j++)
		{
			// Check if this key is not already generated
			if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
			{
				continue;
			}
			else
			{
				// add this key to the index list
				getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
			}
			
			string returnType = collectionClassName;
			bool isUnique = false;
			
			if (indexes[j].IsUnique || indexes[j].IsPrimaryKey)
			{
				returnType = className;
				isUnique = true;
			}
%>
	
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=indexes[j].Name%> index.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
<% for (int i = 0; i < indexes[j].MemberColumns.Count; i++) { %>
	/// <param name="<%= indexes[j].MemberColumns[i].Name%>"><%= indexes[j].MemberColumns[i].Description%></param>
<% } %>
	/// <param name="count">out parameter to get total records for query</param>	
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%> filtered by the column <%=GetKeysName(indexes[j].MemberColumns)%> that is part of the <%=indexes[j].Name%> index.")]
	public <%=returnType%> <%=providerName%>_GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(<%= GetFunctionHeaderParameters(indexes[j].MemberColumns) %>, int start, int pageLength, out int count)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(<%= GetFunctionCallParameters(indexes[j].MemberColumns) %>, start, pageLength, out count);
	}
	

<%		}//endfor %>
	#endregion Get By Index Functions
	<% } %>
	
	<% if (IncludeInsert) { %>
	#region <%= MethodNames.Insert %> Methods
		
	/// <summary>
	/// 	Inserts an object into the datasource.
	/// </summary>	
	/// <remarks>After inserting into the datasource, the object will be returned
	/// to refelect any changes made by the datasource. (ie: identity columns)</remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Inserts a row in the table <%=SourceTable.Name%>.")]
	public <%=className%> <%=providerName%>_<%= MethodNames.Insert %>(<%=className%> entity )
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		serviceObject.<%= MethodNames.Insert %>(entity);
		return entity;		
	}
	
	/// <summary>
	/// Inserts a <%=collectionClassName%> object into the datasource using a transaction.
	/// </summary>
	/// <param name="entity"><%=collectionClassName%> object to insert.</param>
	/// <remarks>After inserting into the datasource, the <%=className%> object will be updated
	/// to refelect any changes made by the datasource. (ie: identity or computed columns)
	/// </remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Inserts a Bulk set of rows into the table <%=SourceTable.Name%>.")]
	public void <%=providerName%>_<%= MethodNames.BulkInsert %>(<%=collectionClassName%> entityList )
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		serviceObject.<%= MethodNames.BulkInsert %>(entityList);
	}
	#endregion <%= MethodNames.Insert %> Methods
	<% } %>
			
	<% if (IncludeUpdate) { %>	
	#region <%= MethodNames.Update %> Methods
		
	/// <summary>
	/// 	Update an existing row in the datasource.
	/// </summary>
	/// <param name="entity"> object to update.</param>
	/// <remarks>After updating the datasource, the object will be updated
	/// to refelect any changes made by the datasource. (ie: identity columns)</remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Update a row in the table <%=SourceTable.Name%>.")]
	public <%=className%> <%=providerName%>_<%= MethodNames.Update %>(<%=className%> entity)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		serviceObject.<%= MethodNames.Update %>(entity);
		return entity;
	}

	#endregion <%= MethodNames.Update %> Methods
	<% } %>

	<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<%
	System.Collections.IDictionary procs = GetCustomProcedures(SourceTable);
						
	foreach(DictionaryEntry item in procs)
	{
		SchemaExplorer.CommandSchema command = (SchemaExplorer.CommandSchema) item.Value;
		string methodName  = item.Key.ToString();
						
		string returnType = GetReturnCustomProcReturnType(CustomNonMatchingReturnType, SourceTable, command);
		string returnKeyword = returnType == "void" ? "" : "return ";
		if (returnType == "IDataReader")
				returnType = "DataSet";
%>
	/// <summary>
	///	This method wrap the <%=command.Name%> stored procedure. 
	/// </summary>
	[WebMethod(Description="This method wrap the <%=command.Name%> stored procedure.")]
	public <%=returnType%> <%=providerName%>_<%=methodName%>(<%=TransformStoredProcedureInputsToMethod(false, command.InputParameters) + TransformStoredProcedureOutputsToMethod((command.InputParameters.Count > 0), command.AllOutputParameters)%><% if ( command.InputParameters.Count > 0 ) { %>, <% } %>int start, int pageLength)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		
	    <% if (returnType == "DataSet") { %>
		    return <% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %><%=ComponentsNameSpace%>.DomainUtil.ConvertDataReaderToDataSet(<%}%>serviceObject.<%=methodName%>(<%=TransformStoredProcedureInputsToDataAccess(false, command.InputParameters) + TransformStoredProcedureOutputsToDataAccess((command.InputParameters.Count > 0), command.AllOutputParameters)%><% if ( (command.InputParameters.Count + command.AllOutputParameters.Count) > 0 ) { %>, <% } %>start, pageLength )<% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %>)<%}%>;
	    <% } else { %>
		    return serviceObject.<%=methodName%>(<%=TransformStoredProcedureInputsToDataAccess(false, command.InputParameters) + TransformStoredProcedureOutputsToDataAccess((command.InputParameters.Count > 0), command.AllOutputParameters)%><% if ( command.InputParameters.Count + command.AllOutputParameters.Count > 0 ) { %>, <% } %>start, pageLength );
	    <% } %>
	}
		
<%
	}	
%>
	
	#endregion
	<% } %>

	#endregion <%=SourceTable.Name%>
<% } /* END For each DataTable */ %> 
	
	
	/* --------------------------------------------------------
		SQL VIEWS
	----------------------------------------------------------- */
	<% foreach(ViewSchema SourceView in SourceViews)
	{
		string className = NameSpace + "." + GetClassName(SourceView.Name);
		string serviceClassName = GetServiceClassName(SourceView.Name);		
		string providerName = GetProviderName(SourceView.Name);		
		string collectionClassName = NameSpace + "." + GetViewCollectionClassName(SourceView.Name);
	 	%>
	
	<% if (IncludeGetList) { %>
	#region <%= MethodNames.GetAll %> Methods
		
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <returns>Returns a <s>DataSet</s>.</returns>
	[WebMethod(Description="Get all rows from the view <%=SourceView.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.GetAll %>(int start, int pageLength, out int count)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.<%= MethodNames.GetAll %>(start, pageLength, out count);
	}
	
	#endregion <%= MethodNames.GetAll %> Methods
	<% } %>
	
	#region <%= MethodNames.Get %> Methods
	
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query.</param>
	/// <param name="orderBy">Specifies the ORDER By criteria for the rows in the DataSource.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=ClassName%> objects.</returns>
	[WebMethod(Description="Get all rows from the view <%=SourceView.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_<%= MethodNames.Get %>(string whereClause, string orderBy, int start, int pageLength)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		return serviceObject.<%= MethodNames.Get %>(whereClause.Length > 0 ? whereClause : null, orderBy.Length > 0 ? orderBy : null, start, pageLength);
	}

	#endregion <%= MethodNames.Get %> Methods
	
	<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<%
	System.Collections.IDictionary procs = GetCustomProcedures(SourceView);
	
	foreach(DictionaryEntry item in procs)
	{
		SchemaExplorer.CommandSchema command = (SchemaExplorer.CommandSchema) item.Value;
		string methodName  = item.Key.ToString();
					
		string returnType = GetReturnCustomProcReturnType(CustomNonMatchingReturnType, SourceView, command);
		string returnKeyword = returnType == "void" ? "" : "return ";
		if (returnType == "IDataReader")
			returnType = "DataSet"; 
%>
	
	/// <summary>
	///	This method wrap the <%=command.Name%> stored procedure. 
	/// </summary>
	[WebMethod(Description="This method wrap the <%=command.Name%> stored procedure.")]
	public <%=returnType%> <%=providerName%>_<%=methodName%>(<%=TransformStoredProcedureInputsToMethod(false, command.InputParameters)%><% if ( command.InputParameters.Count > 0 ) { %>, <% } %>int start, int pageLength)
	{
		<%=serviceClassName%> serviceObject = new <%=serviceClassName%>();
		
		<% if (returnType == "DataSet") { %>
		    //return <% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %><%=ComponentsNameSpace%>.DomainUtil.ConvertDataReaderToDataSet(<%}%>serviceObject.<%=methodName%>(<%=TransformStoredProcedureInputsToDataAccess(false, command.InputParameters) + TransformStoredProcedureOutputsToDataAccess((command.InputParameters.Count > 0), command.AllOutputParameters)%><% if ( (command.InputParameters.Count + command.AllOutputParameters.Count) > 0 ) { %>, <% } %>start, pageLength )<% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %>)<%}%>;
		    return <% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %><%=ComponentsNameSpace%>.DomainUtil.ConvertDataReaderToDataSet(<%}%>serviceObject.<%=methodName%>(<%=TransformStoredProcedureInputsToDataAccess(false, command.InputParameters) %><% if ( (command.InputParameters.Count) > 0 ) { %>, <% } %>start, pageLength )<% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %>)<%}%>;
	    <% } else { %>
		    return serviceObject.<%=methodName%>(<%=TransformStoredProcedureInputsToDataAccess(false, command.InputParameters)%><% if ( command.InputParameters.Count > 0 ) { %>, <% } %>start, pageLength );
	    <% } %>

	}
		
	
<%
	}	// foreach command
%>
	
	#endregion
	<% } %>
	
<% } %>

}