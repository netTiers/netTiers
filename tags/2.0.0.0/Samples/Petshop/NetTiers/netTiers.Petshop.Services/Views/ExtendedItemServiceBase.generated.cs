

/*
	File generated by NetTiers templates [www.NetTiers.com]
	Generated on : Monday, July 24, 2006
	Important: Do not modify this file. Edit the file ExtendedItem.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using netTiers.Petshop.Entities;
using netTiers.Petshop.Entities.Validation;
using Entities = netTiers.Petshop.Entities;
using netTiers.Petshop.Data;
using netTiers.Petshop.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace netTiers.Petshop.Services
{		
	
	///<summary>
	/// An object representation of the 'ExtendedItem' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ExtendedItem.cs file instead.
	/// All custom implementations should be done in the <see cref="ExtendedItem"/> class.
	/// </remarks>
	[DataObject]
	public partial class ExtendedItemServiceBase : ServiceViewBase<ExtendedItem>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ExtendedItem"/> instance .
		///</summary>
		public ExtendedItemServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ExtendedItem"/> instance.
		///</summary>
		///<param name="itemId"></param>
		///<param name="itemName"></param>
		///<param name="itemDescription"></param>
		///<param name="itemPrice"></param>
		///<param name="itemPhoto"></param>
		///<param name="productId"></param>
		///<param name="productName"></param>
		///<param name="productDescription"></param>
		///<param name="categoryId"></param>
		///<param name="categoryName"></param>
		public static ExtendedItem CreateExtendedItem(System.Guid itemId, System.String itemName, System.String itemDescription, System.Double? itemPrice, System.String itemPhoto, System.Guid productId, System.String productName, System.String productDescription, System.Guid categoryId, System.String categoryName)
		{
			ExtendedItem newEntityExtendedItem = new ExtendedItem();
			newEntityExtendedItem.ItemId  = itemId;
			newEntityExtendedItem.ItemName  = itemName;
			newEntityExtendedItem.ItemDescription  = itemDescription;
			newEntityExtendedItem.ItemPrice  = itemPrice;
			newEntityExtendedItem.ItemPhoto  = itemPhoto;
			newEntityExtendedItem.ProductId  = productId;
			newEntityExtendedItem.ProductName  = productName;
			newEntityExtendedItem.ProductDescription  = productDescription;
			newEntityExtendedItem.CategoryId  = categoryId;
			newEntityExtendedItem.CategoryName  = categoryName;
			return newEntityExtendedItem;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ExtendedItem> securityContext = new SecurityContext<ExtendedItem>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region SecurityContext
		/*
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<ExtendedItem> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		*/
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ExtendedItem> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/*
		/// <summary>
        /// Gets a page of rows from the DataSource.
        /// </summary>
        /// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">The total number of rows in the data source</param>
        /// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
        /// <remarks></remarks>
        /// <returns>Returns a typed collection of ExtendedItem objects.</returns>
		public virtual VList<ExtendedItem> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			TransactionManager transactionManager = null; 
			return Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
		}
		*/
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager">A <see cref="TransactionManager"/> object.</param>		
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ExtendedItem} of <c>ExtendedItem</c> objects.</returns>
		public override VList<ExtendedItem> Get(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ExtendedItem> list = null;
			totalCount = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ExtendedItemProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion		
		
		#region GetList
		/// <summary>
		/// Get a complete collection of <see cref="ExtendedItem" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ExtendedItem> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

        /// <summary>
        /// Get a set portion of a complete list of <see cref="ExtendedItem" /> entities
        /// </summary>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="totalCount">out parameter, number of total rows in given query.</param>
        /// <returns>a <see cref="TList{ExtendedItem}"/> </returns>
		public virtual VList<ExtendedItem> GetAll(int start, int pageLength, out int totalCount) 
		{
			TransactionManager transactionManager = null;
            return GetAll(transactionManager, start, pageLength, out totalCount);
		}
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ExtendedItem" /> entities
		/// </summary>
		/// <param name="transactionManager">A <see cref="TransactionManager"/> object.</param>		
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ExtendedItem}"/> </returns>
		public override VList<ExtendedItem> GetAll(TransactionManager transactionManager, int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ExtendedItem> list = null;
			totalCount = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ExtendedItemProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ExtendedItem}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
		public virtual VList<ExtendedItem> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ExtendedItem}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
		public virtual VList<ExtendedItem> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ExtendedItem}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
		public virtual VList<ExtendedItem> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			TransactionManager transactionManager = null; 
			return GetPaged(transactionManager, null, null, start, pageLength, out totalCount);
		}
		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ExtendedItem}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="transactionManager">A <see cref="TransactionManager"/> object.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ExtendedItem</c> objects.</returns>
		public override VList<ExtendedItem> GetPaged(TransactionManager transactionManager, string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ExtendedItem> list = null;
			totalCount = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ExtendedItemProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
			
	}//End Class
} // end namespace


