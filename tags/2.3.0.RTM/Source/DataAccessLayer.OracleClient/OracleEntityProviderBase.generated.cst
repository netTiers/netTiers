<%--
 
	Written By:
		John Roland (from the orginal work of Ryan Hurdon)
	Description:
		This script create a data access layer component for a database table.	
	Remarks:
		Generated code will need the entreprise library 2 to function.
--%>
<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." Debug="True"  ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>
<%@ Property Name="CustomProcedureStartsWith" Type="System.String" Default="_{0}_" Category="Options" Description="If you include custom stored procedures, this is the pattern that NetTiers will look for your custom stored procedures. A string format will be used to match the procedure pattern.  So, {0}=TableName, {1}=StoredProc Prefix.  By default NetTiers will look at tables that starts with '_{0}_', which means it will detect the procedure _TableName_GetByBirthdate and will be detected and generated." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="Options" Description="If true combined insert/update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>

<%@ Property Name="InsertSuffix" Type="System.String" Default="_Insert" Category="Style" Description="Suffix to use for all generated INSERT functions." %>
<%@ Property Name="UpdateSuffix" Type="System.String" Default="_Update" Category="Style" Description="Suffix to use for all generated UPDATE functions." %>
<%@ Property Name="DeleteSuffix" Type="System.String" Default="_Delete" Category="Style" Description="Suffix to use for all generated DELETE functions." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="ProcedurePrefix" Optional="True" Type="System.String" Category="Style" Description="Prefix for Strored Procedures" %>

<%
	// Name of the table being worked on.
	string name = SourceTable.Name;
	
	//Get the owner of the table
	string owner = GetOwnerName(SourceTable, true);
	
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	//ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns; 
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	IndexSchemaCollection indexes = SourceTable.Indexes;
		
	// Holds the RowVersion column if there's any
	ColumnSchema RowVersion = null;

	foreach (ColumnSchema column in cols)
	{
		if (column.NativeType.ToLower() == "timestamp")
			RowVersion = column;
	}
	
	
	string className = NameSpace + "." + GetClassName(SourceTable);
	string entityClassName = GetClassName(SourceTable);
	string abstractRepositoryClassName = "Oracle" + GetClassName(SourceTable, ClassNameFormat.ProviderBase);
	//string repositoryClassName = DALNameSpace + "." +GetRepositoryClassName(SourceTable.Name);
	string providerBaseName = GetClassName(SourceTable, ClassNameFormat.ProviderBase);
	string providerName = "Oracle" + GetClassName(SourceTable, ClassNameFormat.Provider);
	string collectionClassName = NameSpace + "." + GetClassName(SourceTable, ClassNameFormat.Collection);
	
	string commandStem = GetCleanName(SourceTable);
		
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
	
	string listName = GetTListName();
%>
/*
	File Generated by NetTiers templates [www.nettiers.com]
	<%
	if( IncludeGeneratedDate)
	{
	%>
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	<%
	}
	%>
	Important: Do not modify this file. Edit the file <%=providerName%>.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Data.OracleClient;

using Microsoft.Practices.EnterpriseLibrary.Data.Oracle;

using <%=NameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>.OracleClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="<%=GetClassName(SourceTable)%>"/> entity.
	///</summary>
	public abstract partial class <%=abstractRepositoryClassName%> : <%=providerBaseName%>
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
	    DbProviderFactory _providerFactory;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
		/// </summary>
		public <%=abstractRepositoryClassName%>()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="<%=abstractRepositoryClassName%>"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public <%=abstractRepositoryClassName%>(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
		this._providerFactory = DbProviderFactories.GetFactory(this._providerInvariantName);
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
	<% if(IncludeManyToMany) { %>
		#region Get Many To Many Relationship Functions
	<%
		TableSchema primaryTable = SourceTable;
		
		System.Collections.Hashtable manyToManyFunctions = new System.Collections.Hashtable();
		foreach(TableKeySchema key in SourceTable.PrimaryKeys)
		{
			// Check that the key is related to a junction table and that this key relate a PK in this junction table
			if ( IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key))
			{
				TableSchema junctionTable = key.ForeignKeyTable;
				
				// Search for the other(s) key(s) of the junction table' primary key
				foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
				{				
					if ( IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
					{
						TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
						string functionname = GetManyToManyName(junctionTableKey, junctionTable);
						if (!manyToManyFunctions.ContainsKey(functionname))
						{
							manyToManyFunctions.Add(functionname,null);
%>
	
		#region GetBy<%=functionname%>
		/// <summary>
		///		Gets <%=GetClassName(primaryTable)%> objects from the datasource by <%=junctionTableKey.ForeignKeyMemberColumns[0].Name%> in the
		///		<%=junctionTable.Name%> table. Table <%=primaryTable.Name%> is related to table <%=secondaryTable.Name%>
		///		through the (M:N) relationship defined in the <%=junctionTable.Name%> table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	<% for (int i = 0; i < junctionTableKey.ForeignKeyMemberColumns.Count; i++) { %>
		/// <param name="<%= GetFieldName(junctionTableKey.ForeignKeyMemberColumns[i])%>"><%=GetColumnXmlComment(junctionTableKey.ForeignKeyMemberColumns[i],2)%></param>
	<% } %>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns a <c><%=listName%></c> of <%=GetClassName(primaryTable)%> objects.</returns>
		public override <%=GetClassName(primaryTable, ClassNameFormat.Collection)%> GetBy<%=functionname%>(TransactionManager transactionManager, <%=GetFunctionHeaderParameters(junctionTableKey.ForeignKeyMemberColumns)%>, int start, int pageLength, out int count)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + SelectSuffix + "By" + functionname%>");
			
			<% foreach(ColumnSchema col in junctionTableKey.ForeignKeyMemberColumns) { %>
			database.AddInParameter(command, "p_<%=GetPropertyName(col)%>", DbType.<%=col.DataType.ToString()%>, <%=GetFieldName(col)%>);
			<% } %>
			
			IDataReader reader = null;
			//Create collection and fill
			<%=collectionClassName%> rows = new <%=collectionClassName%>();
			
			try
			{
				if (transactionManager != null)
					reader = Utility.ExecuteReader(transactionManager, command);
				else
					reader = Utility.ExecuteReader(database, command);

				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
					if(reader.Read())
						count = ( int )reader.GetDecimal(0);
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows; 
		}
		
		#endregion GetBy<%=functionname%>
		
				<%
					}//end if the function has already been created
				} //end if there is many to many relationship.
			} //end foreach			
	 	}// end if(IsJunctionTable(junctionTableKey.ForeignKeyTable)) %>
	<%}//end foreach pkey %>
	#endregion
	
	<%} //end if many to many %>
	
<% if (IncludeDelete && SourceTable.PrimaryKey != null) {%>
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		/// <param name="<%= GetFieldName(SourceTable.PrimaryKey.MemberColumns[i])%>"><%=GetColumnXmlComment(SourceTable.PrimaryKey.MemberColumns[i],2)%>. Primary Key.</param>	
		<% } %>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param><% if (RowVersion != null){ %>
		/// <param name="<%=GetFieldName(RowVersion)%>">The timestamp field used for concurrency check.</param><% } %>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		<% if (RowVersion != null){ %>
        /// <exception cref="DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
		<%}%>
		public override bool Delete(TransactionManager transactionManager, <%= GetFunctionHeaderParameters(SourceTable.PrimaryKey.MemberColumns) %><% if(RowVersion != null) {Response.Write(", byte[] " + GetFieldName(RowVersion));}%>)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + DeleteSuffix%>");
			<% for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { 
				ColumnSchema col = SourceTable.PrimaryKey.MemberColumns[i];
			%>
			database.AddInParameter(command, "p_<%=GetPropertyName(col)%>", DbType.<%=col.DataType%>, <%=GetFieldName(col)%>);
			<% } %>
			<% if (RowVersion != null){ %>
			database.AddInParameter(command, "p_<%=GetPropertyName(RowVersion)%>", DbType.<%= RowVersion.DataType.ToString() %>, <%= GetFieldName(RowVersion) %>);
			<% } %>
			
			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, command);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,command);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				<% if (SourceTable.PrimaryKey.MemberColumns.Count > 0) { %>
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(<%= entityClassName %>)
					<% foreach (ColumnSchema col in SourceTable.PrimaryKey.MemberColumns){%>,<%=GetFieldName(col)%><%}%>);
				EntityManager.StopTracking(entityKey);
				<%}%>
			}
			
			if (results == 0)
			{
				<% if (RowVersion != null){ %>
				throw new DBConcurrencyException ("The record has been modified by an other user. Please reload the instance before deleting.");
				<% } else { %>
				//throw new DataException("The record has been already deleted.");
				return false;
				<% } %>
			}
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion
<% } //end if(includedelete)%>

	<%/*	
		-------------------------------
		FIND FUNCTIONS
		-------------------------------
	*/%>
	<% if (IncludeFind) { %>
		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new <%=collectionClassName%>();
	
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + FindSuffix%>");

			bool searchUsingOR = false;
			if (whereClause.IndexOf("OR") > 0) // did they want to do "a=b OR c=d OR..."?
				searchUsingOR = true;
		
			database.AddInParameter(command, "p_SearchUsingOR", DbType.Boolean, searchUsingOR);
			
		<% foreach(ColumnSchema column in SourceTable.Columns) {%>
			database.AddInParameter(command, "p_<%=GetPropertyName(column)%>", DbType.<%=column.DataType%>, DBNull.Value);
		<% } %>
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace("AND", "|").Replace("OR", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
			<% string columnName, columnNameSpace, columnNameEqual, columnNameParam; %>
	   		foreach (string clause in clauses)
			{
				<% foreach(ColumnSchema column in SourceTable.Columns) {%>	
				<% columnName = column.Name.ToLower();
				      columnNameSpace = columnName + " ";
				      columnNameEqual = columnName + "=";
				      columnNameParam = "p_" + column.Name;
				%>
				if (clause.Trim().StartsWith("<%=columnNameSpace%>") || clause.Trim().StartsWith("<%=columnNameEqual%>"))
				{
					<%if (column.DataType.ToString() == "Guid") // fix for guid types
					{%>
					database.SetParameterValue(command, "<%=columnNameParam%>", new Guid(
						clause.Replace("<%=columnName%>","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					<%} else {%>
					database.SetParameterValue(command, "<%=columnNameParam%>", 
						clause.Replace("<%=columnName%>","").Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					<%}%>
					continue;
				}
				<% } %>
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			<%=collectionClassName%> rows = new <%=collectionClassName%>();
	
				
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, command);
				}
				else
				{
					reader = Utility.ExecuteReader(database, command);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = ( int )reader.GetDecimal(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();				
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <%= className %> objects.</returns>
		public override <%=collectionClassName%> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%= owner + ProcedurePrefix + commandStem + FindSuffix %>_Dynamic");
			
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				
				string paramterName = param.Name;
				if(paramterName != "curOut" && paramterName.StartsWith("p_"))
				paramterName = string.Format("p_{0}", paramterName);
				
				database.AddInParameter(command, paramterName, param.DbType, param.Value);
			}

			<%= collectionClassName %> rows = new <%= collectionClassName %>();
			IDataReader reader = null;
			
			try
			{
				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, command);
				}
				else
				{
					reader = Utility.ExecuteReader(database, command);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = ( int )reader.GetDecimal(0);
					}
				}
			}
			finally
			{
				if ( reader != null )
					reader.Close();
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion "Find Functions"
	<% } %>
	
	<%/*	
		-------------------------------
		GET LIST FUNCTIONS
		-------------------------------
	*/%>
<% if (IncludeGetList) { %>
		#region GetList Functions
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override <%=collectionClassName%> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + SelectSuffix + SelectAllSuffix%>");
			
			IDataReader reader = null;
		
			//Create Collection
			<%=collectionClassName%> rows = new <%=collectionClassName%>();
			
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, command);
				}
				else
				{
					reader = Utility.ExecuteReader(database, command);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = ( int )reader.GetDecimal(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region Paged Recordset
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
		public override <%=collectionClassName%> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + SelectSuffix + "Paged"%>");
			
			database.AddInParameter(command, "p_WhereClause", DbType.String, whereClause);
			database.AddInParameter(command, "p_OrderBy", DbType.String, orderBy);
			database.AddInParameter(command, "p_PageIndex", DbType.Int32, start);
			database.AddInParameter(command, "p_PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			bool commitTransaction = false;
			
			if (transactionManager == null)
			{
				transactionManager = new TransactionManager(_connectionString, _providerInvariantName);
				transactionManager.BeginTransaction();
				commitTransaction = true;
			}
			
			//Create Collection
			<%=collectionClassName%> rows = new <%=collectionClassName%>();
			
			try
			{
				//if (transactionManager != null)
				//{
					reader = Utility.ExecuteReader(transactionManager, command);
				//}
				//else
				//{
				//	reader = Utility.ExecuteReader(database, command);
				//}
				
				Fill(reader, rows, 0, int.MaxValue);
				//count = rows.Count;

				/*if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = ( int )reader.GetDecimal(0);
					}
				}*/
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			
			// now we get the count
			DbCommand commandCount = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + SelectSuffix + "PagedCount"%>");
			database.AddInParameter(commandCount, "p_WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandCount, "p_OrderBy", DbType.String, orderBy);
			
			
			IDataReader dataReader = Utility.ExecuteReader(transactionManager, commandCount);
            if(dataReader.Read())
            {
                count = ( int ) dataReader.GetDecimal( 0 );
            }
			else
			{
				count = 0;
			}
			
			if (commitTransaction)
			{
				transactionManager.Commit();
			} 
			
			return rows;
		}
		
		#endregion	
		
<%
 	} //end IncludeGetList
	
	/*---------------------------------------------------------------------------------
								Get By FK
	  -------------------------------------------------------------------------------*/
	
	if (IncludeGetListByFK) { %>
		#region Get By Foreign Key Functions
<%
		for (int j=0; j < fkeys.Count;j++)
		{
			if(IsForeignKeyCoveredByIndex(fkeys[j]))
					continue;
					
			getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
%>	

		#region GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>
		/// <summary>
		/// 	Gets rows from the datasource based on the <%=fkeys[j].Name%> key.
		///		<%=fkeys[j].Name%> Description: <%=GetColumnXmlComment(fkeys[j],2)%>
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		<% for (int i = 0; i < fkeys[j].ForeignKeyMemberColumns.Count; i++) { %>
		/// <param name="<%= GetFieldName(fkeys[j].ForeignKeyMemberColumns[i])%>"><%=GetColumnXmlComment(fkeys[j].ForeignKeyMemberColumns[i],2)%></param>
		<% } %>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <%=className%> objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override <%=collectionClassName%> GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(TransactionManager transactionManager, <%= GetFunctionHeaderParameters(fkeys[j].ForeignKeyMemberColumns) %>, int start, int pageLength, out int count)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + GetProcNameForGetByIX( ProcedurePrefix + commandStem + SelectSuffix + "By" , fkeys[j].ForeignKeyMemberColumns ) %>");
			
			<% foreach(ColumnSchema col in fkeys[j].ForeignKeyMemberColumns) { %>
				database.AddInParameter(command, "p_<%=GetPropertyName(col)%>", DbType.<%=col.DataType%>, <%=GetFieldName(col)%>);
			<% } %>
			
			IDataReader reader = null;
			<%=collectionClassName%> rows = new <%=collectionClassName%>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, command);
				}
				else
				{
					reader = Utility.ExecuteReader(database, command);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = (int)reader.GetDecimal(0);
					}
				}
			}
			finally
			{
				if (reader != null) 
					reader.Close();
			}
			return rows;
		}	
		#endregion
	
<% 		}//endfor %>
	#endregion
	
<% 	} //end includegetlistbyfk %>
<%

	/*---------------------------------------------------------------------------------
								Get By Index
	  -------------------------------------------------------------------------------*/
	
	if (IncludeGetListByIX) {
	%>	
		#region Get By Index Functions
	<%	
		for (int j=0; j < indexes.Count;j++)
		{
			// Check if this key is not already generated
			if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
			{
				continue;
			}
			else
			{
				// add this key to the index list
				getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
			}
			
			string returnType = collectionClassName;
			bool isUnique = false;
				
			//if (IsPrimaryKey(indexes[j]))
			if (indexes[j].IsUnique || indexes[j].IsPrimaryKey)
			{
				returnType = className;
				isUnique = true;
			}
			
			string returnTypeForComment = returnType.Replace("<", "&lt;").Replace(">", "&gt;");
	%>

		#region GetBy<%=GetKeysName(indexes[j].MemberColumns)%>
					
		/// <summary>
		/// 	Gets rows from the datasource based on the <%=indexes[j].Name%> index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	<% for (int i = 0; i < indexes[j].MemberColumns.Count; i++) { %>
		/// <param name="<%= GetFieldName(indexes[j].MemberColumns[i])%>"><%= GetColumnXmlComment(indexes[j].MemberColumns[i],2)%></param>
	<% } %>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="<%=returnTypeForComment%>"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override <%=returnType%> GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(TransactionManager transactionManager, <%= GetFunctionHeaderParameters(indexes[j].MemberColumns) %>, int start, int pageLength, out int count)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + GetProcNameForGetByIX( ProcedurePrefix + commandStem + SelectSuffix + "By", indexes[j].MemberColumns ) %>");
			
			<% foreach(ColumnSchema col in indexes[j].MemberColumns) { %>
				database.AddInParameter(command, "p_<%=GetPropertyName(col)%>", DbType.<%=col.DataType%>, <%=GetFieldName(col)%>);
			<% } %>
			
			IDataReader reader = null;
			<%=collectionClassName%> tmp = new <%=collectionClassName%>();
			try
			{
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, command);
				}
				else
				{
					reader = Utility.ExecuteReader(database, command);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = ( int )reader.GetDecimal(0);
					}
				}
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
			}
			
			<% if (isUnique) { %>
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			<% } else { %>
			return tmp;
			<% } %>	
			
			//return rows;
		}
		
		#endregion

<%		}//endfor %>
	#endregion Get By Index Functions
<%	}//end if includegetlistbyix
	
		/*---------------------------------------------------------------------------------
								Insert
							Single Key, Identity
	  	-------------------------------------------------------------------------------*/
	
	if (IncludeInsert) 
	{
%>

		#region Insert Functions
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the <%=className%> object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, <%=listName%><<%=className%>> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "<%=SourceTable.Name%>";
			
			DataTable dataTable = new DataTable();
			<% 	for (int i = 0; i < cols.Count; i++) { %>
			DataColumn col<%=i%> = dataTable.Columns.Add("<%=cols[i].Name%>", typeof(<%=GetCSType(cols[i], false)%>));
			col<%=i%>.AllowDBNull = <%= cols[i].AllowDBNull.ToString().ToLower()%>;		
			<% } %>
			
			<% 
			for (int i = 0; i < cols.Count; i++) { %>
			bulkCopy.ColumnMappings.Add("<%=cols[i].Name%>", "<%=cols[i].Name%>");
			<% } %>
			
			foreach(<%=className%> entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				<% for (int i = 0; i < cols.Count; i++) { %>
				
				<% if (cols[i].AllowDBNull && !IsCSReferenceDataType(cols[i])  ){ %>
					row["<%=cols[i].Name %>"] = entity.<%=GetPropertyName(cols[i])%>.HasValue ? (object) entity.<%=GetPropertyName(cols[i])%>  : System.DBNull.Value;
				<% } else { %>
					row["<%=cols[i].Name %>"] = entity.<%= GetPropertyName(cols[i]) %>;
				<% } // end if %>		
							
				<% } // end for %>
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(<%=className%> entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a <%=className%> object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity"><%=className%> object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the <%=className%> object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, <%=className%> entity)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + InsertSuffix %>");
			
			<%			
			for (int i = 0; i < cols.Count; i++)		
			{ 	
				if (RowVersion != null && cols[i] == RowVersion) { %>
			//database.AddOutParameter(command, "p_<%=GetPropertyName(RowVersion)%>", DbType.<%= RowVersion.DataType.ToString() %>, 8);
				<% } else if ( IsComputed(cols[i]) || IsIdentityColumn(cols[i]) ) { %>
			//database.AddOutParameter(command, "p_<%=GetPropertyName(cols[i])%>", DbType.<%= cols[i].DataType.ToString() %>, <%= cols[i].Size.ToString() %>);
				<%} else {
					if (cols[i].AllowDBNull && !IsCSReferenceDataType(cols[i])  )
					{ 
			// String types are nullable, but all other types are value types %>
			database.AddInParameter(command, "p_<%=GetPropertyName(cols[i])%>", DbType.<%= cols[i].DataType.ToString() %>, (entity.<%=GetPropertyName(cols[i])%>.HasValue ? (object) entity.<%=GetPropertyName(cols[i])%>  : System.DBNull.Value));
					<% } else {%>
			database.AddInParameter(command, "p_<%=GetPropertyName(cols[i])%>", <%= GetDbType(cols[i]) %>, entity.<%=GetPropertyName(cols[i])%> );
				<% }
				}		
			} // end for 
			
			%>
			
			int results = 0;
			bool commitTransaction = false;

			if (transactionManager == null)
			{
				commitTransaction = true;
				transactionManager = new TransactionManager(this._connectionString, _providerInvariantName);
				transactionManager.BeginTransaction();
			}
			
			// Do the insert
			results = Utility.ExecuteNonQuery(transactionManager, command);
			
			if (commitTransaction) transactionManager.Commit();
			
			<% 			
			// synchronise utility properties for updatable primary key
			for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)		
			{
				if( !IsComputed(SourceTable.PrimaryKey.MemberColumns[i]) && !IsIdentityColumn(SourceTable.PrimaryKey.MemberColumns[i]) )
				{%>
			entity.Original<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%> = entity.<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%>;
				<%}
			}
			
			%>
			
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}	
		#endregion

<%
	}//end if

		/*---------------------------------------------------------------------------------
								Update
	  	-------------------------------------------------------------------------------*/
		
	if (IncludeUpdate) 
	{
		
%>	
		#region Update Functions
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity"><%=className%> object to update.</param>
		/// <remarks>
		///		After updating the datasource, the <%=className%> object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, <%=className%> entity)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=owner + ProcedurePrefix + commandStem + UpdateSuffix %>");
			
			<%		
			//Debugger.Break();
			for (int i = 0; i < cols.Count; i++)		
			{ 	
				/*if (IsComputed(cols[i]) && cols[i] != RowVersion)
				{
					if (cols[i].NativeType == "numeric" )
					{%>
			database.AddParameter(command, "p_<%=GetPropertyName(cols[i])%>", SqlDbType.<%= cols[i].DataType.ToString() %>, <%= cols[i].Size.ToString() %>, ParameterDirection.Output, true, <%= cols[i].Precision.ToString() %>, <%= cols[i].Scale.ToString() %>, null, DataRowVersion.Default, null);
			<%
					}
					else
					{%>
			database.AddOutParameter(command, "p_<%=GetPropertyName(cols[i])%>", DbType.<%= cols[i].DataType.ToString() %>, <%= cols[i].Size.ToString() %>);
			
				<%	}
				}
				else*/
				{
					if (cols[i].AllowDBNull && !IsCSReferenceDataType(cols[i])  )
					{ 
						// String types are nullable, but all other types are value types%>
			database.AddInParameter(command, "p_<%=GetPropertyName(cols[i])%>", DbType.<%= cols[i].DataType.ToString() %>, (entity.<%=GetPropertyName(cols[i])%>.HasValue ? (object) entity.<%=GetPropertyName(cols[i])%> : System.DBNull.Value) );
					<%}
					else				
				{%>
			database.AddInParameter(command, "p_<%=GetPropertyName(cols[i])%>", <%=GetDbType(cols[i]) %>, entity.<%=GetPropertyName(cols[i])%> );
				<%}
				}
				if (cols[i].IsPrimaryKeyMember && !IsComputed(cols[i]) && !IsIdentityColumn(cols[i]) && cols[i] != RowVersion)
				{%>
			database.AddInParameter(command, "p_Original<%=GetPropertyName(cols[i])%>", DbType.<%= cols[i].DataType.ToString() %>, entity.Original<%=GetPropertyName(cols[i])%>);
				<%}
			}
			
			if (RowVersion != null)
			{%>
			database.AddOutParameter(command, "p_Returned<%=GetPropertyName(RowVersion)%>", DbType.<%= RowVersion.DataType.ToString() %>, 8);
			<%}%>
			
			int results = 0;
			bool commitTransaction = false;

			if (transactionManager == null)
			{
				commitTransaction = true;
				transactionManager = new TransactionManager(this._connectionString, _providerInvariantName);
				transactionManager.BeginTransaction();
			}
						
			results = Utility.ExecuteNonQuery(transactionManager, command);
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
		<%
		if (RowVersion != null)
		{%>
			if (results == 0)
			{
				throw new DBConcurrencyException("Concurrency exception");
			}
		
			entity.<%=GetPropertyName(RowVersion)%> = (<%=RowVersion.SystemType.ToString()%>)database.GetParameterValue(command, "<%=ParameterPrefix%>Returned<%=GetPropertyName(RowVersion)%>");
		<%} %>
		
			// get the updatable columns
			
			DbCommand command2 = database.GetStoredProcCommand("<%= ProcedurePrefix + commandStem + SelectSuffix + "By" + GetKeysName(SourceTable.PrimaryKey.MemberColumns) %>");
			<% for(int j=0; j<SourceTable.PrimaryKey.MemberColumns.Count; j++)
			{%>
			database.AddInParameter(command2, "p_<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[j])%>", DbType.<%= SourceTable.PrimaryKey.MemberColumns[j].DataType.ToString() %>, entity.<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[j])%>);
			<%}%>

			IDataReader reader = Utility.ExecuteReader(transactionManager, command2);
			
			if (reader.Read())
			{
		<%
		// Update identity or computed columns
		for (int i = 0; i < cols.Count; i++)		
		{
			if (IsComputed(cols[i]) && cols[i] != RowVersion)
			{
					string castTo = String.Empty;
				
					if (cols[i].NativeType == "xml") 
						castTo = typeof(System.String).ToString();
					else
						castTo = cols[i].SystemType.ToString();				
				%>
				entity.<%=GetPropertyName(cols[i])%> = (<%=castTo%>)reader["<%=GetPropertyName(cols[i])%>"];
			<%}
		
			// if in the PK, update the original
			if (cols[i].IsPrimaryKeyMember && !IsComputed(cols[i]) && !IsIdentityColumn(cols[i]) && cols[i] != RowVersion)
			{%>
			entity.Original<%=GetPropertyName(cols[i])%> = entity.<%=GetPropertyName(cols[i])%>;
			<%}
			
		}%>
			}
		
			reader.Close();
			
			if (commitTransaction) transactionManager.Commit();
						
			entity.AcceptChanges();
	
			return Convert.ToBoolean(results);
		}
			
		#endregion
		
<%	}//end if %>
<%

/*---------------------------------------------------------------------------------
							CUSTOM STORED PROCEDURES
  -------------------------------------------------------------------------------*/%>
<% if (IncludeCustoms) { %>
		#region Custom Methods
	
<% 
	string prefix = string.Format(CustomProcedureStartsWith, SourceTable.Name, ProcedurePrefix);
	DebugWriteLine("Looking for stored procedures matching prefix: "+prefix);
	foreach(CommandSchema command in SourceTable.Database.Commands)
	{
		//Response.WriteLine("// " + command.Name);
	
		// If the stored procedure is targeting the current table.
		if (command.Name.StartsWith(prefix))
		{
			string methodName = command.Name.Substring(prefix.Length);
			string returnType = "void";
						
			Trace.WriteLineIf(IsMatching(command, SourceTable), SourceTable.Name + "No proc by that name");
			if (IsMatching(command, SourceTable))
			{
				returnType = collectionClassName;
			}
			else	// Return a basic DataSet
			{
				returnType = CustomNonMatchingReturnType.ToString();
			}
			
			string returnTypeForComment = returnType.Replace("<", "&lt;").Replace(">", "&gt;");
%>
		#region <%=command.Name%>
					
		/// <summary>
		///	This method wrap the '<%=command.Name%>' stored procedure. 
		/// </summary>	<%=TransformStoredProcedureInputsToMethodComments(command.InputParameters) + TransformStoredProcedureOutputsToMethodComments(command.AllOutputParameters)%>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="<%=returnTypeForComment%>"/> instance.</returns>
		public override <%=returnType%> <%=methodName%>(TransactionManager transactionManager, int start, int pageLength <%=TransformStoredProcedureInputsToMethod(true, command.InputParameters) + TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters)%>)
		{
			OracleDatabase database = new OracleDatabase(this._connectionString);
			DbCommand command = database.GetStoredProcCommand("<%=command.Name%>");
			
			<% foreach(ParameterSchema col in command.InputParameters)	{%>			
				database.AddInParameter(command, "p_<%=GetPropertyName(col)%>", <%=GetDbType(col)%>,  <%=GetFieldName(col)%> );
			<%}%>
	
			<% foreach(ParameterSchema col in command.AllOutputParameters)	{ %>
				database.AddParameter(command, "p_<%=GetPropertyName(col)%>", DbType.<%=col.DataType.ToString()%>, ParameterDirection.InputOutput, "", DataRowVersion.Current,<%=GetFieldName(col)%>);
			<%}%>
			
			<%
			//Set up the output params
			StringBuilder outputValues = new StringBuilder();
			
			foreach(ParameterSchema outParam in command.AllOutputParameters)
			{
				outputValues.AppendFormat("\t\t\t{0} =  Utility.GetParameterValue<{1}>(command.Parameters[\"{3}{2}\"]);\n",GetFieldName(outParam), GetCSType(outParam), GetPropertyName(outParam), ParameterPrefix); 
			}
			%>
			<% if (returnType == "DataSet") { %>
			DataSet ds = null;
			
			if (transactionManager != null)
			{	
				ds = database.ExecuteDataSet(command, transactionManager.TransactionObject);
			}
			else
			{
				ds = database.ExecuteDataSet(command);
			}
			
<%=outputValues.ToString()%>
			
			return ds;	
			<% } else if (returnType == "IDataReader") { %>
			IDataReader dr = null;
			
			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,command);
			}
			else
			{
				dr = Utility.ExecuteReader(database, command);
			}
			//These won't get set until the data reader is closed.  So Comment them out.			
			/*
<%=outputValues.ToString()%>
			*/

			return dr;
			<% } else if (returnType == "void") { %>
			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(command, transactionManager.TransactionObject);
			}
			else
			{
				Utility.ExecuteNonQuery(database, command);
			}
			
<%=outputValues.ToString()%>
				
				return;
			<% } else if 	(returnType == collectionClassName) { %>
			IDataReader reader = null;

			if (transactionManager != null)
			{	
				reader = Utility.ExecuteReader(transactionManager, command);
			}
			else
			{
				reader = Utility.ExecuteReader(database, command);
			}			
			
			//Create Collection
			<% if (returnType == collectionClassName) {%>
				<%=collectionClassName%> rows = new <%=collectionClassName%>();
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
<%=outputValues.ToString()%>
				return rows;
				<%} else if (returnType != "void"){%>
				<%=returnType%> tmp = null;
				try
				{
					reader.Read();
					tmp = (<%=returnType%>)reader[0];
				}finally {reader.Close();}
<%=outputValues.ToString()%>
				return tmp;
				<% } %>		
			<% } %>
		}
		#endregion
<%
		}
	}
%>
		#endregion
<% } // endif IncludeCustoms %>
	}//end class
} // end namespace
