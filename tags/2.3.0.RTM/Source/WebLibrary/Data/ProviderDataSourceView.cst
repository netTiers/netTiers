<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Template description here." ResponseEncoding="UTF-8"  NoWarn="0108,0618,1572,1573,1574,0162,2002" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System" %>



<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Root Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="BusinessLogicLayerNameSpace" Type="System.String" Category="Namespaces" Description="The sub namespace that is added to the root namespace for the entities." Default="" Optional="true" %>


<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true getlist procedures will be generated." %>	
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true getlist statements will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="CRUD Options" Description="If true find statements will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true select statements will be generated for any many to many relationship." %>

<%


	string name = SourceTable.Name;
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	IndexSchemaCollection indexes = SourceTable.Indexes;
	
	string className = GetClassName(SourceTable.Name);
	string collectionClassName = GetCollectionClassName(SourceTable.Name);
	string collectionClassNameForComment = collectionClassName.Replace("<", "&lt;").Replace(">", "&gt;");
	string baseProviderName = GetProviderBaseName(SourceTable.Name);
	ArrayList methodNames = new ArrayList();
	ArrayList manyToManyMethodNames = new ArrayList();
	
	if(IncludeGetList){
		methodNames.Add("GetAll");
		methodNames.Add("GetPaged");
	}
	if(IncludeFind){
		methodNames.Add("Find");
	}
	if(IncludeGetListByFK){
		for(int j = 0; j < fkeys.Count; j++){
			methodNames.Add("GetBy" + GetKeysName(fkeys[j].ForeignKeyMemberColumns));
		}
	}
	if(IncludeGetListByIX){	
		for(int j = 0; j < indexes.Count; j++){
			methodNames.Add("GetBy" + GetKeysName(indexes[j].MemberColumns));
		}
	}
	
	
%>
<script runat="template">

private string WriteIndexSelectStatements(string tableName, IndexSchemaCollection indexes){
		StringBuilder sb = new StringBuilder();

		//primaryKey
		sb.Append("\t\t\t\tcase " + tableName +"SelectMethod.GetBy"+GetKeysName(SourceTable.PrimaryKey.MemberColumns)+":"+Environment.NewLine);
		sb.Append(WriteParameterStatements(SourceTable.PrimaryKey.MemberColumns, tableName));
		sb.Append("\t\t\t\t\t"+"this._totalRowCount = 1;"+Environment.NewLine);
		sb.AppendFormat("\t\t\t\t\t{0} data = DataRepository.{1}.GetBy{2}({3},startIndex, pageSize);{4}",
					GetClassName(tableName),
					GetProviderName(tableName),
					GetKeysName(SourceTable.PrimaryKey.MemberColumns),
					GetFunctionCallParameters(SourceTable.PrimaryKey.MemberColumns),
					Environment.NewLine);
		sb.Append("\t\t\t\t\tbreak;"+Environment.NewLine);
		foreach(IndexSchema indexSchema in indexes){
			
			if(indexSchema.Name == SourceTable.PrimaryKey.Name)
				continue;
			//case statemet
			sb.Append("\t\t\t\tcase " + tableName +"SelectMethod.GetBy"+GetKeysName(indexSchema.MemberColumns)+":"+Environment.NewLine);
			//method parameters
			sb.Append(WriteParameterStatements(indexSchema.MemberColumns, tableName));
			
			//totalRowCount
			sb.Append(WriteTotalRowCountStatement(indexSchema.MemberColumns, tableName));
			//return data string
			sb.Append(WriteGetByStatement(indexSchema.MemberColumns, tableName));
			
			sb.Append("\t\t\t\t\tbreak;"+Environment.NewLine);
			
		}
		return sb.ToString();
			
}
private string WriteFKSelectStatements(string tableName,TableKeySchemaCollection fk){
	StringBuilder sb = new StringBuilder();
	foreach(TableKeySchema tableKey in fk){
		sb.Append("\t\t\t\tcase " + tableName +"SelectMethod.GetBy"+GetKeysName(tableKey.ForeignKeyMemberColumns)+":"+Environment.NewLine);
		sb.Append(WriteParameterStatements(tableKey.ForeignKeyMemberColumns,tableName));
		sb.Append(WriteTotalRowCountStatement(tableKey.ForeignKeyMemberColumns, tableName));
		sb.Append(WriteGetByStatement(tableKey.ForeignKeyMemberColumns, tableName));
		sb.Append("\t\t\t\t\tbreak;"+Environment.NewLine);
	}
	return sb.ToString();
	
}
private string WriteManyToManySelectStatements(){
		StringBuilder sb = new StringBuilder();
		TableSchema primaryTable = SourceTable;
		
		foreach(TableKeySchema key in SourceTable.PrimaryKeys)
		{
			// Check that the key is related to a junction table
			if ( IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key))
			{
				TableSchema junctionTable = key.ForeignKeyTable;
				
				// Search for the other(s) key(s) of the junction table' primary key
				foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
				{				
					if ( IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
					{
						TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
						string functionname = GetManyToManyName(junctionTableKey, GetCleanName(junctionTable.Name));
						sb.AppendFormat("\t\t\t\tcase {0}SelectMethod.GetBy{1}:{2}  ",primaryTable.Name, functionname, Environment.NewLine);
						//parameters
						foreach(TableKeySchema table in secondaryTable.PrimaryKeys)
						{
							foreach(ColumnSchema column in table.PrimaryKey.MemberColumns)
							{
								sb.AppendFormat("\t\t\t\t\t{0} {1} = ({0})GetParameterValue(\"{1}\");{2}", 
												GetCSType(column), 
												GetPrivateName(column),
												Environment.NewLine	);
							}
						}
						//totalrowcount
						sb.AppendFormat("\t\t\t\t\tthis._totalRowCount = DataRepository.{0}.GetBy{1}({2}).Count;{3}",
							GetProviderName(primaryTable.Name),
							functionname,
							GetFunctionCallParameters(junctionTableKey.ForeignKeyMemberColumns),
							Environment.NewLine);
							
						//results
						sb.AppendFormat("\t\t\t\t\tresults = DataRepository.{0}.GetBy{1}({2}, startIndex, pageSize);{3}",
										GetProviderName(primaryTable.Name),
										functionname,
										GetFunctionCallParameters(junctionTableKey.ForeignKeyMemberColumns),
										Environment.NewLine);
					}
					
				}
			}
		}
		sb.Append("\t\t\t\tbreak;");
		return sb.ToString();
		
	
}

private string WriteParameterStatements(MemberColumnSchemaCollection memberColumns, string tableName){
	StringBuilder sb = new StringBuilder();
	foreach(MemberColumnSchema memberSchema in memberColumns){
				sb.AppendFormat("\t\t\t\t\t{0} {1} = ({0})GetParameterValue(\"{1}\");{2}", 
				GetCSType(memberSchema), 
				GetPrivateName(memberSchema),
				Environment.NewLine	);
	}
	return sb.ToString();
	
}

private string WriteTotalRowCountStatement(MemberColumnSchemaCollection memberColumns, string tableName){
	StringBuilder sb = new StringBuilder();
	sb.AppendFormat("\t\t\t\t\tthis._totalRowCount = DataRepository.{0}.GetBy{1}({2}).Count;{3}",
					GetProviderName(tableName),
					GetKeysName(memberColumns),
					GetFunctionCallParameters(memberColumns),
					Environment.NewLine);

	return sb.ToString();
}
private string WriteGetByStatement(MemberColumnSchemaCollection memberColumns, string tableName){
	StringBuilder sb = new StringBuilder();
	sb.AppendFormat("\t\t\t\t\tresults = DataRepository.{0}.GetBy{1}({2}, startIndex, pageSize);{3}",
					GetProviderName(tableName),
					GetKeysName(memberColumns),
					GetFunctionCallParameters(memberColumns),
					Environment.NewLine);
	return sb.ToString();
		
}
</script>

#region Using Directives
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing.Design;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.Design.WebControls;
using System.Web.UI.WebControls;
using <%= NameSpace %><%if(BusinessLogicLayerNameSpace != string.Empty)%>.<%= BusinessLogicLayerNameSpace %>;
using <%= NameSpace %><%if(DALNameSpace != string.Empty)%>.<%= DALNameSpace %>;
#endregion

namespace <%= NameSpace %>.DataSourceControls
{
	public class <%= name %>DataView : DataSourceView, IStateManager
	{
		#region ViewState Maintenance
        private bool isTrackingViewState = true;
        public bool IsTrackingViewState
        {
            get
            {
                return isTrackingViewState;
            }
            set
            {
                this.isTrackingViewState = value;
            }
        }
        public void TrackViewState()
        {
            if (_selectParameters != null)
            {
                ((IStateManager)_selectParameters).TrackViewState();
            }
        }
        public object SaveViewState()
        {
            Pair p = new Pair();
            if (_selectParameters != null)
            {
                p.First = ((IStateManager)_selectParameters).SaveViewState();
                return p;
            }
            return null;
        }
        public void LoadViewState(object state)
        {
            if (state != null)
            {
                Pair p = (Pair)state;
                if (p.First != null)
                {
                    ((IStateManager)SelectParameters).LoadViewState(p.First);
                }
            }

        }
        #endregion

		private <%= name %>DataSource _owner;
        private HttpContext _context;
		private int _totalRowCount = 0;
        public <%= name %>DataView(HttpContext ctx, <%= name %>DataSource owner, string viewName)
            : base(owner, viewName)
        {
            this._owner = owner;
            this._context = ctx;

        }
		#region Properties
        public override bool CanPage
        {
            get
            {
                return true;
            }
        }

        public override bool CanSort
        {
            get
            {
                return true;
            }
        }
        
        public override bool CanRetrieveTotalRowCount
        {
            get
            {
                return true;
            }
        }
		
		private bool _enablePaging = true;
        public bool EnablePaging
        {
            get
            {
                return this._enablePaging;
            }
            set
            {
                this._enablePaging = value;
                this.OnDataSourceViewChanged(EventArgs.Empty);
            }
        }

		private ParameterCollection _selectParameters = null;
        public ParameterCollection SelectParameters
        {
            get
            {
                if (_selectParameters == null)
                {
                    _selectParameters = new ParameterCollection();
                    _selectParameters.ParametersChanged += new EventHandler(OnParametersChanged);
                    if (IsTrackingViewState)
                    {
                        ((IStateManager)_selectParameters).TrackViewState();
                    }
                }
                return _selectParameters;
            }
        }
		
        #endregion
		protected override IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
        {
            
            arguments.AddSupportedCapabilities(DataSourceCapabilities.Page);
            arguments.AddSupportedCapabilities(DataSourceCapabilities.Sort);
            arguments.AddSupportedCapabilities(DataSourceCapabilities.RetrieveTotalRowCount);
			<%= collectionClassName %> results = null;
			int startIndex = 0;
            int pageSize = Int32.MaxValue;
            //set the startIndex and Page size if we are paging
            if (this.EnablePaging)
            {
                startIndex = arguments.StartRowIndex;
                pageSize = arguments.MaximumRows;
                _context.Trace.Write("CustomersDataView", "StartRowIndex " + arguments.StartRowIndex.ToString());
                _context.Trace.Write("CustomersDataView", "Page Size " + arguments.MaximumRows.ToString());
            }
			IOrderedDictionary orderedParameters = GetParameterOrderedDictionary(this.SelectParameters);
            ObjectDataSourceSelectingEventArgs selectingEventArgs = new ObjectDataSourceSelectingEventArgs(orderedParameters, arguments, true);
            this.OnSelecting(selectingEventArgs);
            if (selectingEventArgs.Cancel)
            {
                return null;
            }
            //if caching is turned on
            if (_owner.EnableCaching)
            {
                //get cached datasource
                CachedDataSource<<%= className %>> data = _owner.GetDataFromCache(startIndex, pageSize);
                //if there is cached data use it and the record count returned and
                if (results != null)
                {
                    arguments.TotalRowCount = data.VirtualRecordCount;
                    results = data.Data;
                }
            }
            //data not retrieved from cache
            //get from database
            if (results == null)
            {
                results = GetSelectData(_owner.SelectMethod, startIndex,
				pageSize);
                arguments.TotalRowCount = this._totalRowCount;
            }
            this.OnSelected(new ObjectDataSourceStatusEventArgs(results,null,null));
            if (arguments.SortExpression != string.Empty)
            {
                
                results.Sort(arguments.SortExpression);
                
            }
            
            return results;
        }
		        private IOrderedDictionary GetParameterOrderedDictionary(ParameterCollection parameters)
        {
            IOrderedDictionary orderedParameters = new OrderedDictionary(StringComparer.OrdinalIgnoreCase);
            IDictionary parameterValues = parameters.GetValues(this._context, _owner);
            foreach (DictionaryEntry entry in parameterValues)
            {
                orderedParameters[entry.Key] = entry.Value;
            }
            return orderedParameters;
        }
        private object GetParameterValue(string p)
        {
            Parameter param = _selectParameters[p];

            if (param != null)
            {
                IOrderedDictionary paramValues = _selectParameters.GetValues(_context, _owner);
                return paramValues[param.Name];
            }
            return null;
        }

        #region Events

        protected static readonly object SelectingEvent = new object();
        public event ObjectDataSourceSelectingEventHandler Selecting
        {
            add
            {
                base.Events.AddHandler(SelectingEvent, value);
            }
            remove
            {
                base.Events.RemoveHandler(SelectingEvent, value);
            }
        }
        protected virtual void OnSelecting(ObjectDataSourceSelectingEventArgs e)
        {
            ObjectDataSourceSelectingEventHandler selectingEvent = base.Events[SelectingEvent] as ObjectDataSourceSelectingEventHandler;
            if (selectingEvent != null)
            {
                selectingEvent(this, e);
            }
        }
        /*
        private static readonly object InsertedEvent = new object();
        public event ObjectDataSourceStatusEventHandler Inserted
        {
            add
            {
                base.Events.AddHandler(InsertedEvent, value);
            }
            remove
            {
                base.Events.RemoveHandler(InsertedEvent, value);
            }
        }

        protected virtual void OnInserted(ObjectDataSourceStatusEventArgs e)
        {
            ObjectDataSourceStatusEventHandler insertedEvent = base.Events[InsertedEvent] as ObjectDataSourceStatusEventHandler;
            if (insertedEvent != null)
            {
                insertedEvent(this, e);
            }
        }

        protected static readonly object InsertingEvent = new object();
        public event ObjectDataSourceMethodEventHandler Inserting
        {
            add
            {
                base.Events.AddHandler(SelectingEvent, value);
            }
            remove
            {
                base.Events.RemoveHandler(SelectingEvent, value);
            }
        }
        protected virtual void OnInserting(ObjectDataSourceSelectingEventArgs e)
        {
            ObjectDataSourceMethodEventHandler insertingEvent = base.Events[SelectingEvent] as ObjectDataSourceMethodEventHandler;
            if (insertingEvent != null)
            {
                insertingEvent(this, e);
            }
        }
        */
        private static readonly object SelectedEvent = new object();
        public event ObjectDataSourceStatusEventHandler Selected
        {
            add
            {
                base.Events.AddHandler(SelectedEvent, value);
            }
            remove
            {
                base.Events.RemoveHandler(SelectedEvent, value);
            }
        }

        protected virtual void OnSelected(ObjectDataSourceStatusEventArgs e)
        {
            ObjectDataSourceStatusEventHandler selectedEvent = base.Events[SelectedEvent] as ObjectDataSourceStatusEventHandler;
            if (selectedEvent != null)
            {
                selectedEvent(this, e);
            }
        }
        protected void OnParametersChanged(object sender, EventArgs e)
        {
            this.OnDataSourceViewChanged(EventArgs.Empty);

        }

        #endregion
        

		
		private <%= collectionClassName %> GetSelectData(<%= name %>SelectMethod method,int startIndex, int pageSize)
        {

            TList<<%= className %>> results = null;
            
            switch (method)
			{
				<%if(IncludeGetList){%>
				case <%= className %>SelectMethod.GetAll:
                    this._totalRowCount = DataRepository.CustomersProvider.GetAll().Count;
                    results = DataRepository.<%= GetProviderName(name) %>.GetAll(startIndex, pageSize);
                    break;
				case <%= className %>SelectMethod.GetPaged:
					System.String getPagedWhereClause = (System.String)GetParameterValue("whereClause");
					System.String orderBy = (System.String)GetParameterValue("orderBy");
					results = DataRepository.<%= GetProviderName(name) %>.GetPaged(getPagedWhereClause, orderBy, startIndex, pageSize, out this._totalRowCount);
					break;
				<%} %>
				<%if(IncludeFind){%>
				case <%= className %>SelectMethod.Find:
                    System.String findWhereClause = (System.String)GetParameterValue("whereClause");
					this._totalRowCount = DataRepository.CustomersProvider.Find(findWhereClause).Count;
					results = DataRepository.<%= GetProviderName(name) %>.Find(findWhereClause, startIndex, pageSize);
                    break;
				<%} %>
				<% if(IncludeGetListByIX){ %>
<%= WriteIndexSelectStatements(name,indexes) %>
				<%} %>
				<% if(IncludeGetListByFK){%>
<%= WriteFKSelectStatements(name,fkeys) %>
				<%} %>
				<% if(IncludeManyToMany){%>
<%= WriteManyToManySelectStatements()%>
				<%} %>
				

            }
            if(_owner.EnableCaching){
                _owner.SaveDataToCache(new CachedDataSource<<%= className %>>(results,this._totalRowCount),startIndex,pageSize);
            }
            
            return results;
        }
		
    }
}

