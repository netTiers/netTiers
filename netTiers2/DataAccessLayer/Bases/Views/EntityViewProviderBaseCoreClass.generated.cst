<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Generates the EntityViewProviderBaseCore type." %>
<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Namespace." %>
#region Using Directives
using System;
using <%= BLLNameSpace %>;
#endregion

namespace <%= DALNameSpace %>.Bases
{
	/// <summary>
	/// Serves as the base class for objects that provide data access functionality.
	/// Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
	/// </summary>
	/// <typeparam name="Entity">The class of the business object being accessed.</typeparam>
	[Serializable]
	[CLSCompliant(true)]
	public abstract partial class EntityViewProviderBaseCore<Entity> : IEntityViewProvider<Entity>
		where Entity : new()
	{
		#region GetAll Methods

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> GetAll()
		{
			return GetAll(0, int.MaxValue);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks>Uses connection string object was created with.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> GetAll(int start, int pageLength)
		{
			return GetAll(null, start, pageLength);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> GetAll(TransactionManager transactionManager)
		{
			return GetAll(transactionManager, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual VList<Entity> GetAll(TransactionManager transactionManager, int start, int pageLength)
		{
			throw new NotSupportedException("GetAll not implemented.");
		}

		#endregion GetAll Methods

		#region Get Methods

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> Get()
		{
			return Get(null, null, null, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> Get(TransactionManager transactionManager)
		{
			return Get(transactionManager, null, null, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> Get(int start, int pageLength)
		{
			return Get(null, null, null, start, pageLength);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> Get(TransactionManager transactionManager, int start, int pageLength)
		{
			return Get(transactionManager, null, null, start, pageLength);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="whereClause">.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> Get(string whereClause, string orderBy)
		{
			return Get(whereClause, orderBy, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="whereClause">.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> Get(TransactionManager transactionManager, string whereClause, string orderBy)
		{
			return Get(transactionManager, whereClause, orderBy, 0, int.MaxValue);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public VList<Entity> Get(string whereClause, string orderBy, int start, int pageLength)
		{
			return Get(null, whereClause, orderBy, start, pageLength);
		}

		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual VList<Entity> Get(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength)
		{
			throw new NotSupportedException("Get not implemented.");
		}

		#endregion Get Methods
	}
}
