<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." Debug="False"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Entities Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Connection" Description="Tables of the system." %>

#region Using directives

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Configuration.Provider;
using System.Web.Configuration;
using System.Web;
using <%=NameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>
{
	/// <summary>
	/// This class represents the Data source repository and gives access to all the underlying providers.
	/// </summary>
	[CLSCompliant(true)]
	public sealed class DataRepository 
	{
		private static volatile NetTiersProvider _provider = null;
        private static volatile NetTiersProviderCollection _providers = null;
		private static volatile NetTiersServiceSection section = null;
        
        private static object SyncRoot = new object();
				
		private DataRepository()
		{
		}
		
		private static void LoadProviders()
        {
            // Avoid claiming lock if providers are already loaded
            if (_provider == null)
            {
                lock (SyncRoot)
                {
                    // Do this again to make sure _provider is still null
                    if (_provider == null)
                    {
						#region Find NetTiersServiceSection
						
                        // Get a reference to the <netTiersService> section
                        //NetTiersServiceSection section = (NetTiersServiceSection)WebConfigurationManager.GetSection("netTiersService");
						Configuration config = null;

						// load specific config file
						if ( HttpContext.Current != null )
						{
							config = WebConfigurationManager.OpenWebConfiguration("~");
						}
						else
						{
							string configFile = AppDomain.CurrentDomain.SetupInformation.ConfigurationFile.Replace(".config", "").Replace(".temp", "");
							config = ConfigurationManager.OpenExeConfiguration(configFile);
						}

						// find the specific NetTiersServiceSection for this assembly
						foreach ( ConfigurationSection temp in config.Sections )
						{
							if ( temp is NetTiersServiceSection )
							{
								section = temp as NetTiersServiceSection;
								break;
							}
						}
						
						#endregion Find NetTiersServiceSection

                        // Load registered providers and point _provider to the default provider
                        _providers = new NetTiersProviderCollection();

                        ProvidersHelper.InstantiateProviders(section.Providers, _providers, typeof(NetTiersProvider));
                        _provider = _providers[section.DefaultProvider];

                        if (_provider == null)
                        {
                            throw new ProviderException("Unable to load default NetTiersProvider");
                        }
                    }
                }
            }
        }

		/// <summary>
        /// Gets the provider.
        /// </summary>
        /// <value>The provider.</value>
        public static NetTiersProvider Provider
        {
            get { LoadProviders(); return _provider; }
        }

		/// <summary>
        /// Gets the provider collection.
        /// </summary>
        /// <value>The providers.</value>
        public static NetTiersProviderCollection Providers
        {
            get { LoadProviders(); return _providers; }
        }
		
		/// <summary>
		/// Creates a new <c cref="TransactionManager"/> instance from the current datasource.
		/// </summary>
		/// <returns></returns>
		public TransactionManager CreateTransaction()
		{
			return _provider.CreateTransaction();
		}

		#region Connections

		// dictionary of connection providers
		private static Dictionary<String, ConnectionProvider> _connections;

		/// <summary>
		/// Gets the dictionary of connection providers.
		/// </summary>
		public static Dictionary<String, ConnectionProvider> Connections
		{
			get
			{
				if ( _connections == null )
				{
					lock (SyncRoot)
                	{
						if (_connections == null)
						{
							_connections = new Dictionary<String, ConnectionProvider>();
		
							// add a connection provider for each configured connection string
							foreach( ConnectionStringSettings conn in WebConfigurationManager.ConnectionStrings )
							{
								_connections.Add(conn.Name, new ConnectionProvider(conn.Name));
							}
						}
					}
				}

				return _connections;
			}
		}

		/// <summary>
		/// Adds the specified connection string to the map of connection strings.
		/// </summary>
		/// <param name="connectionStringName">The connection string name.</param>
		/// <param name="connectionString">The provider specific connection information.</param>
		public static void AddConnection(String connectionStringName, String connectionString)
		{
			lock (SyncRoot)
            {
				Connections.Remove(connectionStringName);
				ConnectionProvider connection = new ConnectionProvider(connectionStringName, connectionString);
				Connections.Add(connectionStringName, connection);
			}
		}

		/// <summary>
		/// Provides ability to switch connection string at runtime.
		/// </summary>
		public sealed class ConnectionProvider
		{
			private NetTiersProvider _provider;
			private NetTiersProviderCollection _providers;
			private String _connectionStringName;
			private String _connectionString;

			/// <summary>
			/// Initializes a new instance of the ConnectionProvider class.
			/// </summary>
			/// <param name="connectionStringName">The connection string name.</param>
			public ConnectionProvider(String connectionStringName)
			{
				_connectionStringName = connectionStringName;
			}

			/// <summary>
			/// Initializes a new instance of the ConnectionProvider class.
			/// </summary>
			/// <param name="connectionStringName">The connection string name.</param>
			/// <param name="connectionString">The provider specific connection information.</param>
			public ConnectionProvider(String connectionStringName, String connectionString)
			{
				_connectionString = connectionString;
				_connectionStringName = connectionStringName;
			}

			/// <summary>
			/// Gets the provider.
			/// </summary>
			public NetTiersProvider Provider
			{
				get { LoadProviders(); return _provider; }
			}

			/// <summary>
			/// Gets the provider collection.
			/// </summary>
			public NetTiersProviderCollection Providers
			{
				get { LoadProviders(); return _providers; }
			}

			/// <summary>
			/// Instantiates the configured providers based on the supplied connection string.
			/// </summary>
			private void LoadProviders()
			{
				DataRepository.LoadProviders();

				// Avoid claiming lock if providers are already loaded
				if ( _providers == null )
				{
					lock ( SyncRoot )
					{
						// Do this again to make sure _provider is still null
						if ( _providers == null )
						{
							// apply connection information to each provider
							for ( int i = 0; i < section.Providers.Count; i++ )
							{
								section.Providers[i].Parameters["connectionStringName"] = _connectionStringName;
								// remove previous connection string, if any
								section.Providers[i].Parameters.Remove("connectionString");

								if ( !String.IsNullOrEmpty(_connectionString) )
								{
									section.Providers[i].Parameters["connectionString"] = _connectionString;
								}
							}

							// Load registered providers and point _provider to the default provider
							_providers = new NetTiersProviderCollection();

							ProvidersHelper.InstantiateProviders(section.Providers, _providers, typeof(NetTiersProvider));
							_provider = _providers[section.DefaultProvider];
						}
					}
				}
			}
		}

		#endregion Connections

		#region "Static properties"
		
		<% foreach(TableSchema SourceTable in SourceTables) { 
			string className = GetClassName(SourceTable.Name);
			string providerName = GetProviderName(SourceTable.Name);
			string providerBaseName = GetProviderBaseName(SourceTable.Name);
		%>
		
		
		#region "<%=providerName%>"
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="<%=className%>"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public /*new*/ static <%=providerBaseName%> <%=providerName%>
		{
			get 
			{
				LoadProviders();
				return _provider.<%=providerName%>;
			}
		}
		
		#endregion
		
		<%}%>
		
		<% foreach(ViewSchema SourceView in SourceViews) { 
			string className = GetClassName(SourceView.Name);
			string providerName = GetProviderName(SourceView.Name);
			string providerBaseName = GetProviderBaseName(SourceView.Name);
		%>			
		
		
		#region "<%=providerName%>"
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="<%=className%>"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public /*new*/ static <%=providerBaseName%> <%=providerName%>
		{
			get 
			{
				LoadProviders();
				return _provider.<%=providerName%>;
			}
		}
		
		#endregion
		<%}%>
		
		#endregion
		
	}
}
