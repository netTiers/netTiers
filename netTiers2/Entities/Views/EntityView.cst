<%--
 * $Id: EntityView.cst,v 1.2 2006/01/23 13:08:05 jroland Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Description="Business Object template." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Object Namespace." %>
<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Data" Description="View Object should be based on." %>
<%
	string className = GetClassName(SourceView.Name);
	string abstractClassName = GetAbstractClassName(SourceView.Name);

%>
#region Using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;

#endregion

namespace <%=NameSpace%>
{	
	///<summary>
	/// <% if(SourceView.Description.Length == 0 ) {%>An object representation of the '<%=SourceView.Name%>' view. [No description found in the database]<%} else {Response.Write(GetColumnXmlComment(SourceView,1));}%>	
	///</summary>
	/// <remarks>
	/// </remarks>	
	public partial class <%=className%>: <%=abstractClassName%>
	{
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=className%>"/> instance.
		///</summary>
		public <%=className%>():base(){}	
		
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<% for (int x=0; x < SourceView.Columns.Count; x++) { %>
		///<param name="<%=GetPrivateName(SourceView.Columns[x].Name) %>"><%=SourceView.Columns[x].Description%></param>
		<% } %>
		public <%=className%>(<% for (int x=0; x < SourceView.Columns.Count; x++) { %><%= GetCSType(SourceView.Columns[x]) %> <%= GetPrivateName(SourceView.Columns[x].Name) %><%if (x < SourceView.Columns.Count -1){%>, <%} } // end for %>)
			:base(<% for (int x=0; x < SourceView.Columns.Count; x++) { %><%= GetPrivateName(SourceView.Columns[x].Name) %><%if (x < SourceView.Columns.Count -1){%>, <%} } // end for %>){}
		
		#endregion
	}
}
