<%--
 * $Id: EntityInstance.cst,v 1.3 2006/02/17 23:57:16 bgjohnso Exp $
 * Last modified by $Author: bgjohnso $
 * Last modified at $Date: 2006/02/17 23:57:16 $
 * $Revision: 1.3 $
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Description="Business Object template." ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Object Namespace." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>
<%
	string className = GetClassName(SourceTable.Name);	
	string abstractClassName = GetAbstractClassName(SourceTable.Name);
	
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
%>
#region Using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;

#endregion

namespace <%=NameSpace%>
{	
	///<summary>
	/// <% if(SourceTable.Description.Length == 0 ) {%>An object representation of the '<%=SourceTable.Name%>' table. [No description found the database]<%} else {Response.Write(GetColumnXmlComment(SourceTable,1));}%>	
	///</summary>
	/// <remarks>
	/// This file is generated once and will never be overwritten.
	/// </remarks>	
	public partial class <%=className%>:  <%=abstractClassName%>
	{		
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=className%>"/> instance.
		///</summary>
		public <%=className%>():base(){}	
		<% if(colsUpdatable.Count > 0) { %>
		///<summary>
		/// Creates a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdatable.Count; x++) { %>
		///<param name="<%=GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>"><%=GetColumnXmlComment(colsUpdatable[x],2)%></param>
		<% } %>
		public <%=className%>(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetCSType(colsUpdatable[x]) %> <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %><%WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <% WrapLine(3); } }// end for %>):
			base(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %><%WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <% WrapLine(3); } }// end for %>)
		{}
		<% } %>
		
		#endregion
		/// <summary>
      /// Adds custom validation rules to this object.
      /// </summary>
      protected override void AddValidationRules()
      {
         base.AddValidationRules();

         //Add custom validation rules
      }
	}
}
