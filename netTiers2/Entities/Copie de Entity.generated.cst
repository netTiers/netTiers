<%--
 * $Id: Entity.generated.cst,v 1.2 2006/01/26 09:29:19 jroland Exp $
 * Last modified by $Author: jroland $
 * Last modified at $Date: 2006/01/26 09:29:19 $
 * $Revision: 1.2 $

	Written By:
		Ryan Hurdon
	Description:
		This script will create data access layer classes. It requires stored procedures
		created from the procedure script. So for this code to work properly you need to run
		the procedure template, the rowobject template, and the rowcollection template on
		the same table. You can also optionally use the main script which will run them all
		for you.
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Business object base class"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>

<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>

<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
	
<%@ Property Name="UsePartialClass" Type="System.Boolean" Default="true" Category="General" Description="Indicates if partial class should be generated." %>
	
<%
	//if (SourceTables == null) SourceTables = new SchemaExplorer.TableSchemaCollection();
	string name;
		
	// Name of the Abstract Class
	string className = GetClassName(SourceTable.Name);
	string collectionClassName = GetCollectionClassName(SourceTable.Name);
	string structName = GetStructName(SourceTable.Name);
	string abstractClassName = UsePartialClass ? className : GetAbstractClassName(SourceTable.Name);

	string constructorAccessModifier = UsePartialClass ? "public" : "protected";


	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
		
	//Provides information about the indexes contained in the table. 
	//IndexSchemaCollection indexes = SourceTable.Indexes;
		
	ColumnSchemaCollection colsUpdatable = new ColumnSchemaCollection();
	foreach (ColumnSchema column in cols)
	{
		if ( ! IsIdentityColumn(column) && ! IsComputed(column) )
			colsUpdatable.Add(column);
	}
%>
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : <%=DateTime.Now.ToLongDateString()%>
	Important: Do not modify this file. Edit the file <%=className%>.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace <%=NameSpace%>
{
	#region <%=className%>EventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="<%=className%>"/> object.
	/// </remarks>
	public class <%=className%>EventArgs : System.EventArgs
	{
		private <%=className%>Column column;
		
		///<summary>
		/// Initalizes a new Instance of the <%=className%>EventArgs class.
		///</summary>
		public <%=className%>EventArgs(<%=className%>Column column)
		{
			this.column = column;
		}
		
		
		///<summary>
		/// The <%=className%>Column that was modified, which has raised the event.
		///</summary>
		///<value cref="<%=className%>Column" />
		public <%=className%>Column Column { get { return this.column; } }
	}
	#endregion
	
	
	///<summary>
	/// Define a delegate for all <%=className%> related events.
	///</summary>
	public delegate void <%=className%>EventHandler(object sender, <%=className%>EventArgs e);
			
	[Serializable]
	[CLSCompliant(true)]
	//[ToolboxItem(typeof(<%=className%>))]
	public partial class <%=abstractClassName%> : System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged, IEntity
	{		
		#region Variable Declarations
		
		/// <summary>
		/// 	Old the inner data of the entity.
		/// </summary>
		private <%=structName%> entityData;
		
		/// <summary>
		/// 	Old the original data of the entity.
		/// </summary>
		<%=structName%> originalData;
		
		/// <summary>
		/// 	Old a backup of the inner data of the entity.
		/// </summary>
		private <%=structName%> backupData; 
		
		[NonSerialized]
		private TList<<%=className%>> parentCollection;
		private bool inTxn = false;

		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;

		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event <%=className%>EventHandler ColumnChanging;
		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event <%=className%>EventHandler ColumnChanged;		
		#endregion "Variable Declarations"
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<%=constructorAccessModifier%> <%=abstractClassName%>()
		{
			this.entityData = new <%=structName%>();
			this.backupData = null;
		}		
		
		<% if(colsUpdatable.Count > 0) { %>
		///<summary>
		/// Creates a new <see cref="<%=abstractClassName%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdatable.Count; x++) { %>
		///<param name="<%=GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>"><%=GetColumnXmlComment(colsUpdatable[x],2)%></param>
		<% } %>
		<%=constructorAccessModifier%> <%=abstractClassName%>(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetCSType(colsUpdatable[x]) %> <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %><%WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <% WrapLine(3); } }// end for %>)
		{
			this.entityData = new <%=structName%>();
			this.backupData = null;
			
			<% for (int x=0; x < colsUpdatable.Count; x++) { %>
			this.<%= GetPropertyName(colsUpdatable[x]) %> = <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>;
			<% }// end for %>
		}
		<% } %>
		
		///<summary>
		/// A simple factory method to create a new <see cref="<%=className%>"/> instance.
		///</summary>
		<% for (int x=0; x < colsUpdatable.Count; x++) { %>
		///<param name="<%=GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>"><%=GetColumnXmlComment(colsUpdatable[x],2)%></param>
		<% } %>
		public static <%=className%> Create<%=className%>(<% WrapInit(); for (int x=0; x < colsUpdatable.Count; x++) { %><%= GetCSType(colsUpdatable[x]) %> <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %><% WrapIncr(colsUpdatable[x]); if (x < colsUpdatable.Count -1){%>, <%  WrapLine(3); } }// end for %>)
		{
			<%=className%> new<%=className%> = new <%=className%>();
			<% for (int x=0; x < colsUpdatable.Count; x++) { %>
			new<%=className%>.<%=GetPropertyName( colsUpdatable[x].Name) %> = <%= GetPrivateName(className) + GetPropertyName(colsUpdatable[x].Name) %>;
			<% }// end for %>
			return new<%=className%>;
		}
				
		#endregion Constructors
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%=className%>Column"/> which has raised the event.</param>
		public void OnColumnChanging(<%=className%>Column column)
		{
			<%=className%>EventHandler handler = ColumnChanging;
			if(handler != null)
			{
				handler(this, new <%=className%>EventArgs(column));
			}
	
		}
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="<%=className%>Column"/> which has raised the event.</param>
		public void OnColumnChanged(<%=className%>Column column)
		{
			<%=className%>EventHandler handler = ColumnChanged;
			if(handler != null)
			{
				handler(this, new <%=className%>EventArgs(column));
			}
			
			// warn the parent list that i have changed
			OnEntityChanged();
	
		} 
		#endregion
				
		#region Properties	
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
		
		<% for (int x=0; x < cols.Count; x++) { %>
		/// <summary>
		/// 	Gets or sets the <%= GetPropertyName(cols[x].Name) %> property. 
		///		<%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		/// <value>This type is <%=cols[x].NativeType%>.</value>
		/// <remarks>
		/// This property can<%if (!cols[x].AllowDBNull) {%> not<%}%> be set to null. <%if (cols[x].AllowDBNull && !IsCSReferenceDataType(cols[x])) {%>
		/// If this column is null, this property will return <%=GetCSDefaultByType(cols[x])%>. It is up to the developer
		/// to check the value of Is<%=GetPropertyName(cols[x].Name)%>Null() and perform business logic appropriately.<%}%>
		/// </remarks>
		<%if (! cols[x].AllowDBNull && IsCSReferenceDataType(cols[x]) ) {%>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		<%}%>
		[<%if (cols[x].IsPrimaryKeyMember && (IsIdentityColumn(cols[x]) || IsComputed(cols[x])) ) {%>ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, <%}%>DescriptionAttribute("<%=GetDescriptionAttributeText(cols[x].Description)%>"), BindableAttribute()]
		public virtual <%= GetCSType(cols[x])%> <%= GetPropertyName(cols[x]) %>
		{
			get
			{
				return this.entityData.<%= GetPropertyName(cols[x]) %>; 
			}
			
			set
			{
				<%if (! cols[x].AllowDBNull && IsCSReferenceDataType(cols[x])) {%>
				if ( value == null )
					throw new ArgumentNullException("value", "<%= GetPropertyName(cols[x].Name) %> does not allow null values.");
				<%}
				if ( cols[x].AllowDBNull && !IsCSReferenceDataType(cols[x]) ) {%>
				if (this.entityData.<%= GetPropertyName(cols[x]) %> == value && this.entityData.<%= GetPropertyName(cols[x]) %> != null )
				<%}
				else
				{%>
				if (this.entityData.<%= GetPropertyName(cols[x]) %> == value)
				<%}%>
					return;
					
				<% if (IsLengthType(cols[x])) { %>
				if (<%if (cols[x].AllowDBNull){%>value != null &&<%}%>value.Length > <%=cols[x].Size%>)
				{
    				throw new ArgumentOutOfRangeException("<%= GetPropertyName(cols[x]) %>", "<%= GetPropertyName(cols[x]) %> maximum length is <%=cols[x].Size%>.");
				}
				<% } %>
					
				OnColumnChanging(<%=className%>Column.<%=GetPropertyName(cols[x]) %>);
				this.entityData.<%= GetPropertyName(cols[x]) %> = value;
				//this._isDirty = true;
				if (this._state == EntityState.Unchanged)
				{
					this._state = EntityState.Changed;
				}
				OnColumnChanged(<%=className%>Column.<%=GetPropertyName(cols[x]) %>);
				OnPropertyChanged(<%=className%>Column.<%=GetPropertyName(cols[x]) %>.ToString());
			}
		}
		
		<%
			if (cols[x].IsPrimaryKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) )
			{%>
		/// <summary>
		/// 	Get the original value of the <%= cols[x].Name %> property.
		///		<%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		/// <remarks>This is the original value of the <%= cols[x].Name %> property.</remarks>
		/// <value>This type is <%=cols[x].NativeType%></value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual <%= GetCSType(cols[x])%> Original<%= GetPropertyName(cols[x].Name) %>
		{
			get { return this.entityData.<%= GetOriginalPropertyName(cols[x]) %>; }
			set { this.entityData.<%= GetOriginalPropertyName(cols[x]) %> = value; }
		}
		
		<% 	} // end if updatable PK
		
		} // end for each columns 
		%>

		<% if (IncludeGetListByFK) { %>
		#region "Source Foreign Key Property"
				
		<%	//Generate a Source property for each foreign key relation		
		foreach(TableKeySchema tableKey in SourceTable.ForeignKeys)
		{	
			// related table must be in the selection
			if (SourceTables.Contains(tableKey.PrimaryKeyTable)) {
			
			string pkClassName = GetClassName(tableKey.PrimaryKeyTable.Name);
			string fkPropertyName = GetKeysName(tableKey.ForeignKeyMemberColumns);
			string memberVarName = "_" + GetCamelCaseName(fkPropertyName) + "Source";
		%>
		private <%=pkClassName%> <%=memberVarName%> = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="<%=pkClassName%>"/>.
		/// </summary>
		/// <value>The source <%=pkClassName%> for <%=fkPropertyName%>.</value>
		[Browsable(false)]
		public <%=pkClassName%> <%=fkPropertyName%>Source
		
      	{
            get { return this.<%=memberVarName%>; }
            set { this.<%=memberVarName%> = value; }
      	}
		<%	} //end if in SourceTables
		 } //end for each FK%>
		#endregion
		<%}// IncludeGetListByFK%>	
			
		
		//private bool _isDeleted = false;
		/// <summary>
		/// 	True if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._state == EntityState.Deleted; }
		}		
		
		//private bool _isDirty = false;
		/// <summary>
		///		Indicates if the object has been modified from its original state.
		/// </summary>
		/// <remarks>True if object has been modified from its original state; otherwise False;</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._state != EntityState.Unchanged; }
		}
		
		
		//private bool _isNew = true;
		/// <summary>
		///		Indicates if the object is new.
		/// </summary>
		/// <remarks>True if objectis new; otherwise False;</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._state == EntityState.Added; }
			set { this._state = EntityState.Added; }
		}
		

		private EntityState _state = EntityState.Added ;
		//private EntityState _state = EntityState.Unchanged ;
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual EntityState EntityState
		{
			get { return this._state; }
			set { this._state = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string TableName
		{
			get { return "<%=SourceTable.Name%>"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string[] TableColumns
		{
			get
			{
				return new string[] {<%for (int i=0; i< SourceTable.Columns.Count; i++) {
					if (i>0) Response.Write(", ");
					Response.Write("\""+ SourceTable.Columns[i].Name + "\"");
					} %>};
			}
		}
<% 
if(IncludeRelations) {
WriteRelationshipPropertyString();
}
%>
		
		#endregion
		
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
            CancelAddNewEventHandler handler = CancelAddNew ;
            if (handler != null)
            {    
                handler(this, EventArgs.Empty) ;
            }
        }

		
		#region IEditableObject
		
		private bool bindingIsNew = true;
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as <%=structName%>;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this._state == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (<%=className%>) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this._state = EntityState.Added ;
						this.bindingIsNew = false ;
					}
					else
						this._state = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public object ParentCollection
	    {
	        get 
	        {
	            return (object)this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = (TList<<%=className%>>)value;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this);
	        }
	    }


		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method <see cref="IsDirty"/> and <see cref="IsNew"/> are false. <see cref="IsDeleted"/> flag remain unchanged as it is handled by the parent List.
		/// </remarks>
		public virtual void AcceptChanges()
		{
			//this._isDeleted = false;
			//this._isDirty = false;
			//this._isNew = false;
			this.bindingIsNew = false;
			this._state = EntityState.Unchanged ;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			//this._isDeleted = true;
			//this._isDirty = true;
			if (this._state != EntityState.Added)
				this._state = EntityState.Deleted ;
		}
		
		///<summary>
		///   Remove the "isDeleted" mark from the entity.
		///</summary>
		public virtual void RemoveDeleteMark()
		{
			//this._isDeleted = false;
			if (this._state != EntityState.Added) 
			{				
				this._state = EntityState.Changed ;
			}
		}
		
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed <%=abstractClassName%> Entity 
		///</summary>
		public virtual <%=abstractClassName%> Copy()
		{
			//shallow copy entity
			<%=className%> copy = new <%=className%>();
			<% for (int x=0; x < cols.Count; x++) { %>
			copy.<%= GetPropertyName(cols[x].Name) %> = this.<%= GetPropertyName(cols[x].Name) %>;
			<% if( cols[x].IsPrimaryKeyMember && !IsIdentityColumn(cols[x]) && !IsComputed(cols[x]) ) { %>
			copy.<%= GetOriginalPropertyName(cols[x].Name) %> = this.<%= GetOriginalPropertyName(cols[x].Name) %>;
			<% } %>
			<% } %>
					
		<% 
		/* commented till GetChildrenCollections will work 
		if (IncludeRelations){
		int ctr = 0;
		foreach(CollectionInfo item in GetChildrenCollections(SourceTable)) { 
			if (ctr == 0)
				Response.Write("\t\t\t//deep copy nested objects" + Environment.NewLine);
			ctr++;
		%>
			copy.<%=GetCollectionClassName(item.CleanName)%> = (<%=GetCollectionClassName(item.CleanName)%>)MakeCopyOf(this.<%=GetCollectionClassName(item.CleanName)%>); 
			<% }//end foreach CollectionInfo
		}//end if IncludeRelations
		//ChildCollections.Clear();
		*/
		%>
			copy.AcceptChanges();
			return (<%=className%>)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="<%=abstractClassName%>"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(<%=abstractClassName%> toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="<%=abstractClassName%>"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="<%=abstractClassName%>"/> to compare.</param>
		///<param name="Object2">The second <see cref="<%=abstractClassName%>"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(<%=abstractClassName%> Object1, <%=abstractClassName%> Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
		<% for (int x=0; x < cols.Count; x++) {
			    if ( cols[x].AllowDBNull )
				{ %>
			if ( Object1.<%= GetPropertyName(cols[x].Name) %> != null && Object2.<%= GetPropertyName(cols[x].Name) %> != null )
			{
				if (Object1.<%= GetPropertyName(cols[x].Name) %> != Object2.<%= GetPropertyName(cols[x].Name) %>)
					equal = false;
			}
			else if (Object1.<%=GetPropertyName(cols[x].Name)%> == null ^ Object1.<%=GetPropertyName(cols[x].Name)%> == null )
			{
				equal = false;
			}
		      <%}
				else { %>
			if (Object1.<%= GetPropertyName(cols[x].Name) %> != Object2.<%= GetPropertyName(cols[x].Name) %>)
				equal = false;
			<% } // if ( cols[x].AllowDBNull ) %>
		<% }// end for %>	
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			// TODO -> generate a strongly typed IComparer in the concrete class
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name) .CompareTo(((<%=abstractClassName%>)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Name));
		}
		
		/*
		// static method to get a Comparer object
        public static <%=className%>Comparer GetComparer()
        {
            return new <%=className%>Comparer();
        }
        */

        // Comparer delegates back to <%=className%>
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(<%=className%> rhs, <%=className%>Column which)
        {
            switch (which)
            {
            	<% foreach(ColumnSchema column in cols) { %>
            	
            	<% if (column.DataType != DbType.Binary) { %>
            	
            	case <%=className%>Column.<%=GetPropertyName(column.Name)%>:
            		<% if (column.AllowDBNull && !IsCSReferenceDataType(column)) {%>
            		return this.<%=GetPropertyName(column.Name)%>.Value.CompareTo(rhs.<%=GetPropertyName(column.Name)%>.Value);
            		<% } else { %>
            		return this.<%=GetPropertyName(column.Name)%>.CompareTo(rhs.<%=GetPropertyName(column.Name)%>);
            		<% } %>  
            		
            	<% } %>
            		                 
            	<% } //end foreach %>                
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (null != PropertyChanged)
			{
				PropertyChanged(this, e);
			}
		}
		
		#endregion
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{<%=cols.Count+1%>}{<%=cols.Count%>}<% for (int x=0; x < cols.Count; x++) { Response.Write("- " + GetPropertyName(cols[x].Name) + ": {" + x + "}{" + cols.Count + "}" ); } %>", 
			<%for (int x=0; x < cols.Count; x++)
			  {
			    if ( cols[x].AllowDBNull )
				{%>
				(this.<%=GetPropertyName(cols[x].Name)%> == null) ? string.Empty : this.<%=GetPropertyName(cols[x].Name)%>.ToString(),
				<%} else { %>
				this.<%= GetPropertyName(cols[x].Name) %>,
			<% } // if ( cols[x].AllowDBNull )
			} // for (int x=0; x < cols.Count; x++) %>
				Environment.NewLine, 
				this.GetType());
		}
		
		#region "Inner data class "
		<%
			CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName + "\\EntityData.cst");
			compiler.Compile();
			CodeTemplate template = null;
			
			if (compiler.Errors.Count == 0)
			{
				template =  compiler.CreateInstance();
			}
			else
			{
				for (int i = 0; i < compiler.Errors.Count; i++)
				{
					Response.WriteLine(compiler.Errors[i].ToString());
				}
			}
	
			template.SetProperty("SourceTable", SourceTable);
			template.SetProperty("SourceTables", _sourceTables);
			template.SetProperty("NameSpace", NameSpace);
			template.SetProperty("IncludeRelations", IncludeRelations);
			template.SetProperty("IncludeManyToMany", IncludeManyToMany);
			template.SetProperty("StrippedTablePrefixes", StrippedTablePrefixes);
			template.SetProperty("AliasFilePath", AliasFilePath);
			
			template.SetProperty("EntityFormat", EntityFormat);
			template.SetProperty("CollectionFormat", CollectionFormat);
			template.SetProperty("ProviderFormat", ProviderFormat);
			template.SetProperty("InterfaceFormat", InterfaceFormat);
			template.SetProperty("BaseClassFormat", BaseClassFormat);
			template.SetProperty("EnumFormat", EnumFormat);
			template.SetProperty("ManyToManyFormat", ManyToManyFormat);
			template.SetProperty("AliasFilePath", AliasFilePath);
			template.SetProperty("StrippedTablePrefixes", StrippedTablePrefixes);
			
			Response.Write(template.RenderToString());
		%>
		#endregion
	
	} // End Class
	
	#region "<%=className%>Comparer"
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class <%=className%>Comparer : System.Collections.Generic.IComparer<<%=className%>>
	{
		<%=className%>Column whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:<%=className%>Comparer"/> class.
        /// </summary>
		public <%=className%>Comparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:%=className%>Comparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public <%=className%>Comparer(<%=className%>Column column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="<%=className%>"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="<%=className%>"/> to compare.</param>
        /// <param name="b">The second <c><%=className%></c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(<%=className%> a, <%=className%> b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(<%=className%> entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(<%=className%> a, <%=className%> b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public <%=className%>Column WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	
	/// <summary>
	/// Enumerate the <%=className%> columns.
	/// </summary>
	[Serializable]
	public enum <%=className%>Column
	{
		<% for (int x=0; x < cols.Count; x++) { %>
		/// <summary>
		/// <%=GetPropertyName(cols[x].Name)%> : <%=GetColumnXmlComment(cols[x],2)%>
		/// </summary>
		<%=GetPropertyName(cols[x].Name)%><%if(x < cols.Count -1) {%>,<%}%>
		<% }// end for %>	
	}//End enum

} // end namespace

<script runat="template">
///<summary>
/// Many To Many Relationship Class Template Property String
///</summary>
protected static string MANY_TO_MANY = @"
		private {1} _{0} = new {1}();
		
		/// <summary>
		///	Holds a collection of {3} objects
		///	which are related to this object through the junction table {2}
		/// </summary>	
		public {1} {0}
		{{
			get {{ return _{0}; }}
			set {{ _{0} = value; }}	
		}}
";

///<summary>
/// One to One Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_ONE = @"
		private {0} _{0} = new {0}();
			
		/// <summary>
		///	Holds a {0} object
		///	which is related to this object through the relation {1}
		/// </summary>
		public {0} {0}
		{{
			get {{ return _{0}; }}
			set {{ _{0} = value; }}	
		}}
";
		
///<summary>
/// One To Many Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_MANY = @"
		private {0} _{3} = new {0}();
		
		/// <summary>
		///	Holds a collection of {2} objects
		///	which are related to this object through the relation {1}
		/// </summary>	
		public {0} {3}
		{{
			get {{ return _{3}; }}
			set {{ _{3} = value; }}	
		}}
";
		
///<summary>
///   Writes out the property string of all the relationship object collections.
///</summary>
private void WriteRelationshipPropertyString() {
		
		///Loop Child Collections
		foreach (CollectionInfo item in GetChildrenCollections(SourceTable, SourceTables))
		{
			
			///Assign by RelationshipType, Then Write to Response
			switch((int)item.CollectionRelationshipType)
			{
				///One To One Relationship
				case (int)RelationshipType.OneToOne:
					object[] oneToOneParams = {
								GetClassName(item.SecondaryTable), 
								GetClassName(item.PkIdxName)
					};
					item.PropertyString = string.Format(ONE_TO_ONE, oneToOneParams);
					break;
					
				///One To Many, Many To One
				case (int)RelationshipType.OneToMany:
				case (int)RelationshipType.ManyToOne:
				    object[] oneToManyParams = {
							GetCollectionClassName(item.SecondaryTable)
							, item.PkIdxName
							, GetClassName(item.SecondaryTable)
							, GetCollectionPropertyName(item.SecondaryTable)
					};
				item.PropertyString = string.Format(ONE_TO_MANY, oneToManyParams);
				break;
				
				///Many To Many
				case (int)RelationshipType.ManyToMany:
					object[] manyToManyParams = {
							//GetCollectionPropertyName(item.CleanName) + "_From_" + GetClassName(item.JunctionTable), 
							item.CollectionName,
							GetCollectionClassName(item.SecondaryTable),
							item.JunctionTable,
							item.CleanName
					};
					item.PropertyString = string.Format(MANY_TO_MANY, manyToManyParams);
					break;
				default:
					break;
			}
			
			if (!RenderedChildren.Contains(item.CleanName))
			{
				///Write it out to the resonse stream
				Response.Write(item.PropertyString);	
				RenderedChildren.Add(item.CleanName);
			}
		}///End foreach loop
		
		///enable use for the next template
		RenderedChildren.Clear();
		}
</script>

