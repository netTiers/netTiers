<%--
 * $Id: EntityRepositoryTest.cst,v 1.3 2006/02/09 23:35:11 bgjohnso Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generate nUnit test for the entity." Debug="False"  ResponseEncoding="UTF-8"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True"  Category="DataSource" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table that the data access class should be based on." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>
<%@ Property Name="UTNameSpace" Type="System.String" Category="Data" Description="Project root Namespace." %>

<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="Options" Description="If true combined insert/update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true many2many functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="CRUD Options" Description="If true deep load will be tested" %>

<%@ Property Name="IncludeUnitTest" Type="MoM.Templates.UnitTestStyle" Default="NUnit" Category="General" Description="Indicates type of Unit tests to be generated." %>

<%
	string className = GetClassName(SourceTable.Name);
	string collectionClassName = GetCollectionClassName(SourceTable.Name);
	string providerName = GetProviderClassName(SourceTable.Name);
	string unitTestClassName = GetRepositoryTestClassName(SourceTable.Name);
%>

<%
	// Collection of all columns in the table.
	ColumnSchemaCollection cols = SourceTable.Columns;
	
	// Collection of all columns in the table that are not primary keys.
	ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
	
	// Collection of all primary key columns.
	ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns;
	
	// Collection of ForeignKeys. Provides information about the foreign keys 
	//(keys where the current table is the foreign table) contained in the table. 
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	
	//Provides information about the primary keys 
	//(keys where the current table is the primary table) contained in the table. 
	TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
	
	//Provides information about the indexes contained in the table. 
	IndexSchemaCollection indexes = SourceTable.Indexes;
	
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>

<%
	string TestAssemblyNameSpace = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "NUnit.Framework" : "Microsoft.VisualStudio.TestTools.UnitTesting";
	
	string TestFixtureAttr = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "TestFixture" : "TestClass";
	string TestAttr = (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) ? "Test" : "TestMethod";
%>
#region Using directives

using System;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using <%=TestAssemblyNameSpace%>;
using <%=NameSpace%>;
using <%=DALNameSpace%>;

#endregion

namespace <%=UTNameSpace%>
{
    /// <summary>
    /// Provides tests for the and <see cref="<%=className%>"/> objects (entity, collection and repository).
    /// </summary>
	/// <remarks>
	/// This file is generated once and will never be overwritten.
	/// </remarks>
    [<%=TestFixtureAttr%>]
    public partial class <%=unitTestClassName%>
    {    	
		/// <summary>
		/// Creates a new <see cref="<%=unitTestClassName%>"/> instance.
		/// </summary>	
		public <%=unitTestClassName%>()
		{				
		}
        
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
		<% if (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) { %>
		[TestFixtureSetUp]
		public void Init()
		<% } else { // VSTS Unit tests %>
		[ClassInitialize]
        static public void Init(TestContext context)
		<% } %>
        {
			Init_Generated();
			// Add your initialization here
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		<% if (IncludeUnitTest == MoM.Templates.UnitTestStyle.NUnit) { %>
		[TestFixtureTearDown]
        public void Dispose()
		<% } else { // VSTS Unit tests %>
		[ClassCleanup]
		static public void CleanUp()
		<% } %>
        {   
        	CleanUp_Generated();
			// Add you clean up here
        }
    
    
		<% if (IncludeInsert) { %>
		/// <summary>
		/// Inserts a mock <%=className%> entity into the database.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_01_Insert()
		{
			// Establish additional pre-conditions here
			Step_01_Insert_Generated();			
			// Add additional verification here
		}
		<% } %>
		
		
		<% if (IncludeGetList) { %>
		/// <summary>
		/// Selects all <%=className%> objects of the database.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_02_SelectAll()
		{
			// Establish additional pre-conditions here
			Step_02_SelectAll_Generated();
			// Add additional verification here
		}
		<% } %>
		
		
		
		<% if (IncludeRelations && IncludeGetListByFK) { %>
		
		/// <summary>
		/// Deep load all <%=className%> children.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_03_DeepLoad()
		{
			// Establish additional pre-conditions here
			Step_03_DeepLoad_Generated();
			// Add additional verification here
		}
		<% } %>
		
		<% if (IncludeUpdate) { %>
		/// <summary>
		/// Updates a mock <%=className%> entity into the database.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_04_Update()
		{
			// Establish additional pre-conditions here
			Step_04_Update_Generated();
			// Add additional verification here
		}
		<% } %>
		
		
		<% if (IncludeDelete) { %>
		/// <summary>
		/// Delete the mock <%=className%> entity into the database.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_05_Delete()
		{
			// Establish additional pre-conditions here
			Step_05_Delete_Generated();
			// Add additional verification here
		}
		<% } %>
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock <%=className%> entity into a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_06_SerializeEntity()
		{
			// Establish additional pre-conditions here
			Step_06_SerializeEntity_Generated();
			// Add additional verification here
		}
		
		/// <summary>
		/// Deserialize the mock <%=className%> entity from a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_07_DeserializeEntity()
		{
			// Establish additional pre-conditions here
			Step_07_DeserializeEntity_Generated();
			// Add additional verification here
		}
		
		/// <summary>
		/// Serialize a <%=className%> collection into a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_08_SerializeCollection()
		{
			// Establish additional pre-conditions here
			Step_08_SerializeCollection_Generated();
			// Add additional verification here
		}
		
		
		/// <summary>
		/// Deserialize a <%=className%> collection from a temporary file.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_09_DeserializeCollection()
		{
			// Establish additional pre-conditions here
			Step_09_DeserializeCollection_Generated();
			// Add additional verification here
		}
		#endregion
		
		
		<% if (IncludeGetListByFK) { %>
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_10_FK()
		{
			// Establish additional pre-conditions here
			Step_10_FK_Generated();
			// Add additional verification here
		}
		<% } %>
		
		<% if (IncludeGetListByIX) { %>
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_11_IX()
		{
			// Establish additional pre-conditions here
			Step_11_IX_Generated();
			// Add additional verification here
		}
		<% } %>
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		[<%=TestAttr%>]
		public void Step_20_TestEntityHelper()
		{
			Step_20_TestEntityHelper_Generated();
		}
    }
}
