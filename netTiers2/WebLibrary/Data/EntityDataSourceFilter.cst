<%--
 * $Id: EntityDataSourceFilter.cst,v 1.0 2006/03/19 10:00:00 bdiaz Exp $
 * Last modified by $Author: bdiaz $
 * Last modified at $Date: 2006-03-19 10:00:00 -0600 (Sun, 19 Mar 2006) $
 * $Revision: 1 $
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Generates the specified class." %>

<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="BLL Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Namespace." %>
<%@ Property Name="WebNameSpace" Optional="False" Type="System.String" Category="Style" Description="Web Namespace." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
#region Imports...
using System;
using System.Data;
using System.Collections;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using <%= BLLNameSpace %>;
#endregion

namespace <%= WebNameSpace %>.Data
{
	/// <summary>
	/// Summary description for EntityDataSourceFilter
	/// </summary>
	public class EntityDataSourceFilter : DataBoundControl, IDataSource
	{
		#region Declarations

		private static readonly String FilteredViewName = "FilteredView";
		private EntityDataSourceFilterView _filteredView;

		#endregion

		#region Constructors

		public EntityDataSourceFilter()
		{
		}

		#endregion

		#region IDataSource Members

		public event EventHandler DataSourceChanged;

		public DataSourceView GetView(String viewName)
		{
			return FilteredView;
		}

		public ICollection GetViewNames()
		{
			return new String[] { FilteredViewName };
		}

		#endregion

		#region Methods

		public EntityDataSource GetEntityDataSource()
		{
			return GetDataSource() as EntityDataSource;
		}

		protected void OnDataSourceChanged(EventArgs e)
		{
			if ( DataSourceChanged != null )
			{
				DataSourceChanged(this, e);
			}
		}

		#endregion

		#region Properties

		private EntityDataSourceFilterView FilteredView
		{
			get
			{
				if ( _filteredView == null )
				{
					_filteredView = new EntityDataSourceFilterView(this, FilteredViewName);
				}

				return _filteredView;
			}
		}

		[Bindable]
		public String Filter
		{
			get { return FilteredView.Filter; }
			set
			{
				if ( FilteredView.Filter != value )
				{
					FilteredView.Filter = value;
					OnDataSourceChanged(new EventArgs());
				}
			}
		}

		[Bindable]
		public String Sort
		{
			get { return FilteredView.Sort; }
			set
			{
				if ( FilteredView.Sort != value )
				{
					FilteredView.Sort = value;
					OnDataSourceChanged(new EventArgs());
				}
			}
		}

		#endregion

		#region Events

		public event EntityListEventHandler ApplyFilter
		{
			add
			{
				FilteredView.ApplyFilter += value;
			}
			remove
			{
				FilteredView.ApplyFilter -= value;
			}
		}

		public event EntityListEventHandler ApplySort
		{
			add
			{
				FilteredView.ApplySort += value;
			}
			remove
			{
				FilteredView.ApplySort -= value;
			}
		}

		#endregion

		/// <summary>
		/// EntityDataSourceFilterView
		/// </summary>
		private sealed class EntityDataSourceFilterView : DataSourceView
		{
			#region Declarations

			private EntityDataSourceFilter _owner;
			private String _filter;
			private String _sort;

			#endregion

			#region Constructors

			public EntityDataSourceFilterView(EntityDataSourceFilter owner, String viewName)
				: base(owner, viewName)
			{
				_owner = owner;
			}

			#endregion

			#region DataSourceView Members

			protected override IEnumerable ExecuteSelect(DataSourceSelectArguments arguments)
			{
				EntityDataSource dataSource = _owner.GetEntityDataSource();
				IEnumerable entityList = null;

				if ( dataSource != null )
				{
					entityList = dataSource.GetEntityList();

					// apply filter
					OnApplyFilter(entityList);

					if ( !String.IsNullOrEmpty(Filter) )
					{
						EntityUtil.SetPropertyValue(entityList, "Filter", Filter);
					}

					// apply sort
					OnApplySort(entityList);

					if ( !String.IsNullOrEmpty(Sort) )
					{
						EntityUtil.InvokeMethod(entityList, "Sort", new Object[] { Sort });
					}
				}

				return entityList;
			}

			#endregion

			#region Properties

			internal String Filter
			{
				get { return _filter; }
				set { _filter = value; }
			}

			internal String Sort
			{
				get { return _sort; }
				set { _sort = value; }
			}

			#endregion

			#region Events

			internal event EntityListEventHandler ApplyFilter;

			internal event EntityListEventHandler ApplySort;

			private void OnApplyFilter(IEnumerable entityList)
			{
				if ( ApplyFilter != null )
				{
					EntityListEventArgs args = new EntityListEventArgs(entityList);
					ApplyFilter(this, args);
				}
			}

			private void OnApplySort(IEnumerable entityList)
			{
				if ( ApplySort != null )
				{
					EntityListEventArgs args = new EntityListEventArgs(entityList);
					ApplySort(this, args);
				}
			}

			#endregion
		}
	}

	#region Event Helpers

	public delegate void EntityListEventHandler(Object sender, EntityListEventArgs args);

	public class EntityListEventArgs : EventArgs
	{
		private IEnumerable _entityList;

		public EntityListEventArgs(IEnumerable entityList)
		{
			_entityList = entityList;
		}

		public IEnumerable EntityList
		{
			get { return _entityList; }
			set { _entityList = value; }
		}
	}

	#endregion
}
