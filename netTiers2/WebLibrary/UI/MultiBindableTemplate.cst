<%--
 * $Id: MultiBindableTemplate.cst,v 1.0 2006/03/19 10:00:00 bdiaz Exp $
 * Last modified by $Author: bdiaz $
 * Last modified at $Date: 2006-03-19 10:00:00 -0600 (Sun, 19 Mar 2006) $
 * $Revision: 1 $
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Generates the specified class." %>

<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="BLL Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Namespace." %>
<%@ Property Name="WebNameSpace" Optional="False" Type="System.String" Category="Style" Description="Web Namespace." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
#region Imports...
using System;
using System.Data;
using System.Collections;
using System.Collections.Specialized;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
#endregion

namespace <%= WebNameSpace %>.UI
{
	/// <summary>
	/// Provides a mechanism for combining multiple IBindableTemplate definitions
	/// into a single instance.
	/// </summary>
	/// <remarks>
	/// Adapted from an article written by James Crowley, which can be found at:
	/// http://www.developerfusion.co.uk/show/4721/
	/// </remarks>
	public class MultiBindableTemplate : IBindableTemplate
	{
		private IBindableTemplate[] _templates;

		public MultiBindableTemplate(params IBindableTemplate[] templates)
		{
			_templates = templates;
		}

		public MultiBindableTemplate(TemplateControl control, params String[] paths)
		{
			_templates = new IBindableTemplate[paths.Length];

			for ( int i=0; i<paths.Length; i++ )
			{
				_templates[i] = FormUtil.LoadBindableTemplate(control, paths[i]);
			}
		}

		public IOrderedDictionary ExtractValues(Control container)
		{
			IOrderedDictionary multi = null;
			IOrderedDictionary temp;

			if ( HasTemplates )
			{
				multi = _templates[0].ExtractValues(container);

				// extract the values for each of the templates
				for ( int i = 1; i < _templates.Length; i++ )
				{
					temp = _templates[i].ExtractValues(container);

					// copy over to the first collection
					foreach ( Object key in temp.Keys )
					{
						multi.Add(key, temp[key]);
					}
				}
			}

			// return the combined collection
			return multi;
		}

		public void InstantiateIn(Control container)
		{
			// create a container control
			Control c = new Control();

			if ( HasTemplates )
			{
				// instantiate the templates into this control
				for ( int i = 0; i < _templates.Length; i++ )
				{
					_templates[i].InstantiateIn(c);
				}
			}

			// add our control to the container we were passed
			container.Controls.Add(c);
		}

		public bool HasTemplates
		{
			get { return (_templates != null && _templates.Length > 0); }
		}
	}
}
