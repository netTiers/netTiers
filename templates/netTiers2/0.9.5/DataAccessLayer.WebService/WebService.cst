<%--
 * $Id: WebService.cst,v 1.1 2005/12/02 15:23:23 jroland Exp $
 * Last modified by $Author: goofsr $
 * Last modified at $Date: 2006-04-09 01:11:17 -0500 (Sun, 09 Apr 2006) $
 * $Revision: 118 $
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="" Debug="True" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Tables that the stored procedures should be based on." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Context" Description="views that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="CustomNonMatchingReturnType" Type="CustomNonMatchingReturnType" Default="DataSet" Category="Options" Description="When using custom stored procedures, if the returned rows do not match the fields in an entity, a DataSet or IDataReader will be returned. Choose One.  This is useful if you've returned more than one resultset in a custom procedure; you can use a ConvertToDataSet(IDataReader) method in the Utility class to convert that to a DataSet." %>
<%@ Property Name="CustomProcedureStartsWith" Type="System.String" Default="_{0}_" Category="Options" Description="If you include custom stored procedures, this is the pattern that NetTiers will look for your custom stored procedures. A string format will be used to match the procedure pattern.  So, {0}=TableName, {1}=StoredProc Prefix.  By default NetTiers will look at tables that starts with '_{0}_', which means it will detect the procedure _TableName_GetByBirthdate and will be detected and generated." %>
<%@ Property Name="ProcedurePrefix" Optional="True" Type="System.String" Category="Style" Description="Prefix for Strored Procedures" %>

<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>

<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Class Namespace." %>

<%@ Property Name="BLLNameSpace" Type="System.String" Category="Data" Description="BLL Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>

<%@ Property Name="ClassName" Type="System.String" Category="Style" Description="The Name of the WebService class." %>
<%@ Property Name="WebServiceUrl" Type="System.String" Category="Style" Description="The webservice base URL. The asmx filename will be added programmatically." Default="http://localhost/Services/" %>
<%%@ WebService Language="C#" Class="<%=ClassName%>" %>
<%%@ Assembly Name="<%=BLLNameSpace%>" %>
<%%@ Assembly Name="<%=DALNameSpace%>" %>
<%%@ Assembly Name="<%=DALNameSpace+".SqlClient"%>" %>


using System;
using System.Data;
using System.Web.Services;
using <%=BLLNameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace+".SqlClient"%>;



/// <summary>
///	Exposes CRUD webmethods for the <%=ClassName%> Database.
/// </summary>
[WebService(Namespace="<%=WebServiceUrl%>", Description="Exposes CRUD webmethods for the <%=ClassName%> Database.")]
public class <%=ClassName%> : WebService 
{
	<% 
	for (int tableIndex = 0; tableIndex < SourceTables.Count; tableIndex++) 
	{
		// point to the current table
		SchemaExplorer.TableSchema SourceTable = SourceTables[tableIndex];
		
		// True if primary key is AutoGenerated by database.
		//bool IsPkeyReadOnly = false;
		
		// Name of the table being worked on.
		string name = SourceTable.Name;
		string className = NameSpace + "." + GetClassName(SourceTable.Name);
		string collectionClassName = NameSpace + "." + GetCollectionClassName(SourceTable.Name);
				
		string commandStem = GetCleanName(SourceTable.Name);
		string providerName = GetProviderName(SourceTable.Name);
		
		// Collection of all columns in the table.
		ColumnSchemaCollection cols = SourceTable.Columns;
		
		// Collection of all columns in the table that are not primary keys.
		ColumnSchemaCollection nonKeys = SourceTable.NonPrimaryKeyColumns;
		
		// Collection of all primary key columns.
		ColumnSchemaCollection keys = SourceTable.PrimaryKey.MemberColumns;
		
		// Collection of ForeignKeys. Provides information about the foreign keys 
		//(keys where the current table is the foreign table) contained in the table. 
		TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
		
		//Provides information about the primary keys 
		//(keys where the current table is the primary table) contained in the table. 
		TableKeySchemaCollection pkeys = SourceTable.PrimaryKeys;
		
		//Provides information about the indexes contained in the table. 
		IndexSchemaCollection indexes = SourceTable.Indexes;
		
		//the first of potentially multiple primary keys
		//ColumnSchema primaryKey = keys[0];
		
		
		// Holds the RowVersion column if there's any
		ColumnSchema RowVersion = null;
	
		foreach (ColumnSchema column in cols)
		{
			if (column.NativeType.ToLower() == "timestamp")
				RowVersion = column;
		}
	 
		// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
		System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>

	
	<% if(IncludeManyToMany) { %>
	#region "Get from  Many To Many Relationship Functions"
	<%
		TableSchema primaryTable = SourceTable;
		
		foreach(TableKeySchema key in SourceTable.PrimaryKeys)
		{
			// Check that the key is related to a junction table and that this key relate a PK in this junction table
			if ( IsJunctionTable(key.ForeignKeyTable) && IsJunctionKey(key))
			{
				TableSchema junctionTable = key.ForeignKeyTable;
				
				// Search for the other(s) key(s) of the junction table' primary key
				foreach(TableKeySchema junctionTableKey in junctionTable.ForeignKeys)
				{				
					if ( IsJunctionKey(junctionTableKey) && junctionTableKey.Name != key.Name )
					{
						TableSchema secondaryTable = junctionTableKey.PrimaryKeyTable;
						string functionname = GetManyToManyName(junctionTableKey, GetCleanName(junctionTable.Name));
%>

	#region GetBy<%=functionname%>
		
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%>, through the junction table <%=junctionTable.Name%>.")]
	public <%=NameSpace + "." + GetCollectionClassName(primaryTable.Name)%> <%=providerName%>_GetBy<%=functionname%>(<%=GetFunctionHeaderParameters(junctionTableKey.ForeignKeyMemberColumns)%>, int start, int pageLength, out int count)
	{		
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetBy<%=functionname%>(<%=GetFunctionCallParameters(junctionTableKey.ForeignKeyMemberColumns)%>, start, pageLength, out count);
	}
	
	#endregion GetBy<%=functionname%>
	
				<%
				} //end if there is many to many relationship.
			} //end foreach			
	 	}// end if(IsJunctionTable(junctionTableKeyForeignKeyTable)) %>
	<%}//end foreach pkey %>
	#endregion	
	<% } %>
	
	<% if (IncludeDelete) {%>
	#region "Delete Functions"
	
		
	/// <summary>
	/// 	Deletes a row from the DataSource.
	/// </summary>
	<% for (int i = 0; i < keys.Count; i++) { %>
	/// <param name="<%= keys[i].Name%>"><%= keys[i].Description%>. Primary Key.</param>	
	<% } %>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="connectionString">Connection string to datasource.</param>
	/// <remarks>Deletes based on primary key(s).</remarks>
	/// <returns>Returns true if operation suceeded.</returns>
	[WebMethod(Description="Delete a row from the table <%=SourceTable.Name%>.")]
	public bool <%=providerName%>_Delete(<%= GetFunctionHeaderParameters(keys) %><% if(RowVersion != null) {Response.Write(", byte[] " + GetPrivateName(RowVersion.Name));}%>)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.Delete(<%= GetFunctionCallParameters(keys) %><% if(RowVersion != null) {Response.Write(", " + GetPrivateName(RowVersion.Name));}%>);
	}//end Delete
		
	
	#endregion
	<% } %>
	
	<% if (IncludeFind) { %>
	#region "Find Functions"
	
	/// <summary>
	/// 	Returns rows meeting the whereclause condition from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query.</param>
	/// <remarks></remarks>
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%> with additional query text.")]
	public <%=collectionClassName%> <%=providerName%>_Find(string whereClause, int start, int pageLength, out int count)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.Find(null, whereClause, start, pageLength, out count);
	}
	
	#endregion "Find Functions"
	<% } %>
	
	
	<% if (IncludeGetList) { %>
	#region "GetList Functions"
		
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
	/// <param name="count">Number of rows in the DataSource.</param>
	/// <returns>Returns a <s>DataSet</s>.</returns>
	[WebMethod(Description="Get all rows from the table <%=SourceTable.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_GetAll(int start, int pageLength, out int count)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetAll(start, pageLength, out count);		
	}
	
	#endregion
	
	#region "Get Paged"
	
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="count">Number of rows in the DataSource.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=ClassName%> objects.</returns>
	[WebMethod(Description="Get all rows from the table <%=SourceTable.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_GetPaged(string whereClause, string orderBy, int start, int pageLength, out int count)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetPaged(whereClause.Length > 0 ? whereClause : null, orderBy.Length > 0 ? orderBy : null, start, pageLength, out count);
	}

	#endregion
	<% } %>
		
	<% if (IncludeGetListByFK) { %>
	#region "Get By Foreign Key Functions"
<%
		for (int j=0; j < fkeys.Count;j++)
		{
			bool skipkey = false;
			foreach(IndexSchema i in indexes)
			{
				if(i.MemberColumns.Equals(fkeys[j].ForeignKeyMemberColumns))
					skipkey = true;	
			}
			if(skipkey)
				continue;
				
			getbyKeys.Add(GetKeysName(fkeys[j].ForeignKeyMemberColumns));
%>
	
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=fkeys[j].Name%> key.
	///		<%=fkeys[j].Name%> Description: <%=fkeys[j].Description%>
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
<% for (int i = 0; i < fkeys[j].ForeignKeyMemberColumns.Count; i++) { %>
	/// <param name="<%= fkeys[j].ForeignKeyMemberColumns[i].Name%>"><%=fkeys[j].ForeignKeyMemberColumns[i].Description%></param>
<% } %>
	/// <param name="count">out parameter to get total records for query</param>	
	/// <remarks></remarks>
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from <%=SourceTable.Name%> filtered by the <%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%> column.")]
	public <%=collectionClassName%> <%=providerName%>_GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(<%= GetFunctionHeaderParameters(fkeys[j].ForeignKeyMemberColumns) %>, int start, int pageLength, out int count)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetBy<%=GetKeysName(fkeys[j].ForeignKeyMemberColumns)%>(<%= GetFunctionCallParameters(fkeys[j].ForeignKeyMemberColumns) %>, start, pageLength, out count);
	}
	
<% 		}//endfor %>
#endregion
	<% } %>
	
	<% if (IncludeGetListByIX) { %>	
	#region "Get By Index Functions"
	<%	
		for (int j=0; j < indexes.Count;j++)
		{
			// Check if this key is not already generated
			if(getbyKeys.IndexOf(GetKeysName(indexes[j].MemberColumns)) >=0 )
			{
				continue;
			}
			else
			{
				// add this key to the index list
				getbyKeys.Add(GetKeysName(indexes[j].MemberColumns));
			}
			
			string returnType = collectionClassName;
			bool isUnique = false;
			
			if (indexes[j].IsUnique || indexes[j].IsPrimaryKey)
			{
				returnType = className;
				isUnique = true;
			}
%>
	
	/// <summary>
	/// 	Gets rows from the datasource based on the <%=indexes[j].Name%> index.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pagelen">Number of rows to return.</param>
<% for (int i = 0; i < indexes[j].MemberColumns.Count; i++) { %>
	/// <param name="<%= indexes[j].MemberColumns[i].Name%>"><%= indexes[j].MemberColumns[i].Description%></param>
<% } %>
	/// <param name="count">out parameter to get total records for query</param>	
	/// <returns>Returns a DataSet.</returns>
	[WebMethod(Description="Get rows from the table <%=SourceTable.Name%> filtered by the column <%=GetKeysName(indexes[j].MemberColumns)%> that is part of the <%=indexes[j].Name%> index.")]
	public <%=returnType%> <%=providerName%>_GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(<%= GetFunctionHeaderParameters(indexes[j].MemberColumns) %>, int start, int pageLength, out int count)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetBy<%=GetKeysName(indexes[j].MemberColumns)%>(<%= GetFunctionCallParameters(indexes[j].MemberColumns) %>, start, pageLength, out count);
	}
	

<%		}//endfor %>
	#endregion "Get By Index Functions"
	<% } %>
	
	<% if (IncludeInsert) { %>
	#region "Insert Functions"
		
	/// <summary>
	/// 	Inserts an object into the datasource.
	/// </summary>	
	/// <remarks>After inserting into the datasource, the object will be returned
	/// to refelect any changes made by the datasource. (ie: identity columns)</remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Inserts a row in the table <%=SourceTable.Name%>.")]
	public <%=className%> <%=providerName%>_Insert(<%=className%> entity )
	{
		<%=DALNameSpace%>.DataRepository.<%=providerName%>.Insert(entity);
		return entity;		
	}
	
	/// <summary>
	/// Inserts a <%=collectionClassName%> object into the datasource using a transaction.
	/// </summary>
	/// <param name="entity"><%=collectionClassName%> object to insert.</param>
	/// <remarks>After inserting into the datasource, the <%=className%> object will be updated
	/// to refelect any changes made by the datasource. (ie: identity or computed columns)
	/// </remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Inserts a Bulk set of rows into the table <%=SourceTable.Name%>.")]
	public void <%=providerName%>_BulkInsert(<%=collectionClassName%> entityList )
	{
		<%=DALNameSpace%>.DataRepository.<%=providerName%>.BulkInsert(entityList);
	}
	#endregion "Insert Functions"
	<% } %>
			
	<% if (IncludeUpdate) { %>	
	#region "Update Functions"
		
	/// <summary>
	/// 	Update an existing row in the datasource.
	/// </summary>
	/// <param name="entity"> object to update.</param>
	/// <remarks>After updating the datasource, the object will be updated
	/// to refelect any changes made by the datasource. (ie: identity columns)</remarks>
	/// <returns>Returns true if operation is successful.</returns>
	[WebMethod(Description="Update a row in the table <%=SourceTable.Name%>.")]
	public <%=className%> <%=providerName%>_Update(<%=className%> entity)
	{
		<%=DALNameSpace%>.DataRepository.<%=providerName%>.Update(entity);
		return entity;
	}

	#endregion "Update Functions"
	<% } %>

	<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<%
	System.Diagnostics.Trace.WriteLine(string.Format("{0},{1},{2}", CustomProcedureStartsWith, SourceTable.Name, ProcedurePrefix));
	string prefix = string.Format(CustomProcedureStartsWith, SourceTable.Name, ProcedurePrefix);
	foreach(CommandSchema command in SourceTable.Database.Commands)
	{
		// If the stored procedure is targeting the current table.
		if (command.Name.StartsWith(prefix))
		{
			string methodName = command.Name.Substring(prefix.Length);
			string returnType = "void";
						
			if (IsMatching(command, SourceTable))
			{
				returnType = collectionClassName;
			}
			else	// Return a basic DataSet
			{
				returnType = "DataSet";
			}
%>
	
	/// <summary>
	///	This method wrap the <%=command.Name%> stored procedure. 
	/// </summary>
	[WebMethod(Description="This method wrap the <%=command.Name%> stored procedure.")]
	public <%=returnType%> <%=providerName%>_<%=methodName%>(int start, int pageLength <%=TransformStoredProcedureInputsToMethod(true, command.InputParameters) + TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters)%>)
	{
	    <% if (returnType == "DataSet") { %>
		    return <% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %><%=DALNameSpace%>.Utility.ConvertDataReaderToDataSet(<%}%><%=DALNameSpace%>.DataRepository.<%=providerName%>.<%=methodName%>(start, pageLength <%=TransformStoredProcedureInputsToDataAccess(true, command.InputParameters) + TransformStoredProcedureOutputsToDataAccess(true, command.AllOutputParameters)%>)<% if (CustomNonMatchingReturnType.ToString() == "IDataReader" ) { %>)<%}%>;
	    <% } else { %>
		    return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%=methodName%>(start, pageLength <%=TransformStoredProcedureInputsToDataAccess(true, command.InputParameters)%>);
	    <% } %>
	}
		
<%
		}
	}	
%>
	
	#endregion
	<% } %>

<% } /* END For each DataTable */ %> 
	
	
	/* --------------------------------------------------------
		SQL VIEWS
	----------------------------------------------------------- */
	<% foreach(ViewSchema SourceView in SourceViews)
	{
		string className = NameSpace + "." + GetClassName(SourceView.Name);
		string providerName = GetProviderName(SourceView.Name);		
		string collectionClassName = NameSpace + "." + GetViewCollectionClassName(SourceView.Name);
	 	%>
	
	<% if (IncludeGetList) { %>
	#region "GetList Functions"
		
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <returns>Returns a <s>DataSet</s>.</returns>
	[WebMethod(Description="Get all rows from the view <%=SourceView.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_GetAll(int start, int pageLength)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.GetAll(start, pageLength);
	}
	
	#endregion
	<% } %>
	
	#region "Get search"
	
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query.</param>
	/// <param name="orderBy">Specifies the ORDER By criteria for the rows in the DataSource.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=ClassName%> objects.</returns>
	[WebMethod(Description="Get all rows from the view <%=SourceView.Name%>.")]
	public <%=collectionClassName%> <%=providerName%>_Get(string whereClause, string orderBy, int start, int pageLength)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.Get(whereClause.Length > 0 ? whereClause : null, orderBy.Length > 0 ? orderBy : null, start, pageLength);
	}

	#endregion
	
	<% if (IncludeCustoms) { %>
	#region Custom Methods
	
<%
	string prefix = string.Format(CustomProcedureStartsWith, SourceView.Name, ProcedurePrefix);
	foreach(CommandSchema command in SourceView.Database.Commands)
	{
		// If the stored procedure is targeting the current table.
		if (command.Name.StartsWith(prefix))
		{
			string methodName = command.Name.Substring(prefix.Length);
			string returnType = "void";
			
			if (IsMatching(command, SourceView))
			{
				returnType = collectionClassName;
			}
			else	// Return a basic DataSet
			{
				returnType = "DataSet";
			}
%>
	
	/// <summary>
	///	This method wrap the <%=command.Name%> stored procedure. 
	/// </summary>
	[WebMethod(Description="This method wrap the <%=command.Name%> stored procedure.")]
	public <%=returnType%> <%=providerName%>_<%=methodName%>(int start, int pageLength <%=TransformStoredProcedureInputsToMethod(true, command.InputParameters)%>)
	{
		return <%=DALNameSpace%>.DataRepository.<%=providerName%>.<%=methodName%>(start, pageLength <%=TransformStoredProcedureInputsToDataAccess(true, command.InputParameters)%>);
	}
		
	
<%
		} // end if 
	}	// foreach command
%>
	
	#endregion
	<% } %>
	
<% } %>

	#region "General data access methods"

		#region "ExecuteNonQuery"
		/// <summary>
		/// Executes the non query.
		/// </summary>
		/// <param name="storedProcedureName">Name of the stored procedure.</param>
		/// <param name="parameterValues">The parameter values.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteNonQueryPs", Description="This method wrap the ExecuteNonQuery method provided by the Enterprise Library Data Access Application Block.")]
		public int ExecuteNonQuery(string storedProcedureName, params object[] parameterValues)
		{
			return <%=DALNameSpace%>.DataRepository.Provider.ExecuteNonQuery(storedProcedureName, parameterValues);
		}

		/*
		/// <summary>
		/// Executes the non query.
		/// </summary>
		/// <param name="commandWrapper">The command wrapper.</param>
		[WebMethod(MessageName="ExecuteNonQueryCmd", Description="This method wrap the ExecuteNonQuery method provided by the Enterprise Library Data Access Application Block.")]
		public void ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper commandWrapper)
		{
			<%=DALNameSpace%>.DataRepository.Current.ExecuteNonQuery(commandWrapper);
		}
		*/

		/// <summary>
		/// Executes the non query.
		/// </summary>
		/// <param name="commandType">Type of the command.</param>
		/// <param name="commandText">The command text.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteNonQueryQry", Description="This method wrap the ExecuteNonQuery method provided by the Enterprise Library Data Access Application Block.")]
		public int ExecuteNonQuery(CommandType commandType, string commandText)
		{
			return <%=DALNameSpace%>.DataRepository.Provider.ExecuteNonQuery(commandType, commandText);
		}
		
		#endregion

		#region "ExecuteDataSet"
		/// <summary>
		/// Executes the data set.
		/// </summary>
		/// <param name="storedProcedureName">Name of the stored procedure.</param>
		/// <param name="parameterValues">The parameter values.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteDataSetPs", Description="This method wrap the ExecuteDataSet method provided by the Enterprise Library Data Access Application Block.")]
		public DataSet ExecuteDataSet(string storedProcedureName, params object[] parameterValues)
		{
			return <%=DALNameSpace%>.DataRepository.Provider.ExecuteDataSet(storedProcedureName, parameterValues);
		}
		
		/*
		/// <summary>
		/// Executes the data set.
		/// </summary>
		/// <param name="commandWrapper">The command wrapper.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteDataSetCmd", Description="This method wrap the ExecuteDataSet method provided by the Enterprise Library Data Access Application Block.")]
		public DataSet ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper commandWrapper)
		{
			return <%=DALNameSpace%>.DataRepository.Current.ExecuteDataSet(commandWrapper);
		}
		*/

		/// <summary>
		/// Executes the data set.
		/// </summary>
		/// <param name="commandType">Type of the command.</param>
		/// <param name="commandText">The command text.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteDataSetQry", Description="This method wrap the ExecuteDataSet method provided by the Enterprise Library Data Access Application Block.")]
		public DataSet ExecuteDataSet(CommandType commandType, string commandText)
		{
			return <%=DALNameSpace%>.DataRepository.Provider.ExecuteDataSet(commandType, commandText);
		}		
		#endregion

		#region "ExecuteScalar"
		/// <summary>
		/// Executes the scalar.
		/// </summary>
		/// <param name="storedProcedureName">Name of the stored procedure.</param>
		/// <param name="parameterValues">The parameter values.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteScalarPs", Description="This method wrap the ExecuteScalar method provided by the Enterprise Library Data Access Application Block.")]
		public object ExecuteScalar(string storedProcedureName, params object[] parameterValues)
		{
			return <%=DALNameSpace%>.DataRepository.Provider.ExecuteScalar(storedProcedureName, parameterValues);
		}	

		/*
		/// <summary>
		/// Executes the scalar.
		/// </summary>
		/// <param name="commandWrapper">The command wrapper.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteScalarCmd", Description="This method wrap the ExecuteScalar method provided by the Enterprise Library Data Access Application Block.")]
		public object ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.DBCommandWrapper commandWrapper)
		{
			return <%=DALNameSpace%>.DataRepository.Current.ExecuteScalar(commandWrapper);
		}
		*/

		/// <summary>
		/// Executes the scalar.
		/// </summary>
		/// <param name="commandType">Type of the command.</param>
		/// <param name="commandText">The command text.</param>
		/// <returns></returns>
		[WebMethod(MessageName="ExecuteScalarQry", Description="This method wrap the ExecuteScalar method provided by the Enterprise Library Data Access Application Block.")]
		public object ExecuteScalar(CommandType commandType, string commandText)
		{
			return <%=DALNameSpace%>.DataRepository.Provider.ExecuteScalar(commandType, commandText);	
		}
		
		#endregion

		#endregion
}