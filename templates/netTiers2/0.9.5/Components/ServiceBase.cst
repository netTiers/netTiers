<%--
 * $Id: IEntity.cst,v 1.13 2006/02/27 22:09:40 bgjohnso Exp $
 * Last modified by $Author: bgjohnso $
 * Last modified at $Date: 2006/02/27 22:09:40 $
 * $Revision: 1.13 $
--%>
<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="The interface that each business object of the domain implements."%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="True" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert functions will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update functions will be generated." %>
<%@ Property Name="IncludeSave" Type="System.Boolean" Default="True" Category="Options" Description="If true combined insert/update functions will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete functions will be generated." %>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="True" Category="Options" Description="If true select statements will be generated for any many to many relationship." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="True" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="BLL Object Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="DAL Object Namespace." %>
<%@ Property Name="NameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Assembly Name="SchemaExplorer" %>
#region Using Directives
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;

using <%=BLLNameSpace%>;
using <%=DALNameSpace%>;
#endregion

namespace <%= NameSpace %>
{
	/// <summary>
	/// The base class that each component business domain service of the model implements.
	/// </summary>
	public abstract partial class ServiceBase<Entity, EntityKey> : ServiceBaseCore<Entity, EntityKey>, IEntityProvider<Entity, EntityKey>	
		where Entity : IEntityId<EntityKey>, new() 
		where EntityKey : IEntityKey, new()
	{
		<%--
		#region UnImplemented Methods
		/// <summary>
	    /// Gets a row from the DataSource based on its primary key.
	    /// </summary>
	    /// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
	    /// <param name="key">The unique identifier of the row to retrieve.</param>
	    /// <param name="start">Row number at which to start reading.</param>
	    /// <param name="pageLength">Number of rows to return.</param>
	    /// <returns>Returns an instance of the Entity class.</returns>
	    public override Entity Get(TransactionManager mgr, EntityKey key, int start, int pageLength)
	    {
	        throw new NotImplementedException();
	    }

	    /// <summary>
	    /// Gets all rows from the DataSource.
	    /// </summary>
	    /// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
	    /// <param name="start">Row number at which to start reading.</param>
	    /// <param name="pageLength">Number of rows to return.</param>
	    /// <param name="count">out. The number of rows that match this query.</param>
	    /// <returns>Returns a TList of Entity objects.</returns>
	    public override TList<Entity> GetAll(TransactionManager mgr, int start, int pageLength, out int count)
	    {
	        throw new NotImplementedException();
	    }

	    /// <summary>
	    /// Gets a page of rows from the DataSource.
	    /// </summary>
	    /// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
	    /// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	    /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
	    /// <param name="start">Row number at which to start reading.</param>
	    /// <param name="pageLength">Number of rows to return.</param>
	    /// <param name="count">Number of rows in the DataSource.</param>
	    /// <returns>Returns a TList of Entity objects.</returns>
	    public override TList<Entity> GetPaged(TransactionManager mgr, string whereClause, string orderBy, int start,
	                                           int pageLength, out int count)
	    {
	        throw new NotImplementedException();
	    }

	    /// <summary>
	    /// Returns rows meeting the whereClause condition from the DataSource.
	    /// </summary>
	    /// <param name="transactionManager">A <see cref="TransactionManager"/> object.</param>
	    /// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	    /// <param name="start">Row number at which to start reading.</param>
	    /// <param name="pageLength">Number of rows to return.</param>
	    /// <param name="count">out parameter to get total records for query</param>
	    /// <remarks>Operators must be capitalized (OR, AND)</remarks>
	    /// <returns>Returns a typed collection of Entity objects.</returns>
	    public override TList<Entity> Find(TransactionManager transactionManager, string whereClause, int start,
	                                       int pageLength, out int count)
	    {
	        throw new NotImplementedException();
	    }

	    /// <summary>
	    /// Inserts a row into the DataSource.
	    /// </summary>
	    /// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
	    /// <param name="entity">The Entity object to insert.</param>
	    /// <returns>Returns true if the operation is successful.</returns>
	    public override bool Insert(TransactionManager mgr, Entity entity)
	    {
	        throw new NotImplementedException();
	    }

	    /// <summary>
	    /// Updates an existing row in the DataSource.
	    /// </summary>
	    /// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
	    /// <param name="entity">The Entity object to update.</param>
	    /// <returns>Returns true if the operation is successful.</returns>
	    public override bool Update(TransactionManager mgr, Entity entity)
	    {
	        throw new NotImplementedException();
	    }

	    /// <summary>
	    /// Deletes a row from the DataSource.
	    /// </summary>
	    /// <param name="mgr">A <see cref="TransactionManager"/> object.</param>
	    /// <param name="key">The unique identifier of the row to delete.</param>
	    /// <returns>Returns true if the operation is successful.</returns>
	    public override bool Delete(TransactionManager mgr, EntityKey key)
	    {
	        throw new NotImplementedException();
	    }
		#endregion
		--%>
	}
}
