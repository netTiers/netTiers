<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="The interface that each business object of the domain implements."%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Property Name="NameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="BLLNameSpace" Optional="False" Type="System.String" Category="Style" Description="Object Namespace." %>
<%@ Property Name="DALNameSpace" Optional="False" Type="System.String" Category="Style" Description="Repository Namespace." %>
<%@ Assembly Name="SchemaExplorer" %>
using System;
using System.Collections.Generic;
using System.Collections;
using System.Text;

using <%= BLLNameSpace %>;
using <%= DALNameSpace %>;
using <%= DALNameSpace %>.Bases;

using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace <%= NameSpace %>
{
	/// <summary>
	/// DomainUtil class.
	/// </summary>
    [Serializable]
    public static class DomainUtil
	{
		
        /// <summary>
        /// Aggregates all the errors in a collection
        /// </summary>
        public static string GetErrorsFromList<T>(TList<T> list) where T : EntityBase, new()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            foreach (T entity in list.InvalidItems)
            {
                if (entity != null)
                    builder.Append(entity.Error);
            }

            return builder.ToString();
        }		
		
		/// <summary>
		/// Wraps call to tohe <see cref="ExceptionPolicy"/> class which handles all exceptions based on the security policy.
		/// </summary>
		public static bool HandleException(Exception e, string policyName)
		{
			try
            {
				return ExceptionPolicy.HandleException(e, policyName);
            }
            catch (System.Configuration.ConfigurationErrorsException)
            {
				return true;
            }
		}

	}
}