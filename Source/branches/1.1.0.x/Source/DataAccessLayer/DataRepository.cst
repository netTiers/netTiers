<%@ CodeTemplate Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." Debug="False"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="Object Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="SourceViews" Type="SchemaExplorer.ViewSchemaCollection" Category="Connection" Description="Tables of the system." %>

#region Using directives

using System;
using <%=NameSpace%>;
using <%=DALNameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>
{
	/// <summary>
	/// This class represents the Data source repository and gives access to all the underlying providers.
	/// </summary>
	[CLSCompliant(true)]
	public sealed class DataRepository /*: DataProviderBase*/
	{
		private static object syncRoot = new Object();
		private static DataProviderBase innerDataProvider;
				
		private DataRepository()
		{
		}
		
		/// <summary>
		/// Gets the <see cref="DataProviderBase"/> instance with the specified name.
		/// </summary>
		/// <param name="providerName">Name of the provider.</param>
		/// <returns></returns>
		public static DataProviderBase GetDataProvider(string providerName)
		{
			//NetTiers.Configuration.DataProviderData dpd = Configuration.Current.DataProviderDataCollection[providerName];
			//Type providerType = System.Reflection.Assembly.GetExecutingAssembly().GetType("<%=DALNameSpace%>." + dpd.TypeName);
			//return (DataProviderBase)Activator.CreateInstance(providerType, new object[] {dpd.Name});
			
			NetTiers.Configuration.DataProviderData dpd = Configuration.Current.DataProviderDataCollection[providerName];
			
			string providerTypeName = "<%=DALNameSpace%>." + dpd.TypeName + ", <%=DALNameSpace%>." + dpd.TypeName.Split('.')[0];
					
						
			Type providerType = Type.GetType(providerTypeName);
			
			//System.Reflection.Assembly ass = System.Reflection.Assembly.LoadWithPartialName(dpd.MyProvider.Split(',')[0]);
			//Type providerType = ass.GetType(dpd.MyProvider.Split(',')[1]); 				
			
			return (DataProviderBase)Activator.CreateInstance(providerType, new object[] {dpd.Name});
		}							

		/// <summary>
		/// The internal IDataProvider instance, defines as singleton.
		/// </summary>
		/// <remarks>Uses reflection to instanciate the IDataProvider instance.</remarks>
		public static DataProviderBase Current
		{
			get 
			{
				if (innerDataProvider == null) 
				{
					lock (syncRoot) 
					{
						if (innerDataProvider == null)
						{
							innerDataProvider = GetDataProvider(Configuration.Current.DefaultDataProviderSettings.Name);
						}
					}
				}
				return innerDataProvider;
			}
		}
		
		/// <summary>
		/// Creates a new <c cref="TransactionManager"/> instance from the current datasource.
		/// </summary>
		/// <returns></returns>
		public TransactionManager CreateTransaction()
		{
			return Current.CreateTransaction();
		}	
		
		#region "Static properties"
		
		<% foreach(TableSchema SourceTable in SourceTables) { 
			string className = GetClassName(SourceTable.Name);
			string providerName = GetProviderName(SourceTable.Name);
			string providerBaseName = GetProviderBaseName(SourceTable.Name);
		%>
		
		
		#region "<%=providerName%>"
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="<%=className%>"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public /*new*/ static <%=providerBaseName%> <%=providerName%>
		{
			get 
			{
				return Current.<%=providerName%>;
			}
		}
		
		#endregion
		
		<%}%>
		
		<% foreach(ViewSchema SourceView in SourceViews) { 
			string className = GetClassName(SourceView.Name);
			string providerName = GetProviderName(SourceView.Name);
			string providerBaseName = GetProviderBaseName(SourceView.Name);
		%>			
		
		
		#region "<%=providerName%>"
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="<%=className%>"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public /*new*/ static <%=providerBaseName%> <%=providerName%>
		{
			get 
			{
				return Current.<%=providerName%>;
			}
		}
		
		#endregion
		<%}%>
		
		#endregion
		
	}
}
