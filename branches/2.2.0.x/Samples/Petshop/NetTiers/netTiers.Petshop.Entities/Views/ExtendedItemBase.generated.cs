/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, July 24, 2006
	Important: Do not modify this file. Edit the file ExtendedItem.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace netTiers.Petshop.Entities
{
	///<summary>
	/// An object representation of the 'ExtendedItem' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ExtendedItemBase")]
	public abstract partial class ExtendedItemBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ItemId : 
		/// </summary>
		private System.Guid		  _itemId = Guid.Empty;
		
		/// <summary>
		/// ItemName : 
		/// </summary>
		private System.String		  _itemName = string.Empty;
		
		/// <summary>
		/// ItemDescription : 
		/// </summary>
		private System.String		  _itemDescription = null;
		
		/// <summary>
		/// ItemPrice : 
		/// </summary>
		private System.Double?		  _itemPrice = 0.0f;
		
		/// <summary>
		/// ItemPhoto : 
		/// </summary>
		private System.String		  _itemPhoto = null;
		
		/// <summary>
		/// ProductId : 
		/// </summary>
		private System.Guid		  _productId = Guid.Empty;
		
		/// <summary>
		/// ProductName : 
		/// </summary>
		private System.String		  _productName = string.Empty;
		
		/// <summary>
		/// ProductDescription : 
		/// </summary>
		private System.String		  _productDescription = null;
		
		/// <summary>
		/// CategoryId : 
		/// </summary>
		private System.Guid		  _categoryId = Guid.Empty;
		
		/// <summary>
		/// CategoryName : 
		/// </summary>
		private System.String		  _categoryName = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ExtendedItemBase"/> instance.
		///</summary>
		public ExtendedItemBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ExtendedItemBase"/> instance.
		///</summary>
		///<param name="itemId"></param>
		///<param name="itemName"></param>
		///<param name="itemDescription"></param>
		///<param name="itemPrice"></param>
		///<param name="itemPhoto"></param>
		///<param name="productId"></param>
		///<param name="productName"></param>
		///<param name="productDescription"></param>
		///<param name="categoryId"></param>
		///<param name="categoryName"></param>
		public ExtendedItemBase(System.Guid itemId, System.String itemName, System.String itemDescription, System.Double? itemPrice, System.String itemPhoto, System.Guid productId, System.String productName, System.String productDescription, System.Guid categoryId, System.String categoryName)
		{
			this._itemId = itemId;
			this._itemName = itemName;
			this._itemDescription = itemDescription;
			this._itemPrice = itemPrice;
			this._itemPhoto = itemPhoto;
			this._productId = productId;
			this._productName = productName;
			this._productDescription = productDescription;
			this._categoryId = categoryId;
			this._categoryName = categoryName;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ExtendedItem"/> instance.
		///</summary>
		///<param name="itemId"></param>
		///<param name="itemName"></param>
		///<param name="itemDescription"></param>
		///<param name="itemPrice"></param>
		///<param name="itemPhoto"></param>
		///<param name="productId"></param>
		///<param name="productName"></param>
		///<param name="productDescription"></param>
		///<param name="categoryId"></param>
		///<param name="categoryName"></param>
		public static ExtendedItem CreateExtendedItem(System.Guid itemId, System.String itemName, System.String itemDescription, System.Double? itemPrice, System.String itemPhoto, System.Guid productId, System.String productName, System.String productDescription, System.Guid categoryId, System.String categoryName)
		{
			ExtendedItem newExtendedItem = new ExtendedItem();
			newExtendedItem.ItemId = itemId;
			newExtendedItem.ItemName = itemName;
			newExtendedItem.ItemDescription = itemDescription;
			newExtendedItem.ItemPrice = itemPrice;
			newExtendedItem.ItemPhoto = itemPhoto;
			newExtendedItem.ProductId = productId;
			newExtendedItem.ProductName = productName;
			newExtendedItem.ProductDescription = productDescription;
			newExtendedItem.CategoryId = categoryId;
			newExtendedItem.CategoryName = categoryName;
			return newExtendedItem;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ItemId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.Guid ItemId
		{
			get
			{
				return this._itemId; 
			}
			set
			{
				if (_itemId == value)
					return;
					
				this._itemId = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ItemId.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ItemName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String ItemName
		{
			get
			{
				return this._itemName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ItemName does not allow null values.");
				if (_itemName == value)
					return;
					
				this._itemName = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ItemName.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ItemDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String ItemDescription
		{
			get
			{
				return this._itemDescription; 
			}
			set
			{
				if (_itemDescription == value)
					return;
					
				this._itemDescription = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ItemDescription.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ItemPrice property. 
		///		
		/// </summary>
		/// <value>This type is float</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsItemPriceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.Double? ItemPrice
		{
			get
			{
				return this._itemPrice; 
			}
			set
			{
				if (_itemPrice == value && ItemPrice != null )
					return;
					
				this._itemPrice = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ItemPrice.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ItemPhoto property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String ItemPhoto
		{
			get
			{
				return this._itemPhoto; 
			}
			set
			{
				if (_itemPhoto == value)
					return;
					
				this._itemPhoto = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ItemPhoto.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProductId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.Guid ProductId
		{
			get
			{
				return this._productId; 
			}
			set
			{
				if (_productId == value)
					return;
					
				this._productId = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ProductId.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProductName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String ProductName
		{
			get
			{
				return this._productName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ProductName does not allow null values.");
				if (_productName == value)
					return;
					
				this._productName = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ProductName.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProductDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String ProductDescription
		{
			get
			{
				return this._productDescription; 
			}
			set
			{
				if (_productDescription == value)
					return;
					
				this._productDescription = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.ProductDescription.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CategoryId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.Guid CategoryId
		{
			get
			{
				return this._categoryId; 
			}
			set
			{
				if (_categoryId == value)
					return;
					
				this._categoryId = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.CategoryId.ToString());
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CategoryName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), BindableAttribute()]
		public virtual System.String CategoryName
		{
			get
			{
				return this._categoryName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CategoryName does not allow null values.");
				if (_categoryName == value)
					return;
					
				this._categoryName = value;
				this._isDirty = true;	
				OnPropertyChanged(ExtendedItemColumn.CategoryName.ToString());
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "ExtendedItem"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  TODO: Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges(){
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ExtendedItemBase Entity 
		///</summary>
		public virtual ExtendedItemBase Copy()
		{
			//shallow copy entity
			ExtendedItem copy = new ExtendedItem();
				copy.ItemId = this.ItemId;
				copy.ItemName = this.ItemName;
				copy.ItemDescription = this.ItemDescription;
				copy.ItemPrice = this.ItemPrice;
				copy.ItemPhoto = this.ItemPhoto;
				copy.ProductId = this.ProductId;
				copy.ProductName = this.ProductName;
				copy.ProductDescription = this.ProductDescription;
				copy.CategoryId = this.CategoryId;
				copy.CategoryName = this.CategoryName;
			copy.AcceptChanges();
			return (ExtendedItem)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ExtendedItemBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ExtendedItemBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ExtendedItemBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ExtendedItemBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ExtendedItemBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ExtendedItemBase Object1, ExtendedItemBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ItemId != Object2.ItemId)
				equal = false;
			if (Object1.ItemName != Object2.ItemName)
				equal = false;
			if (Object1.ItemDescription != null && Object2.ItemDescription != null )
			{
				if (Object1.ItemDescription != Object2.ItemDescription)
					equal = false;
			}
			else if (Object1.ItemDescription == null ^ Object1.ItemDescription == null )
			{
				equal = false;
			}
			if (Object1.ItemPrice != null && Object2.ItemPrice != null )
			{
				if (Object1.ItemPrice != Object2.ItemPrice)
					equal = false;
			}
			else if (Object1.ItemPrice == null ^ Object1.ItemPrice == null )
			{
				equal = false;
			}
			if (Object1.ItemPhoto != null && Object2.ItemPhoto != null )
			{
				if (Object1.ItemPhoto != Object2.ItemPhoto)
					equal = false;
			}
			else if (Object1.ItemPhoto == null ^ Object1.ItemPhoto == null )
			{
				equal = false;
			}
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if (Object1.ProductName != Object2.ProductName)
				equal = false;
			if (Object1.ProductDescription != null && Object2.ProductDescription != null )
			{
				if (Object1.ProductDescription != Object2.ProductDescription)
					equal = false;
			}
			else if (Object1.ProductDescription == null ^ Object1.ProductDescription == null )
			{
				equal = false;
			}
			if (Object1.CategoryId != Object2.CategoryId)
				equal = false;
			if (Object1.CategoryName != Object2.CategoryName)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			// TODO compare each column
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (null != PropertyChanged)
			{
				PropertyChanged(this, e);
			}
		}
		
		#endregion
		
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- ItemId: {0}{10}- ItemName: {1}{10}- ItemDescription: {2}{10}- ItemPrice: {3}{10}- ItemPhoto: {4}{10}- ProductId: {5}{10}- ProductName: {6}{10}- ProductDescription: {7}{10}- CategoryId: {8}{10}- CategoryName: {9}{10}", 
				this.ItemId,
				this.ItemName,
				(this.ItemDescription == null) ? string.Empty : this.ItemDescription.ToString(),
			     
				(this.ItemPrice == null) ? string.Empty : this.ItemPrice.ToString(),
			     
				(this.ItemPhoto == null) ? string.Empty : this.ItemPhoto.ToString(),
			     
				this.ProductId,
				this.ProductName,
				(this.ProductDescription == null) ? string.Empty : this.ProductDescription.ToString(),
			     
				this.CategoryId,
				this.CategoryName,
				Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ExtendedItem columns.
	/// </summary>
	[Serializable]
	public enum ExtendedItemColumn
	{
		/// <summary>
		/// ItemId : 
		/// </summary>
		ItemId,
		/// <summary>
		/// ItemName : 
		/// </summary>
		ItemName,
		/// <summary>
		/// ItemDescription : 
		/// </summary>
		ItemDescription,
		/// <summary>
		/// ItemPrice : 
		/// </summary>
		ItemPrice,
		/// <summary>
		/// ItemPhoto : 
		/// </summary>
		ItemPhoto,
		/// <summary>
		/// ProductId : 
		/// </summary>
		ProductId,
		/// <summary>
		/// ProductName : 
		/// </summary>
		ProductName,
		/// <summary>
		/// ProductDescription : 
		/// </summary>
		ProductDescription,
		/// <summary>
		/// CategoryId : 
		/// </summary>
		CategoryId,
		/// <summary>
		/// CategoryName : 
		/// </summary>
		CategoryName
	}//End enum

} // end namespace
