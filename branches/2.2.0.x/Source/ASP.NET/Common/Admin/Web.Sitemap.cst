<%@ CodeTemplate Src="..\..\..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Generates Entity Fields to be used from within EntityEdit screen" Debug="True" ResponseEncoding="UTF-8" NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the system." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="DataSource" 	Description="Database that the stored procedures should be based on." %>
<?xml version="1.0" encoding="utf-8" ?>
<siteMap xmlns="http://schemas.microsoft.com/AspNet/SiteMap-File-1.0" >
  
    <siteMapNode url="" title="Admin"  description="">
        <siteMapNode url="~/Admin/Default.aspx" title="Admin"  description="Admin" />  
<%
	SourceTables.Sort(new tableSchemaComparer());
	foreach (TableSchema table in SourceTables)
	{
		string entityName = GetClassName(table);
%>
	<siteMapNode url="~/Admin/<%=entityName%>.aspx" title="<%=GetFriendlyName(table)%>"  description="" />
<%		
	}
%>
        </siteMapNode>              
</siteMap>
<script runat="template">

	public class tableSchemaComparer : IComparer  
	{
      	int IComparer.Compare( Object x, Object y )  
		{
			if (x is TableSchema && y is TableSchema)
          		return( (new CaseInsensitiveComparer()).Compare( ((TableSchema)x).Name,  ((TableSchema)y).Name ) );
				
			throw new ArgumentException("one or both object(s) are not of type TableSchema");
		}				
  	}
</script>
