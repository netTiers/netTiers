<%@ CodeTemplate Src="..\TemplateLib\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Business Entity Interface" Debug="True" ResponseEncoding="UTF-8"  NoWarn="0108,0618,1572,1573,1574,0162,2002" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="Connection" Description="Tables of the sytem." %>
<%@ Property Name="SerializeEntityState" Type="System.Boolean" Default="False" Category="02. Framework Generation - Optional" Description="Indicates if the EntityState property should be included in serialization." %>

<%@ Property Name="IncludeRelations" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
<%@ Property Name="IncludeManyToMany" Type="System.Boolean" Default="False" Category="Options" Description="Include Collections for Related Entities."%>
	
<%@ Property Name="NameSpace" Optional="True" Type="System.String" Category="Style" Description="Object Namespace." %>
<%		
	
	//Get the columns that are common to all tables
	ColumnSchemaCollection commonColumns = GetCommonTableColumns(SourceTables);

	string interfaceName = GetClassName(SourceTable, ClassNameFormat.Interface);
%>
using System;
using System.ComponentModel;

namespace <%=NameSpace%>
{
	/// <summary>
	///		The data structure representation of the '<%=SourceTable.Name%>' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface <%=interfaceName%> 
	{
		<%
			for(int i=0; i<SourceTable.PrimaryKey.MemberColumns.Count; i++)
			{%>
		/// <summary>			
		/// <%=SourceTable.PrimaryKey.MemberColumns[i].Name%> : <%= GetColumnXmlComment(SourceTable.PrimaryKey.MemberColumns[i],2)%>
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "<%=SourceTable.Name%>"</remarks>
		<%= GetCSType(SourceTable.PrimaryKey.MemberColumns[i]) %> <%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%> { get; set; }
				
			<%
				if (!IsIdentityColumn(SourceTable.PrimaryKey.MemberColumns[i]) && !(IsComputed(SourceTable.PrimaryKey.MemberColumns[i])))
				{%>
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		<%= GetCSType(SourceTable.PrimaryKey.MemberColumns[i]) %> <%=GetOriginalPropertyName(SourceTable.PrimaryKey.MemberColumns[i])%> { get; set; }
			
				<%}
			}%>
		
		<% for (int x=0; x < SourceTable.NonPrimaryKeyColumns.Count; x++) { %>
		
		/// <summary>
		/// <%=SourceTable.NonPrimaryKeyColumns[x].Name%> : <%=GetColumnXmlComment(SourceTable.NonPrimaryKeyColumns[x],2)%>
		/// </summary>
		<%= GetCSType(SourceTable.NonPrimaryKeyColumns[x]) %>  <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[x]) %>  { get; set; }
		<% } //end for each non PK column %>
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
<% 
		
if(IncludeRelations)
{	
	Response.Write("\t\t#region Data Properties"+Environment.NewLine);
	WriteRelationshipPropertyString();
	Response.Write(Environment.NewLine + "\t\t#endregion Data Properties"+ Environment.NewLine );
}
		
%>

	}
}
<script runat="template">
///<summary>
/// Many To Many Relationship Class Template Property String
///</summary>
protected static string MANY_TO_MANY = @"
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table {2}
		/// </summary>	
		{1} {0} {{ get; set; }}	
";

///<summary>
/// One to One Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_ONE = @"	

		/// <summary>
		///	Holds a  {2} entity object
		///	which is related to this object through the relation {1}
		/// </summary>
		{2} {0} {{ get; set; }}
";
		
///<summary>
/// One To Many Relationship Class Template Property String
///</summary>		
protected static string ONE_TO_MANY = @"

		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation {1}
		/// </summary>	
		{2} {0} {{  get;  set;}}	
";
		
///<summary>
///   Writes out the property string of all the relationship object collections.
///</summary>
private void WriteRelationshipPropertyString()
{	
	///Loop Child Collections
	foreach (CollectionInfo item in GetChildrenCollections(SourceTable, SourceTables).Values)
	{
		///Assign by RelationshipType, Then Write to Response
		switch((int)item.CollectionRelationshipType)
		{
			///One To One Relationship
			case (int)RelationshipType.OneToOne:			
				object[] oneToOneParams = {
							item.PropertyNameUnique,
							item.FieldName,
							item.TypeName
				};
				item.PropertyName = string.Format(ONE_TO_ONE, oneToOneParams);
				break;
				
			///One To Many, Many To One
			case (int)RelationshipType.OneToMany:
			case (int)RelationshipType.ManyToOne:
			    object[] oneToManyParams = {
						  item.PropertyNameUnique
						, item.FieldName
						, item.CollectionTypeName
				};
			item.PropertyName = string.Format(ONE_TO_MANY, oneToManyParams);
			break;
			
			///Many To Many
			case (int)RelationshipType.ManyToMany:
				object[] manyToManyParams = {
						item.PropertyNameUnique,
						item.CollectionTypeName,
						item.FieldName
				};
				item.PropertyName = string.Format(MANY_TO_MANY, manyToManyParams);
				break;
			default:
				break;
		}
		
		///Write it out to the response stream
		Response.Write(item.PropertyName);	
	
	}///End foreach loop
}

public string GetParsedDefaultValue(int x)
{
	if (!ParseDbColDefaultVal 
		&& SourceTable.NonPrimaryKeyColumns[x].AllowDBNull)
	{
		return "null";
	}
	else if (!ParseDbColDefaultVal && !SourceTable.NonPrimaryKeyColumns[x].AllowDBNull)
	{
		return GetCSDefaultByType(SourceTable.NonPrimaryKeyColumns[x]); 
	}
	else
	{
		string val = GetCSDefaultByType(SourceTable.NonPrimaryKeyColumns[x]); 
		string defaultVal = GetCSDefaultByType(SourceTable.NonPrimaryKeyColumns[x], true);
		
		if (val == defaultVal
			&& SourceTable.NonPrimaryKeyColumns[x].AllowDBNull)
			return "null";
		else 
			return val;
	}
}
</script>


