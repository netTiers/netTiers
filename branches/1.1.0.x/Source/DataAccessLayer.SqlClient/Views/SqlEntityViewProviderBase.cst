<%--
 * $Id: SqlEntityViewProviderBase.cst,v 1.2 2005/11/17 08:42:02 jroland Exp $
 * Last modified by $Author$
 * Last modified at $Date$
 * $Revision$
--%>
<%@ CodeTemplate Src="..\..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Language="C#" TargetLanguage="C#" Description="Template description here." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table that the data access class should be based on." %>

<%@ Property Name="IncludeCustoms" Type="System.Boolean" Default="True" Category="Options" Description="If true customs stored procedures will be generated as functions." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeGetListByFK" Type="System.Boolean" Default="True" Category="Options" Description="If true get functions will be generated." %>
<%@ Property Name="IncludeGetListByIX" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist functions will be generated." %>
<%@ Property Name="IncludeFind" Type="System.Boolean" Default="False" Category="Options" Description="If true find functions will be generated." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="_Get" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="FindSuffix" Type="System.String" Default="_Find" Category="Style" Description="Suffix to use for all generated SELECT functions." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Style" Description="Class Namespace." %>
<%@ Property Name="DALNameSpace" Type="System.String" Category="Data" Description="DAL Namespace." %>
<%@ Property Name="ProcedurePrefix" Optional="True" Type="System.String" Category="Style" Description="Prefix for Strored Procedures" %>
<%
	// Name of the table being worked on.
	string name = SourceView.Name;
		
	string className = GetClassName(SourceView.Name);
	string abstractRepositoryClassName = "Sql" + GetProviderBaseName(SourceView.Name);
	string providerName = GetProviderName(SourceView.Name);
	string providerBaseName = GetProviderBaseName(SourceView.Name);
	string collectionClassName = GetCollectionClassName(SourceView.Name);
		
	// this array store each Get BY MemberColumns in order to avoid to create doublon Get methods
	System.Collections.ArrayList getbyKeys = new System.Collections.ArrayList();
%>
#region "Using directives"

using System;
using System.Data;
using System.Data.SqlClient;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Collections;
using System.Diagnostics;
using <%=NameSpace%>;
using <%=DALNameSpace%>.Bases;

#endregion

namespace <%=DALNameSpace%>.SqlClient
{

/// <summary>
///	This class is the base repository for the CRUD operations on the <%=className%> objects.
/// </summary>
public abstract class Sql<%=providerBaseName%> : <%=providerBaseName%>
{
	#region "Declarations"	
	
	/// <summary>
	/// the <see cref="NetTiers.Configuration.SqlDataProviderData"/> instance that hold the current database configuration data used by enterprise library.
	/// </summary>
	private NetTiers.Configuration.SqlDataProviderData sqlDataProviderData;
		
	#endregion "Declarations"
		
	#region "Constructors"
	

	/// <summary>
	/// Creates a new <see cref="Sql<%=providerBaseName%>"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	protected Sql<%=providerBaseName%>()
	{		
	}
	
	/// <summary>
	/// Creates a new <see cref="Sql<%=providerBaseName%>"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="providerData">A <see cref="NetTiers.Configuration.SqlDataProviderData"/> instance the hold the settings for the sql provider.</param>
	protected Sql<%=providerBaseName%>(NetTiers.Configuration.SqlDataProviderData providerData)
	{
		this.sqlDataProviderData = providerData;
	}
			
	#endregion "Constructors"
	
	#region Public properties
	
	///<summary>
	/// Gets or sets the <see cref="NetTiers.Configuration.SqlDataProviderData"/> instance.
	///</summary>
	///<value></value>
	public NetTiers.Configuration.SqlDataProviderData SqlDataProviderData
	{
		get {return this.sqlDataProviderData;}
		set {this.sqlDataProviderData = value;}
	}	
	
	#endregion
	
		
	<%/*	
		-------------------------------
		GET LIST FUNCTIONS
		-------------------------------
	*/%>
<% if (IncludeGetList) { %>
	#region "GetList Functions"
	
	/// <summary>
	/// 	Gets All rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> GetAll(TransactionManager transactionManager, int start, int pageLength)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=ProcedurePrefix + GetCleanName(name) + SelectSuffix + SelectAllSuffix%>");
		
		IDataReader reader;
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}

		//Create Collection
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		Fill(reader, rows, start, pageLength);
		reader.Close();
		return rows;
	}//end getall
	
	#endregion
	
	#region "Get filterd and sorted"
			
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of <%=className%> objects.</returns>
	public override <%=collectionClassName%> Get(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "<%=ProcedurePrefix + GetCleanName(name) + SelectSuffix%>");

		//commandWrapper.AddInParameter("@PageIndex", DbType.Int32, start);
		//commandWrapper.AddInParameter("@PageSize", DbType.Int32, pageLength);
		commandWrapper.AddInParameter("@WhereClause", DbType.String, whereClause);
		commandWrapper.AddInParameter("@OrderBy", DbType.String, orderBy);
	
		IDataReader reader;
			
		try
		{
			if (transactionManager != null)
			{
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException error.", ex);
		}

		//reader.Read();
		//count = reader.GetInt32(0);
		//reader.NextResult();

		//Create Collection
		<%=collectionClassName%> rows = new <%=collectionClassName%>();
		Fill(reader, rows, start, pageLength);
		reader.Close();
		return rows;
	}
	
	#endregion
	
<%
 	} //end IncludeGetList
%>
	

<%/*---------------------------------------------------------------------------------
							CUSTOM STORED PROCEDURES
  -------------------------------------------------------------------------------*/%>

<% if (IncludeCustoms) { %>

	#region "Custom Methods"
	
<% 
	string prefix = "_" + SourceView.Name + "_";
	foreach(CommandSchema command in SourceView.Database.Commands)
	{
		//Response.WriteLine("// " + command.Name);
	
		// If the stored procedure is targeting the current table.
		if (command.Name.StartsWith(prefix))
		{
			string methodName = command.Name.Substring(prefix.Length);
			string returnType = CustomMethodReturnType(command,collectionClassName,SourceView);
%>
	#region "<%=command.Name%>"
	
	/// <summary>
	///	This method wrap the '<%=command.Name%>' stored procedure. 
	/// </summary><%=TransformStoredProcedureInputsToMethodComments(command.InputParameters)+ TransformStoredProcedureOutputsToMethodComments(command.AllOutputParameters)%>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generate from a stored procedure.</remark>
	/// <returns>A <see cref="<%=returnType%>"/> instance.</returns>
	public override <%=returnType%> <%=methodName%>(TransactionManager transactionManager <%if(returnType == collectionClassName){%>, int start, int pageLength <%}%>  <%=TransformStoredProcedureInputsToMethod(true, command.InputParameters)+ TransformStoredProcedureOutputsToMethod(true, command.AllOutputParameters)%>)
	{
		Database database = transactionManager != null ? transactionManager.Database : DatabaseFactory.CreateDatabase(this.sqlDataProviderData.DatabaseInstanceName);
		DBCommandWrapper commandWrapper = database.GetStoredProcCommandWrapper("<%=command.Name%>");
		
		<% foreach(ParameterSchema col in command.InputParameters)	{ %>
		commandWrapper.AddInParameter("@<%=GetPropertyName(col.Name)%>", DbType.<%=col.DataType.ToString()%>,  <% if (col.AllowDBNull) { %>Utility.DefaultToDBNull(<%=GetPrivateName(col.Name)%>, DbType.<%= col.DataType.ToString() %>) <%} else {%><%=GetPrivateName(col.Name)%> <%}%>);
		<%}%>
		
		<% foreach(ParameterSchema col in command.AllOutputParameters)	{ %>
		commandWrapper.AddOutParameter("@<%=GetPropertyName(col.Name)%>",DbType.<%=col.DataType.ToString()%>,<%= col.Size.ToString() %>);
				
		<%}%>
		
		<%
			//Set up the output params
			StringBuilder outputValues = new StringBuilder();
			
			foreach(ParameterSchema outParam in command.AllOutputParameters)
			{
				outputValues.AppendFormat("\t\t\t{0} =  ({1})commandWrapper.GetParameterValue(\"@{2}\");\n",
				GetPrivateName(outParam.Name), 
				GetCSType(outParam), 
				GetPropertyName(outParam.Name)); 
	
			}
		%>

		try
		{

		<% if (returnType == "DataSet") { %>
			DataSet ds = null;
			
			if (transactionManager != null)
			{	
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				ds = database.ExecuteDataSet(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				ds = database.ExecuteDataSet(commandWrapper);
			}
<%=outputValues.ToString()%>			
			return ds;
			
		<% } else if (returnType == "void") { %>
			if (transactionManager != null)
			{	
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				database.ExecuteNonQuery(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				database.ExecuteNonQuery(commandWrapper);
			}
<%=outputValues.ToString()%>			
			return;
			
		<% } else if 	(returnType == collectionClassName) { %>
			IDataReader reader = null;

			if (transactionManager != null)
			{	
				if (!transactionManager.IsOpen) throw new DataException("Transaction must be open before executing a query.");
				reader = database.ExecuteReader(commandWrapper, transactionManager.TransactionObject);
			}
			else
			{
				reader = database.ExecuteReader(commandWrapper);
			}			
			
			//Create Collection
			<% if (returnType == collectionClassName) {%>
				<%=collectionClassName%> rows = new <%=collectionClassName%>();
				Fill(reader, rows, start, pageLength);
				reader.Close();
<%=outputValues.ToString()%>
				return rows;
				<%} else if (returnType != "void"){%>
				reader.Read();
				<%=returnType%> tmp = (<%=returnType%>)reader[0];
				reader.Close();
<%=outputValues.ToString()%>				
				return tmp;
			<% } %>		
		<% } %>
		
		}
		catch(SqlException ex)
		{
			throw new DataException("An data access error occured, please check inner SqlException.", ex);
		}
	}
	
	#endregion
	
<%
		}
	}
%>

	#endregion

<% } // endif IncludeCustoms %>
	
	}//end class
} // end namespace
